{
    "summary": "This code defines classes for PV, wind power, and battery simulations with time and device parameters, considers diesel generators, and includes hydrogen production and output curves. It also defines load curve classes.",
    "details": [
        {
            "comment": "The code defines a class for simulated diesel results, with attributes like component name and type, and parameters like diesel consumption. It also includes various utility functions such as summing indexed variables, adding lists of elements, handling values safely, and applying the Rectified Linear Unit (ReLU) function. The code imports from various libraries including log_utils, constants, pyomo_environ, pydantic, and ies_optim. It also includes some mathematical operations for handling complex numbers (cmath).",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":0-72",
            "content": "from log_utils import logger_print\nfrom typing import List\nfrom constants import *\nfrom pyomo_environ import *\nfrom pydantic import BaseModel, validator\nfrom ies_optim import *\nimport statistics\nfrom pyomo.core.base.var import IndexedVar\ndef sumVarList(varList: IndexedVar):\n    return sum(varList.values())\ndef addListElem(*args):\n    vals = []\n    for elem_zip in zip(*args):\n        vals.append(sum(elem_zip))\n    return vals\nimport cmath\ndef safeValue(val):\n    try:\n        return value(val)\n    except:\n        return val\ndef safeDiv(val, div):\n    try:\n        return safeValue(val) / safeValue(div)\n    except:\n        return cmath.nan\ndef safeAbs(val):\n    if type(val) in [str]:\n        return val\n    try:\n        return abs(val)\n    except:\n        return cmath.nan\ndef ReLU(val):\n    if type(val) not in [int, float]:\n        val = value(val)\n    if val > 0:\n        return val\n    else:\n        return 0\n############\n# \u4eff\u771f\u7ed3\u679c #\n############\nclass \u67f4\u6cb9\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    ## UNIQ PARAMS ##\n    \u67f4\u6cb9\u6d88\u8017\u91cf: float\n    \"\"\""
        },
        {
            "comment": "This code contains two classes, \u67f4\u6cb9\u4eff\u771f\u7ed3\u679c and \u7535\u8d1f\u8377\u4eff\u771f\u7ed3\u679c. The \u67f4\u6cb9\u4eff\u771f\u7ed3\u679c class has attributes for fuel consumption amount (in L) and fuel consumption cost (in millions). It also has a static method export that returns an instance of the class with calculated values based on model parameters. The \u7535\u8d1f\u8377\u4eff\u771f\u7ed3\u679c class has attributes for load, income (both in millions), and also has a static method export that calculates and returns these values based on model parameters. Both classes use static methods to calculate results from given models and time parameters.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":73-119",
            "content": "    \u5355\u4f4d: L <- m3\n    \"\"\"\n    @validator(\"\u67f4\u6cb9\u6d88\u8017\u91cf\")\n    def standard_unit_to_custom_\u67f4\u6cb9\u6d88\u8017\u91cf(cls, v):\n        return v / 0.0010000000000000002\n    \u67f4\u6cb9\u6d88\u8017\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    @staticmethod\n    def export(model: \u67f4\u6cb9\u6a21\u578b, timeParam: float):\n        return \u67f4\u6cb9\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u67f4\u6cb9\u6d88\u8017\u8d39\u7528=safeAbs(value(model.\u603b\u6210\u672c\u5e74\u5316)),\n            \u67f4\u6cb9\u6d88\u8017\u91cf=safeAbs(\n                ((statistics.mean([value(e) for e in model.\u71c3\u6599\u63a5\u53e3.values()])) * timeParam)\n            ),\n        )\nclass \u7535\u8d1f\u8377\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    ## UNIQ PARAMS ##\n    \u7535\u8d1f\u8377: float\n    \"\"\"\n    \u5355\u4f4d: kWh\n    \"\"\"\n    \u7535\u6536\u5165: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    @staticmethod\n    def export(model: \u7535\u8d1f\u8377\u6a21\u578b, timeParam: float):\n        return \u7535\u8d1f\u8377\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u7535\u8d1f\u8377=safeAbs(\n                ((statistics.mean([-value(e) for e in model.\u7535\u63a5\u53e3.values()])) * timeParam)"
        },
        {
            "comment": "This code defines two classes, \u5149\u4f0f\u53d1\u7535\u4eff\u771f\u7ed3\u679c (PV simulation result) and \u98ce\u529b\u53d1\u7535\u4eff\u771f\u7ed3\u679c (Wind power simulation result), which inherit from BaseModel. These classes store the properties of photovoltaic and wind power devices, including their name, type, model, number of units, maintenance costs, and energy production. The classes also have an export method to generate simulation results for a given time parameter.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":120-183",
            "content": "            ),\n            \u7535\u6536\u5165=safeAbs(-value(model.\u603b\u6210\u672c\u5e74\u5316)),\n        )\nclass \u5149\u4f0f\u53d1\u7535\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u53f0\u6570: int\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u4ea7\u7535\u91cf: float\n    \"\"\"\n    \u5355\u4f4d: kWh\n    \"\"\"\n    @staticmethod\n    def export(model: \u5149\u4f0f\u53d1\u7535\u6a21\u578b, timeParam: float):\n        return \u5149\u4f0f\u53d1\u7535\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),\n            \u8bbe\u5907\u53f0\u6570=safeAbs(value(model.DeviceCount)),\n            \u4ea7\u7535\u91cf=safeAbs(\n                ((statistics.mean([value(e) for e in model.\u7535\u63a5\u53e3.values()])) * timeParam)\n            ),\n        )\nclass \u98ce\u529b\u53d1\u7535\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u53f0\u6570: int\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u4ea7\u7535\u91cf: float\n    \"\"\""
        },
        {
            "comment": "This code defines a class for the simulation result of wind power and diesel generators. It calculates the production quantity, device count, and maintenance costs based on the model inputs and time parameter. The diesel generator simulation results also include custom units for diesel consumption and average efficiency.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":184-241",
            "content": "    \u5355\u4f4d: kWh\n    \"\"\"\n    @staticmethod\n    def export(model: \u98ce\u529b\u53d1\u7535\u6a21\u578b, timeParam: float):\n        return \u98ce\u529b\u53d1\u7535\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),\n            \u8bbe\u5907\u53f0\u6570=safeAbs(value(model.DeviceCount)),\n            \u4ea7\u7535\u91cf=safeAbs(\n                ((statistics.mean([value(e) for e in model.\u7535\u63a5\u53e3.values()])) * timeParam)\n            ),\n        )\nclass \u67f4\u6cb9\u53d1\u7535\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u53f0\u6570: int\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u4ea7\u7535\u91cf: float\n    \"\"\"\n    \u5355\u4f4d: kWh\n    \"\"\"\n    \u67f4\u6cb9\u6d88\u8017\u91cf: float\n    \"\"\"\n    \u5355\u4f4d: L <- m3\n    \"\"\"\n    @validator(\"\u67f4\u6cb9\u6d88\u8017\u91cf\")\n    def standard_unit_to_custom_\u67f4\u6cb9\u6d88\u8017\u91cf(cls, v):\n        return v / 0.0010000000000000002\n    \u5e73\u5747\u6548\u7387_\u5e73\u5747COP: float\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    @staticmethod\n    def export(model: \u67f4\u6cb9\u53d1\u7535\u6a21\u578b, timeParam: float):"
        },
        {
            "comment": "This code seems to be a part of a larger function that takes a model as input and returns simulation results for a diesel generator device. It calculates various parameters like maintenance costs, power production, fuel consumption, and average efficiency based on the provided model information. The code utilizes various functions from the 'statistics' module for calculation and safety checks with 'safeAbs' and 'safeDiv'. It also converts the input model values to float using 'value' function.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":242-267",
            "content": "        return \u67f4\u6cb9\u53d1\u7535\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),\n            \u8bbe\u5907\u53f0\u6570=safeAbs(value(model.DeviceCount)),\n            \u4ea7\u7535\u91cf=safeAbs(\n                ((statistics.mean([value(e) for e in model.\u7535\u63a5\u53e3.values()])) * timeParam)\n            ),\n            \u67f4\u6cb9\u6d88\u8017\u91cf=safeAbs(\n                ((statistics.mean([value(e) for e in model.\u71c3\u6599\u63a5\u53e3.values()])) * timeParam)\n            ),\n            \u5e73\u5747\u6548\u7387_\u5e73\u5747COP=safeAbs(\n                (\n                    safeDiv(\n                        (\n                            (statistics.mean([value(e) for e in model.\u7535\u63a5\u53e3.values()]))\n                            * timeParam\n                        ),\n                        model.\u71c3\u6599\u70ed\u503c\n                        * (\n                            (\n                                (\n                                    statistics.mean("
        },
        {
            "comment": "This code defines a class \"\u9502\u7535\u6c60\u4eff\u771f\u7ed3\u679c\" (Lithium-ion battery simulation result) which inherits from BaseModel. It contains various properties such as device name, model, type, and maintenance fees. The method \"export\" takes in a Lithium-ion battery model and time parameter, and returns an instance of the class with calculated values for the properties.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":268-314",
            "content": "                                        [value(e) for e in model.\u71c3\u6599\u63a5\u53e3.values()]\n                                    )\n                                )\n                                * timeParam\n                            )\n                        ),\n                    )\n                )\n                * ((timeParam / model.\u8ba1\u7b97\u53c2\u6570.\u603b\u8ba1\u7b97\u65f6\u957f))\n            ),\n        )\nclass \u9502\u7535\u6c60\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u53f0\u6570: int\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u5e73\u5747\u6548\u7387_\u5e73\u5747COP: float\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    @staticmethod\n    def export(model: \u9502\u7535\u6c60\u6a21\u578b, timeParam: float):\n        return \u9502\u7535\u6c60\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),\n            \u8bbe\u5907\u53f0\u6570=safeAbs(value(model.DeviceCount)),\n            \u5e73\u5747\u6548\u7387_\u5e73\u5747COP=safeAbs("
        },
        {
            "comment": "This code calculates the mean of ReLU-processed elements from a model's \u7535\u63a5\u53e3 values, multiplies by a time parameter, subtracts initial SOC times total capacity, and applies another ReLU function.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":315-339",
            "content": "                (\n                    safeDiv(\n                        ReLU(\n                            (\n                                (\n                                    (\n                                        statistics.mean(\n                                            [ReLU(e) for e in model.\u7535\u63a5\u53e3.values()]\n                                        )\n                                    )\n                                    * timeParam\n                                )\n                            )\n                            - (model.InitSOC * model.TotalCapacity)\n                        ),\n                        (\n                            -(\n                                (\n                                    (\n                                        statistics.mean(\n                                            [-ReLU(-e) for e in model.\u7535\u63a5\u53e3.values()]\n                                        )\n                                    )\n                                    * timeParam\n                                )"
        },
        {
            "comment": "This code defines a class named `\u53d8\u538b\u5668\u4eff\u771f\u7ed3\u679c` (TransformerSimulationResult) that represents the simulation results of transformers. It includes properties such as component name, type, model, and maintenance cost. The class has an `export` method which takes `model` and `timeParam` as parameters, and returns a TransformerSimulationResult object with the specified data. The calculation for the maintenance cost is based on the total fixed and variable maintenance costs, annualized, multiplied by timeParam divided by the number of hours per year.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":340-386",
            "content": "                            )\n                        ),\n                    )\n                )\n                * ((timeParam / model.\u8ba1\u7b97\u53c2\u6570.\u603b\u8ba1\u7b97\u65f6\u957f))\n            ),\n        )\nclass \u53d8\u538b\u5668\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u53f0\u6570: int\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u5e73\u5747\u6548\u7387_\u5e73\u5747COP: float\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    @staticmethod\n    def export(model: \u53d8\u538b\u5668\u6a21\u578b, timeParam: float):\n        return \u53d8\u538b\u5668\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),\n            \u8bbe\u5907\u53f0\u6570=safeAbs(value(model.DeviceCount)),\n            \u5e73\u5747\u6548\u7387_\u5e73\u5747COP=safeAbs(\n                (\n                    -safeDiv(\n                        statistics.mean([value(e) for e in model.\u7535\u8f93\u5165.values()]),\n                        statistics.mean([value(e) for e in model.\u7535\u8f93\u51fa.values()]),"
        },
        {
            "comment": "This code defines a class called \"\ubcc0\ud615\u5668\u4eff\u771f\uacb0\uacfc\" (Variable Transformer Simulation Result) that represents the simulation results of a variable transformer. The class has attributes such as component name, type, model, and device specifications. It also includes maintenance fees and average efficiency. There is a static method called \"export\" which takes a model object and time parameter to generate the simulation result object with calculated values.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":387-433",
            "content": "                    )\n                )\n                * ((timeParam / model.\u8ba1\u7b97\u53c2\u6570.\u603b\u8ba1\u7b97\u65f6\u957f))\n            ),\n        )\nclass \u53d8\u6d41\u5668\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u53f0\u6570: int\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u5e73\u5747\u6548\u7387_\u5e73\u5747COP: float\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    @staticmethod\n    def export(model: \u53d8\u6d41\u5668\u6a21\u578b, timeParam: float):\n        return \u53d8\u6d41\u5668\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),\n            \u8bbe\u5907\u53f0\u6570=safeAbs(value(model.DeviceCount)),\n            \u5e73\u5747\u6548\u7387_\u5e73\u5747COP=safeAbs(\n                (\n                    -safeDiv(\n                        statistics.mean([value(e) for e in model.\u7535\u8f93\u5165.values()]),\n                        statistics.mean([value(e) for e in model.\u7535\u8f93\u51fa.values()]),\n                    )\n                )"
        },
        {
            "comment": "This code defines a class called \"\u53cc\u5411\u53d8\u6d41\u5668\u4eff\u771f\u7ed3\u679c\" (Bidirectional Converter Simulation Result) which extends the BaseModel class. It has attributes such as component name, type, model, number of devices, maintenance cost, and average efficiency (COP). The export method takes in a model and time parameter, and returns an instance of the Bidirectional Converter Simulation Result class with calculated values for the device count, maintenance fee, and average COP.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":434-480",
            "content": "                * ((timeParam / model.\u8ba1\u7b97\u53c2\u6570.\u603b\u8ba1\u7b97\u65f6\u957f))\n            ),\n        )\nclass \u53cc\u5411\u53d8\u6d41\u5668\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u53f0\u6570: int\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u5e73\u5747\u6548\u7387_\u5e73\u5747COP: float\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    @staticmethod\n    def export(model: \u53cc\u5411\u53d8\u6d41\u5668\u6a21\u578b, timeParam: float):\n        return \u53cc\u5411\u53d8\u6d41\u5668\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),\n            \u8bbe\u5907\u53f0\u6570=safeAbs(value(model.DeviceCount)),\n            \u5e73\u5747\u6548\u7387_\u5e73\u5747COP=safeAbs(\n                (\n                    value(\n                        (\n                            safeDiv(\n                                sumVarList(model.\u50a8\u80fd\u7aef_.x_pos),\n                                sumVarList(model.\u7ebf\u8def\u7aef_.x_neg),\n                            )\n                            * sumVarList(model.\u50a8\u80fd\u7aef_.b_pos)"
        },
        {
            "comment": "This code is validating the export format of a microgrid model. It calculates various parameters related to transmission lines and converts them into a TransmissionLineSimulationResult class object. The function takes a model and time parameter as inputs and returns a result object containing information like component name, type, model, maintenance cost, average efficiency, and COP.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":481-523",
            "content": "                        )\n                        + (\n                            safeDiv(\n                                sumVarList(model.\u7ebf\u8def\u7aef_.x_pos),\n                                sumVarList(model.\u50a8\u80fd\u7aef_.x_neg),\n                            )\n                            * sumVarList(model.\u7ebf\u8def\u7aef_.b_pos)\n                        )\n                    )\n                    / model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570\n                )\n                * ((timeParam / model.\u8ba1\u7b97\u53c2\u6570.\u603b\u8ba1\u7b97\u65f6\u957f))\n            ),\n        )\nclass \u4f20\u8f93\u7ebf\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u5e73\u5747\u6548\u7387_\u5e73\u5747COP: float\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    @staticmethod\n    def export(model: \u4f20\u8f93\u7ebf\u6a21\u578b, timeParam: float):\n        return \u4f20\u8f93\u7ebf\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),"
        },
        {
            "comment": "This code defines classes for hydrogen load simulation results and gas turbine generator simulation results. The hydrogen load simulation result class has attributes for component name, type, hydrogen consumption, and income. The gas turbine generator simulation result class has attributes for component name, type, model, and number of units. Both classes have static export methods that return an instance of the respective class with calculated values based on input models and time parameters.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":524-574",
            "content": "            \u5e73\u5747\u6548\u7387_\u5e73\u5747COP=safeAbs(\n                (\n                    -safeDiv(\n                        statistics.mean([value(e) for e in model.\u7535\u8f93\u5165.values()]),\n                        statistics.mean([value(e) for e in model.\u7535\u8f93\u51fa.values()]),\n                    )\n                )\n                * ((timeParam / model.\u8ba1\u7b97\u53c2\u6570.\u603b\u8ba1\u7b97\u65f6\u957f))\n            ),\n        )\nclass \u6c22\u8d1f\u8377\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    ## UNIQ PARAMS ##\n    \u6c22\u6c14\u6d88\u8017\u91cf: float\n    \"\"\"\n    \u5355\u4f4d: t\n    \"\"\"\n    \u6c22\u6c14\u6536\u5165: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    @staticmethod\n    def export(model: \u6c22\u8d1f\u8377\u6a21\u578b, timeParam: float):\n        return \u6c22\u8d1f\u8377\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u6c22\u6c14\u6d88\u8017\u91cf=safeAbs(\n                (\n                    (statistics.mean([-value(e) for e in model.\u6c22\u6c14\u63a5\u53e3.values()]))\n                    * timeParam\n                )\n            ),\n            \u6c22\u6c14\u6536\u5165=safeAbs(-value(model.\u603b\u6210\u672c\u5e74\u5316)),\n        )\nclass \u71c3\u6c14\u53d1\u7535\u673a\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u53f0\u6570: int"
        },
        {
            "comment": "This function takes a gas turbine model and a time parameter, then returns a GasTurbineSimulationResult object with various attributes such as device maintenance cost, power generated, and gas consumed. The results are calculated based on the model's specifications and the given time period.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":575-619",
            "content": "    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u4ea7\u70ed\u91cf: float\n    \"\"\"\n    \u5355\u4f4d: kWh\n    \"\"\"\n    \u4ea7\u7535\u91cf: float\n    \"\"\"\n    \u5355\u4f4d: kWh\n    \"\"\"\n    \u5929\u7136\u6c14\u6d88\u8017\u91cf: float\n    \"\"\"\n    \u5355\u4f4d: m3\n    \"\"\"\n    @staticmethod\n    def export(model: \u71c3\u6c14\u53d1\u7535\u673a\u6a21\u578b, timeParam: float):\n        return \u71c3\u6c14\u53d1\u7535\u673a\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),\n            \u8bbe\u5907\u53f0\u6570=safeAbs(value(model.DeviceCount)),\n            \u4ea7\u7535\u91cf=safeAbs(\n                ((statistics.mean([value(e) for e in model.\u7535\u63a5\u53e3.values()])) * timeParam)\n            ),\n            \u5929\u7136\u6c14\u6d88\u8017\u91cf=safeAbs(\n                ((statistics.mean([value(e) for e in model.\u71c3\u6599\u63a5\u53e3.values()])) * timeParam)\n            ),\n            \u4ea7\u70ed\u91cf=safeAbs(\n                (\n                    (\n                        (statistics.mean([value(e) for e in model.\u9ad8\u6e29\u70df\u6c14\u4f59\u70ed\u63a5\u53e3.values()]))"
        },
        {
            "comment": "This code defines a class `\u7535\u89e3\u69fd\u4eff\u771f\u7ed3\u679c` (ElectrolyzerSimulationResult) that inherits from `BaseModel` and contains properties such as device parameters, maintenance costs, and simulation results. It also has a static method `export()` which takes in an `\u7535\u89e3\u69fd\u6a21\u578b` (ElectrolyzerModel) and time parameter, and returns an instance of the class with the calculated values for electrolyzer simulation results.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":620-676",
            "content": "                        * timeParam\n                    )\n                )\n                + (\n                    (\n                        (statistics.mean([value(e) for e in model.\u7f38\u5957\u6c34\u4f59\u70ed\u63a5\u53e3.values()]))\n                        * timeParam\n                    )\n                )\n            ),\n        )\nclass \u7535\u89e3\u69fd\u4eff\u771f\u7ed3\u679c(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u5143\u4ef6\u7c7b\u578b: str\n    \u8bbe\u5907\u578b\u53f7: str\n    \u8bbe\u5907\u53f0\u6570: int\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528: float\n    \"\"\"\n    \u5355\u4f4d: \u4e07\u5143\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u4ea7\u70ed\u91cf: float\n    \"\"\"\n    \u5355\u4f4d: kWh\n    \"\"\"\n    \u7535\u8d1f\u8377: float\n    \"\"\"\n    \u5355\u4f4d: kWh\n    \"\"\"\n    \u6c22\u6c14\u4ea7\u91cf: float\n    \"\"\"\n    \u5355\u4f4d: t\n    \"\"\"\n    @staticmethod\n    def export(model: \u7535\u89e3\u69fd\u6a21\u578b, timeParam: float):\n        return \u7535\u89e3\u69fd\u4eff\u771f\u7ed3\u679c(\n            \u5143\u4ef6\u540d\u79f0=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0),\n            \u5143\u4ef6\u7c7b\u578b=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.__class__.__name__.strip(\"\u4fe1\u606f\")),\n            \u8bbe\u5907\u578b\u53f7=safeAbs(model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u578b\u53f7),\n            \u8bbe\u5907\u7ef4\u62a4\u8d39\u7528=safeAbs(\n                ((value(model.\u603b\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c + model.\u603b\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\u5e74\u5316)) * ((timeParam / \u6bcf\u5e74\u5c0f\u65f6\u6570)))\n            ),\n            \u8bbe\u5907\u53f0\u6570=safeAbs(value(model.DeviceCount)),\n            \u7535\u8d1f\u8377=safeAbs("
        },
        {
            "comment": "This code defines classes for hydrogen production and solar/wind power output curves, and includes a method to export these curves for models. The classes have attributes for device information, time, and power output. The `export` method generates an instance of the curve class using the device's model information and the given time parameter.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":677-733",
            "content": "                ((statistics.mean([-value(e) for e in model.\u7535\u63a5\u53e3.values()])) * timeParam)\n            ),\n            \u6c22\u6c14\u4ea7\u91cf=safeAbs(\n                ((statistics.mean([value(e) for e in model.\u5236\u6c22\u63a5\u53e3.values()])) * timeParam)\n            ),\n            \u4ea7\u70ed\u91cf=safeAbs(\n                (\n                    (statistics.mean([value(e) for e in model.\u8bbe\u5907\u4f59\u70ed\u63a5\u53e3.values()]))\n                    * timeParam\n                )\n            ),\n        )\n################\n# \u8bbe\u5907\u51fa\u529b\u66f2\u7ebf #\n################\nclass \u5149\u4f0f\u53d1\u7535\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u53d1\u7535\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod\n    def export(model: \u5149\u4f0f\u53d1\u7535\u6a21\u578b, timeParam: float):\n        return \u5149\u4f0f\u53d1\u7535\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u53d1\u7535\u529f\u7387=[value(e) for e in model.\u7535\u63a5\u53e3.values()],\n        )\nclass \u98ce\u529b\u53d1\u7535\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u53d1\u7535\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod"
        },
        {
            "comment": "This code defines three classes: WindPowerCurve, DieselPowerCurve, and LithiumBatteryCurve. Each class represents the output power of a respective energy source over time. The classes inherit from BaseModel and have attributes for time, device name, and power/energy output. The WindPowerCurve and DieselPowerCurve classes also include export methods to generate their corresponding power curves. The LithiumBatteryCurve class includes additional attributes for battery capacity, battery state, and power output, as well as a validator function to convert the battery state unit from percent (default) to custom units.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":734-794",
            "content": "    def export(model: \u98ce\u529b\u53d1\u7535\u6a21\u578b, timeParam: float):\n        return \u98ce\u529b\u53d1\u7535\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u53d1\u7535\u529f\u7387=[value(e) for e in model.\u7535\u63a5\u53e3.values()],\n        )\nclass \u67f4\u6cb9\u53d1\u7535\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u53d1\u7535\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod\n    def export(model: \u67f4\u6cb9\u53d1\u7535\u6a21\u578b, timeParam: float):\n        return \u67f4\u6cb9\u53d1\u7535\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u53d1\u7535\u529f\u7387=[value(e) for e in model.\u7535\u63a5\u53e3.values()],\n        )\nclass \u9502\u7535\u6c60\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u8377\u7535\u5bb9\u91cf: List[float]\n    \"\"\"\n    \u5355\u4f4d: kWh\n    \"\"\"\n    \u8377\u7535\u72b6\u6001: List[float]\n    \"\"\"\n    \u5355\u4f4d: percent <- one\n    \"\"\"\n    @validator(\"\u8377\u7535\u72b6\u6001\")\n    def standard_unit_to_custom_\u8377\u7535\u72b6\u6001(cls, v):\n        return [e / 0.01 for e in v]\n    \u7535\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod\n    def export(model: \u9502\u7535\u6c60\u6a21\u578b, timeParam: float):"
        },
        {
            "comment": "This code defines classes for battery, transformer, and inverter output curves. The `export` method generates the output curve data by iterating over model parameters and values, then creating a new instance of the respective output curve class with time as a range of iteration steps, component name, and power or capacity values from the model.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":795-847",
            "content": "        return \u9502\u7535\u6c60\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u7535\u529f\u7387=[value(e) for e in model.\u7535\u63a5\u53e3.values()],\n            \u8377\u7535\u5bb9\u91cf=[value(e) for e in model.CurrentTotalCapacity.values()],\n            \u8377\u7535\u72b6\u6001=[\n                value(safeDiv(e, model.TotalCapacity))\n                for e in model.CurrentTotalCapacity.values()\n            ],\n        )\nclass \u53d8\u538b\u5668\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u8f6c\u6362\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod\n    def export(model: \u53d8\u538b\u5668\u6a21\u578b, timeParam: float):\n        return \u53d8\u538b\u5668\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u8f6c\u6362\u529f\u7387=[value(e) for e in model.\u7535\u8f93\u51fa.values()],\n        )\nclass \u53d8\u6d41\u5668\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u8f6c\u6362\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod\n    def export(model: \u53d8\u6d41\u5668\u6a21\u578b, timeParam: float):\n        return \u53d8\u6d41\u5668\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),"
        },
        {
            "comment": "Classes for exporting load curves of bi-directional converter, uni-directional load, and transmission lines. Each class inherits from BaseModel and takes in a model object and time parameter to generate the output curve. The output curves contain information about the device name, time, and power values (converted or consumed).",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":848-903",
            "content": "            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u8f6c\u6362\u529f\u7387=[value(e) for e in model.\u7535\u8f93\u51fa.values()],\n        )\nclass \u53cc\u5411\u53d8\u6d41\u5668\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u8f6c\u6362\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod\n    def export(model: \u53cc\u5411\u53d8\u6d41\u5668\u6a21\u578b, timeParam: float):\n        return \u53cc\u5411\u53d8\u6d41\u5668\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u8f6c\u6362\u529f\u7387=addListElem(\n                [value(e) for e in model.\u50a8\u80fd\u7aef_.x_pos.values()],\n                [-value(e) for e in model.\u7ebf\u8def\u7aef_.x_pos.values()],\n            ),\n        )\nclass \u7535\u8d1f\u8377\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u8017\u7535\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod\n    def export(model: \u7535\u8d1f\u8377\u6a21\u578b, timeParam: float):\n        return \u7535\u8d1f\u8377\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u8017\u7535\u529f\u7387=[-value(e) for e in model.\u7535\u63a5\u53e3.values()],\n        )\nclass \u4f20\u8f93\u7ebf\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str"
        },
        {
            "comment": "This code defines two classes: \"\u4f20\u8f93\u7ebf\u51fa\u529b\u66f2\u7ebf\" and \"\u7535\u89e3\u69fd\u51fa\u529b\u66f2\u7ebf\". The \"export\" method of each class takes a model object and a time parameter to create an instance of the respective class with properties such as time, power, and other relevant data. The \"standard_unit_to_custom_\u4ea7\u6c22\u6d41\u91cf\" validator method converts the standard unit of hydrogen flow rate into a custom unit for the \u7535\u89e3\u69fd\u51fa\u529b\u66f2\u7ebf class.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":905-960",
            "content": "    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u4f20\u8f93\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod\n    def export(model: \u4f20\u8f93\u7ebf\u6a21\u578b, timeParam: float):\n        return \u4f20\u8f93\u7ebf\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u4f20\u8f93\u529f\u7387=[-value(e) for e in model.\u7535\u8f93\u5165.values()],\n        )\nclass \u7535\u89e3\u69fd\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u8017\u7535\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    \u4ea7\u6c22\u6d41\u91cf: List[float]\n    \"\"\"\n    \u5355\u4f4d: kg <- metric_ton\n    \"\"\"\n    @validator(\"\u4ea7\u6c22\u6d41\u91cf\")\n    def standard_unit_to_custom_\u4ea7\u6c22\u6d41\u91cf(cls, v):\n        return [e / 0.001 for e in v]\n    \u4ea7\u70ed\u529f\u7387: List[float]\n    \"\"\"\n    \u5355\u4f4d: kW\n    \"\"\"\n    @staticmethod\n    def export(model: \u7535\u89e3\u69fd\u6a21\u578b, timeParam: float):\n        return \u7535\u89e3\u69fd\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u8017\u7535\u529f\u7387=[-value(e) for e in model.\u7535\u63a5\u53e3.values()],\n            \u4ea7\u6c22\u6d41\u91cf=[value(e) for e in model.\u5236\u6c22\u63a5\u53e3.values()],\n            \u4ea7\u70ed\u529f\u7387=[value(e) for e in model.\u8bbe\u5907\u4f59\u70ed\u63a5\u53e3.values()],"
        },
        {
            "comment": "This code defines a class for \"HydrogenLoadCurve\" that inherits from BaseModel. It has attributes for component name, time, and customized hydrogen flow rate in kg. The class also includes a validator to convert standard units to custom units and a static method export to create instances of the model with given parameters.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/export_format_validate.py\":961-988",
            "content": "        )\nclass \u6c22\u8d1f\u8377\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    \u5143\u4ef6\u540d\u79f0: str\n    \u65f6\u95f4: List[int]\n    \"\"\"\n    \u5355\u4f4d: one\n    \"\"\"\n    ## UNIQ PARAMS ##\n    \u8017\u6c22\u6d41\u91cf: List[float]\n    \"\"\"\n    \u5355\u4f4d: kg <- metric_ton\n    \"\"\"\n    @validator(\"\u8017\u6c22\u6d41\u91cf\")\n    def standard_unit_to_custom_\u8017\u6c22\u6d41\u91cf(cls, v):\n        return [e / 0.001 for e in v]\n    @staticmethod\n    def export(model: \u6c22\u8d1f\u8377\u6a21\u578b, timeParam: float):\n        return \u6c22\u8d1f\u8377\u51fa\u529b\u66f2\u7ebf(\n            \u65f6\u95f4=list(range(model.\u8ba1\u7b97\u53c2\u6570.\u8fed\u4ee3\u6b65\u6570)),\n            \u5143\u4ef6\u540d\u79f0=model.\u8bbe\u5907\u4fe1\u606f.\u8bbe\u5907\u540d\u79f0,\n            \u8017\u6c22\u6d41\u91cf=[-value(e) for e in model.\u6c22\u6c14\u63a5\u53e3.values()],\n        )"
        }
    ]
}