{
    "summary": "This code checks for file existence and prepares paths, then generates a report, packs it into a .7z file named \"calculation_report.7z\", logs the file path, and copies it to its final location.",
    "details": [
        {
            "comment": "This code imports necessary functions and libraries, checks for file existence, prepares input and output paths, and ensures 7z is installed. It then proceeds to pack up the data into a .7z archive file named \"calculation_report.7z\".",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/render_and_packup_report.py\":0-37",
            "content": "from log_utils import logger_print\nimport json\ndef load_json(filename):\n    with open(filename, \"r\") as f:\n        content = f.read()\n    return json.loads(content)\ninput_data_fpath = \"microgrid_topo_check_test_input.json\"\noutput_data_fpath = \"microgrid_test_output_full.json\"\ninput_data = load_json(input_data_fpath)\noutput_data = load_json(output_data_fpath)\nreport_output_path = \"report_output.md\"\nreport_template_path = f\"{report_output_path}.j2\"\nfrom jinja_utils import *\nimport tempfile, os\nimport shutil\nassert shutil.which(\"7z\") is not None, \"7z is not installed\"\npackup_file = \"calculation_report.7z\"\nif os.path.isfile(packup_file):\n    logger_print(\"removing old report file\")\n    os.remove(packup_file)\nelif os.path.exists(packup_file):\n    raise Exception(\n        'Unable to create file \"%s\" because of unknown entity occupying the path'\n        % packup_file\n    )\nbasepath = os.path.abspath(os.curdir)\ninput_data_fpath_full = os.path.join(basepath, input_data_fpath)\noutput_data_fpath_full = os.path.join(basepath, output_data_fpath)"
        },
        {
            "comment": "This code generates a report and packs it up. It creates a temporary directory, changes the current working directory to that temp dir, makes a report directory within it, copies relevant files into it, renders the report using specified templates, and then packages the entire report into a .7z file. Finally, it copies the packed file to its final location and logs the file path.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/render_and_packup_report.py\":38-69",
            "content": "template_path_abs = os.path.join(basepath, report_template_path)\npackup_file_full = os.path.join(basepath, packup_file)\nfrom plot_utils import plotMultipleTopologiesFromFile\nwith tempfile.TemporaryDirectory() as td:\n    os.chdir(td)\n    report_dir = \"report\"\n    os.mkdir(report_dir)\n    report_dir_full = os.path.join(td, report_dir)\n    plotMultipleTopologiesFromFile(input_data_fpath_full, report_dir)\n    shutil.copy(input_data_fpath_full, report_dir_full)\n    shutil.copy(output_data_fpath_full, report_dir_full)\n    render_params = dict(\n        input_data=input_data,\n        output_data=output_data,\n        topo_graph_list=[],\n        data_dict_list={},\n    )\n    load_render_and_format(\n        template_path_abs,\n        report_output_path,\n        render_params=render_params,\n        banner=\"Rendering Markdown Report\",\n        needFormat=False,\n    )\n    os.system(f\"7z a {packup_file} {report_dir}\")\n    shutil.copy(packup_file, packup_file_full)\n    os.chdir(basepath)  # fix the occupation error.\nlogger_print(f\"Packed up at: {packup_file}\")"
        }
    ]
}