{
    "summary": "This code defines Pydantic models for representing curves, microgrid systems and simulation results with performance metrics. It includes graph models for energy flow graph modeling, and classes for asynchronous calculation tasks and revocation statuses.",
    "details": [
        {
            "comment": "This code defines several Pydantic models for representing various types of curves and calculation results related to a microgrid system. The models include properties such as x and y axis data, curve names, abbreviations, and device performance data. These classes can be used to store and validate data in the application.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_datamodel_template.py\":0-40",
            "content": "from pydantic import BaseModel, Field\nfrom networkx.readwrite import json_graph\nfrom typing import Mapping, List, Tuple, Union, Dict, Any\ntry:\n    from typing import Literal\nexcept:\n    from typing_extensions import Literal\nimport networkx\n# from celery.states import PENDING, RECEIVED, STARTED, SUCCESS, FAILURE, RETRY, REVOKED\n# question: how to convert pydantic models to json?\n# to json: json.dumps(model.dict())\nfrom microgrid_base.ies_optim import EnergyFlowGraph\nclass \u66f2\u7ebf(BaseModel):\n    x: List[float] = Field(title=\"x\u8f74\u6570\u636e\")\n    y: List[float] = Field(title=\"y\u8f74\u6570\u636e\")\nclass \u51fa\u529b\u66f2\u7ebf(BaseModel):\n    name: str = Field(title=\"\u51fa\u529b\u66f2\u7ebf\u6807\u9898\")\n    abbr: str = Field(title=\"\u51fa\u529b\u66f2\u7ebf\u7f29\u5199\")\n    data: \u66f2\u7ebf = Field(title=\"\u66f2\u7ebf\u6570\u636e\")\nclass \u8bbe\u5907\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    name: str = Field(title=\"\u8bbe\u5907\u540d\u79f0\")\n    plot_list: List[\u51fa\u529b\u66f2\u7ebf] = Field(title=\"\u51fa\u529b\u66f2\u7ebf\u5217\u8868\")\nclass \u5355\u6b21\u8ba1\u7b97\u7ed3\u679c(BaseModel):\n    performanceDataList: List[\u8bbe\u5907\u51fa\u529b\u66f2\u7ebf] = Field(\n        title=\"\u8bbe\u5907\u51fa\u529b\u66f2\u7ebf\u5217\u8868\",\n        example=[\n            {\n                \"name\": \"Any\",\n                \"plot_list\": [\n                    {"
        },
        {
            "comment": "This code defines a data model for simulation results of an unknown system. It includes attributes such as \"name\", \"modelNumber\", and various performance metrics like \"coolingCapacity\", \"electricLoad\", and \"dieselConsumption\". The model also contains a list of plots with x and y coordinates, potentially representing graphical data visualizations.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_datamodel_template.py\":41-71",
            "content": "                        \"name\": \"plotName\",\n                        \"abbr\": \"plotAbbr\",\n                        \"data\": {\"x\": [], \"y\": []},\n                    }\n                ],\n            }\n        ],\n    )\n    simulationResultTable: List[Dict[str, Any]] = Field(\n        title=\"\u4eff\u771f\u7ed3\u679c\u5217\u8868\",\n        example=[\n            {\n                \"name\": \"Any\",\n                \"modelNumber\": \"Any\",\n                \"equiCounts\": 1,\n                \"coolingCapacity\": 1,\n                \"coolingLoad\": 1,\n                \"electricSupply\": 1,\n                \"electricLoad\": 1,\n                \"heatingLoad\": 1,\n                \"heatLoad\": 1,\n                \"steamProduction\": 1,\n                \"steamLoad\": 1,\n                \"hydrogenProduction\": 1,\n                \"hydrogenConsumption\": 1,\n                \"dieselConsumption\": 1,\n                \"dieselConsumptionCosts\": 1,\n                \"naturalGasConsumption\": 1,\n                \"naturalGasConsumptionCosts\": 1,\n                \"averageEfficiency\": 1,\n                \"equipmentMaintenanceCosts\": 1,"
        },
        {
            "comment": "This code defines two classes: CalculationResult and EnergyFlowGraph. CalculationResult contains resultList, success boolean, and error_log string. EnergyFlowGraph is a mapping class for energy flow graph used in simulation and optimization calculations with different parameters and variables. It includes examples for modeling simulation and planning design.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_datamodel_template.py\":72-109",
            "content": "                \"coldIncome\": 1,\n                \"hotIncome\": 1,\n                \"eletricncome\": 1,\n                \"steamIncome\": 1,\n                \"hydrogenIncome\": 1,\n            }\n        ],\n    )\nclass CalculationResult(BaseModel):\n    resultList: List[\u5355\u6b21\u8ba1\u7b97\u7ed3\u679c]\n    success: bool\n    error_log: str\n# class EnergyFlowGraph(BaseModel):\n#     \"\"\"\n#     \u7528\u4e8e\u4eff\u771f\u548c\u4f18\u5316\u8ba1\u7b97\u7684\u80fd\u6d41\u62d3\u6251\u56fe\uff0c\u4eff\u771f\u548c\u4f18\u5316\u6240\u9700\u8981\u7684\u53c2\u6570\u6a21\u578b\u548c\u53d8\u91cf\u5b9a\u4e49\u4f1a\u6709\u6240\u4e0d\u540c\u3002\n#     \"\"\"\n#     graph: Mapping = Field(\n#         title=\"\u80fd\u6d41\u62d3\u6251\u56fe\u7684\u9644\u52a0\u5c5e\u6027\",\n#         description=\"\u4eff\u771f\u548c\u4f18\u5316\u6240\u9700\u7684\u6a21\u578b\u53c2\u6570\u5b57\u5178\",\n#         examples=dict(\n#             \u5efa\u6a21\u4eff\u771f=dict(\n#                 summary=\"\u5efa\u6a21\u4eff\u771f\u6240\u9700\u53c2\u6570\",\n#                 description=\"\u5efa\u6a21\u4eff\u771f\u9700\u8981\u77e5\u9053\u4eff\u771f\u6b65\u957f\u548c\u8d77\u59cb\u65f6\u95f4\",\n#                 value={\n#                     \"\u6a21\u578b\u7c7b\u578b\": \"\u5efa\u6a21\u4eff\u771f\",\n#                     \"\u4eff\u771f\u6b65\u957f\": 60,\n#                     \"\u5f00\u59cb\u65f6\u95f4\": \"2023-3-1\",  # shall you parse this into `datetime.datetime`\n#                     \"\u7ed3\u675f\u65f6\u95f4\": \"2024-3-1\",\n#                 },\n#             ),\n#             \u89c4\u5212\u8bbe\u8ba1=dict(\n#                 summary=\"\u89c4\u5212\u8bbe\u8ba1\u6240\u9700\u53c2\u6570\",\n#                 description=\"\u89c4\u5212\u8bbe\u8ba1\u4e0d\u9700\u8981\u77e5\u9053\u4eff\u771f\u6b65\u957f\u548c\u8d77\u59cb\u65f6\u95f4,\u4f1a\u6839\u636e\u4e0d\u540c\u4f18\u5316\u6307\u6807\u4e8b\u5148\u5168\u90e8\u8ba1\u7b97\uff0c\u4e0d\u9700\u8981\u5728\u6b64\u6307\u51fa\","
        },
        {
            "comment": "The code defines a model for representing an AC network graph with nodes and edges. The nodes are of different types like load, device, and port. The nodes are represented as dictionaries with id and type. The edges represent connections between nodes in the graph. The to_graph method converts the model into a NetworkX graph object.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_datamodel_template.py\":110-140",
            "content": "#                 value={\"\u6a21\u578b\u7c7b\u578b\": \"\u89c4\u5212\u8bbe\u8ba1\"},\n#             ),\n#         ),\n#     )\n#     nodes: List[Mapping] = Field(\n#         title=\"\u8282\u70b9\",\n#         description=\"\u7531\u6240\u6709\u8282\u70b9ID\u548c\u5c5e\u6027\u5b57\u5178\u7ec4\u6210\u7684\u5217\u8868\",\n#         example=[\n#             {\"id\": \"a\", \"node_type\": \"load\"},\n#             {\"id\": \"b\", \"node_type\": \"device\"},\n#             {\"id\": \"c\", \"node_type\": \"load\"},\n#             {\"id\": \"d\", \"node_type\": \"port\", \"port_type\": \"AC\"},\n#             {\"id\": \"e\", \"node_type\": \"port\", \"port_type\": \"AC\"},\n#             {\"id\": \"f\", \"node_type\": \"port\", \"port_type\": \"AC\"},\n#         ],\n#     )\n#     adjacency: List[List[Mapping]] = Field(\n#         title=\"\u8fb9\",\n#         description=\"\u7531\u80fd\u6d41\u56fe\u4e2d\u8282\u70b9\u4e92\u76f8\u8fde\u63a5\u7684\u8fb9\u7ec4\u6210\u7684\u5217\u8868\",\n#         example=[\n#             [{\"id\": \"b\"}, {\"id\": \"d\"}],\n#             [{\"id\": \"a\"}, {\"id\": \"e\"}],\n#             [{\"id\": \"c\"}, {\"id\": \"f\"}],\n#             [{\"id\": \"d\"}, {\"id\": \"e\"}],\n#             [{\"id\", \"d\"}, {\"id\": \"f\"}],\n#         ],\n#     )\n#     def to_graph(self, directed=False) -> networkx.Graph:\n#         \"\"\"\n#         \u8f93\u51fa`networkx`\u8ba1\u7b97\u56fe"
        },
        {
            "comment": "The code defines a method that takes a graph and returns a NetworkX graph object, allowing for directed or undirected graphs. It also includes two model classes - CalculationAsyncSubmitResult for storing calculation IDs and submit result statuses and CalculationStateResult for storing calculation task states such as pending, received, started, success, failure, and retry.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_datamodel_template.py\":142-187",
            "content": "#         Arguments:\n#             directed (bool): \u662f\u5426\u8fd4\u56de\u6709\u5411\u56fe\n#         Returns:\n#             G (Graph): `networkx`\u8ba1\u7b97\u56fe\n#         \"\"\"\n#         graph: List[Tuple] = [(k, v) for k, v in self.graph.items()]\n#         graph_dict = dict(\n#             directed=directed,\n#             multigraph=False,\n#             graph=graph,\n#             nodes=self.nodes,\n#             adjacency=self.adjacency,\n#         )\n#         G = json_graph.adjacency_graph(graph_dict, directed=directed)\n#         return G\nclass CalculationAsyncSubmitResult(BaseModel):\n    \"\"\"\n    \u5f02\u6b65\u8ba1\u7b97\u63d0\u4ea4\u7ed3\u679c\u8fd4\u56de\u7c7b\n    \"\"\"\n    calculation_id: Union[None, str] = Field(\n        description=\"\u5982\u679c\u6210\u529f\u6ce8\u518c\u8ba1\u7b97\u4efb\u52a1\uff0c\u8fd4\u56deID\uff0c\u5426\u5219\u4e3a\u7a7a\", title=\"\u8ba1\u7b97ID\"\n    )\n    submit_result: Literal[\"success\", \"failed\"] = Field(\n        description='\u5982\u679c\u6210\u529f\u63d0\u4ea4\uff0c\u8fd4\u56de\"success\"\uff0c\u5426\u5219\u8fd4\u56de\"failed\"', title=\"\u63d0\u4ea4\u7ed3\u679c\"\n    )\nclass CalculationStateResult(BaseModel):\n    \"\"\"\n    \u5305\u542b\u8ba1\u7b97\u4efb\u52a1\u72b6\u6001\u7684\u6570\u636e\u7c7b\n    \"\"\"\n    calculation_state: Literal[\n        None,\n        \"PENDING\",\n        \"RECEIVED\",\n        \"STARTED\",\n        \"SUCCESS\",\n        \"FAILURE\",\n        \"RETRY\","
        },
        {
            "comment": "This code defines two classes: `CalculationAsyncResult` and `RevokeResult`, both extending from the `CalculationStateResult`. These classes represent the results of an asynchronous calculation task and a task revocation, respectively. The `calculation_result` field in `CalculationAsyncResult` can be either a null (no result) or a `CalculationResult` instance, while the `revoke_result` field in `RevokeResult` stores either \"success\" or \"failed\" strings representing the revocation status.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_datamodel_template.py\":188-212",
            "content": "        \"REVOKED\",\n        \"NOT_CREATED\",\n    ] = Field(description=\"Celery\u5185\u7f6e\u4efb\u52a1\u72b6\u6001\uff0c\u5982\u679c\u662fnull\u5219\u8868\u793a\u4e0d\u5b58\u5728\u8be5\u4efb\u52a1\", title=\"\u8ba1\u7b97\u4efb\u52a1\u72b6\u6001\")\n# would you transfer this thing over celery, or you need to build it?\n# i'd rather build it.\nclass CalculationAsyncResult(CalculationStateResult):\n    \"\"\"\n    \u5f02\u6b65\u8ba1\u7b97\u4efb\u52a1\u67e5\u8be2\u8fd4\u56de\u7ed3\u679c\n    \"\"\"\n    calculation_result: Union[None, CalculationResult] = Field(\n        description=\"\u5982\u679c\u6ca1\u6709\u8ba1\u7b97\u5b8c\u6216\u8005\u4e0d\u5b58\u5728\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\u8fd4\u56de\u8ba1\u7b97\u7ed3\u679c\u5b57\u5178\", title=\"\u8ba1\u7b97\u7ed3\u679c\"\n    )\nclass RevokeResult(CalculationStateResult):\n    \"\"\"\n    \u64a4\u9500\u8fd4\u56de\u7ed3\u679c\n    \"\"\"\n    revoke_result: Literal[\"success\", \"failed\"] = Field(\n        description='\u5982\u679c\u6210\u529f\u64a4\u9500\u4efb\u52a1\uff0c\u8fd4\u56de\"success\"\uff0c\u5426\u5219\u8fd4\u56de\"failed\"', title=\"\u64a4\u9500\u7ed3\u679c\"\n    )"
        }
    ]
}