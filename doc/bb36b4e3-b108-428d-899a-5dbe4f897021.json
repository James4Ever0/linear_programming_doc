{
    "summary": "This code simulates microgrid operations using photovoltaic systems and diesel generators, verifying topology through JSON files for comparison, checks constraints, and logs information.",
    "details": [
        {
            "comment": "Code imports necessary libraries and sets environment variables before defining a function called \"print_with_banner\" to print data with a banner. It then proceeds to define the algorithm parameters for some calculations. The code includes various comments specifying the lengths of different datasets, and a list 'a' is generated which seems to represent varying values such as wind speed, sunlight intensity, or temperature for 24 hours.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_topo_check.py\":0-47",
            "content": "import os\nos.environ[\"SKIP_ARGENV\"] = \"True\"\nos.environ[\"DOTENV\"] = \".test_topo_env\"\nfrom log_utils import logger_print\nMAKEFILE = dict(inputs=[\"topo_check.py\"], outputs=[\"check_topo\"], args=[])\nfrom config import *\n# ies_env.VAR_INIT_AS_ZERO = \"1\"\n# os.environ[\n#     \"PERCENT_WARNING_THRESHOLD\"\n# ] = \"1\"  # percent value less or equal than this value shal be warned\nimport json\nfrom topo_check import *\n# import rich\ndatalen = 24\n# datalen = 8760\n####################\n# build from code. #\n####################\n# FIXED: \u52a0\u6cd5\u5668\u6ca1\u6709\"output\"\ndef print_with_banner(data, banner: str):\n    logger_print()\n    logger_print(\"=\" * 40 + f\"[{banner}]\")\n    logger_print(data)\n    logger_print()\n# you may need pydantic here. verify then import to compute graph.\nfrom ies_optim import *\nfrom export_format_validate import *\n# import numpy as np\n# a = abs(np.random.random((24,))).tolist()\na = [100] * datalen  # this is not random.\n# a = abs(np.random.random((datalen,))).tolist()\n# algoParam = \u8ba1\u7b97\u53c2\u6570(\u8ba1\u7b97\u6b65\u957f=\"\u5c0f\u65f6\", \u5178\u578b\u65e5=False, \u8ba1\u7b97\u7c7b\u578b=\"\u4eff\u771f\u6a21\u62df\", \u98ce\u901f=a, \u5149\u7167=a, \u6c14\u6e29=a, \u5e74\u5229\u7387=0.1).dict()"
        },
        {
            "comment": "Computes economic parameters for a microgrid, creates a topology object with given parameters, defines device parameters for a photovoltaic system, adds two photovoltaic systems to the topology, and defines diesel generator information with gas emission values.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_topo_check.py\":48-99",
            "content": "algoParam = \u8ba1\u7b97\u53c2\u6570(\n    \u8ba1\u7b97\u76ee\u6807=\"\u7ecf\u6d4e\",\n    # \u8ba1\u7b97\u76ee\u6807=\"\u7ecf\u6d4e_\u73af\u4fdd\",\n    # \u8ba1\u7b97\u76ee\u6807=\"\u73af\u4fdd\",\n    \u8ba1\u7b97\u6b65\u957f=\"\u5c0f\u65f6\",\n    \u5178\u578b\u65e5\u4ee3\u8868\u7684\u65e5\u671f=[1],\n    # \u5178\u578b\u65e5\u4ee3\u8868\u7684\u65e5\u671f=[1, 2],\n    \u5178\u578b\u65e5=True,\n    # \u5178\u578b\u65e5=False,\n    \u8ba1\u7b97\u7c7b\u578b=\"\u8bbe\u8ba1\u89c4\u5212\",\n    \u98ce\u901f=a,\n    \u5149\u7167=a,\n    \u6c14\u6e29=a,\n    \u8d34\u73b0\u7387=0.1,\n    # \u5e74\u5229\u7387=0.1,\n).dict()\n# topo = \u62d3\u6251\u56fe()  # with structure?\ntopo = \u62d3\u6251\u56fe(**algoParam)  # with structure?\ndevParam = dict(\u751f\u4ea7\u5382\u5546=\"Any\", \u8bbe\u5907\u578b\u53f7=\"Any\", \u8bbe\u5907\u540d\u79f0=\"Any\")\nP1 = \u5149\u4f0f\u53d1\u7535\u4fe1\u606f(\n    **devParam,\n    Area=10,\n    # too low for percentage\n    PowerConversionEfficiency=90,\n    # PowerConversionEfficiency=0.9,\n    MaxPower=9,\n    PowerDeltaLimit=1,\n    CostPerKilowatt=100,\n    CostPerYearPerKilowatt=100,\n    VariationalCostPerWork=100,\n    Life=20,\n    BuildCostPerKilowatt=10,\n    BuildBaseCost=10,\n    MaxInstallArea=200,\n    MinInstallArea=100,\n    DeviceCount=100,\n).dict()\nPV1 = \u5149\u4f0f\u53d1\u7535(topo, param=P1)  # \u8fd9\u79cd\u662f\u589e\u52a0\u65b0\u7684\u5149\u4f0f\u53d1\u7535\nPV2 = \u5149\u4f0f\u53d1\u7535(topo, param=P1)\nDSS = \u67f4\u6cb9(\n    topo,\n    param=\u67f4\u6cb9\u4fe1\u606f(\n        \u8bbe\u5907\u540d\u79f0=\"Any\",\n        Price=(10, \"\u5143/L\"),\n        \u70ed\u503c=(10, \"MJ/L\"),\n        CO2=(gasEmission := (10, \"kg/L\")),\n        NOX=gasEmission,\n        SO2=gasEmission,"
        },
        {
            "comment": "This code defines various device parameters and creates instances of diesel generator, transformer, and transformer2 objects. It also performs certain operations on these instances to check the topology of a microgrid system.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_topo_check.py\":100-150",
            "content": "    ).dict(),\n    # param=\u67f4\u6cb9\u4fe1\u606f(\u8bbe\u5907\u540d\u79f0=\"Any\", Price=(10, \"L/\u5143\"), \u70ed\u503c=(10, \"MJ/L\"), CO2=(10, \"kg/L\")).dict(),\n)\np1 = \u67f4\u6cb9\u53d1\u7535\u4fe1\u606f(\n    **devParam,\n    RatedPower=21500,\n    PowerDeltaLimit=100,\n    PowerStartupLimit=3.5,\n    CostPerMachine=1,\n    CostPerYearPerMachine=1,\n    VariationalCostPerWork=1,\n    Life=20,\n    BuildCostPerMachine=10,\n    BuildBaseCost=10,\n    DieselToPower_Load=[[2, 10], [3, 50], [1, 100]],\n    DeviceCount=100,\n    MaxDeviceCount=200,\n    MinDeviceCount=100,\n).dict()\n# breakpoint()\nDS = \u67f4\u6cb9\u53d1\u7535(\n    topo,\n    param=p1,\n)\n# breakpoint()\nDEL1 = \u53d8\u6d41\u5668(\n    topo,\n    param=\u53d8\u6d41\u5668\u4fe1\u606f(\n        **devParam,\n        RatedPower=20000,\n        CostPerKilowatt=100,\n        CostPerYearPerKilowatt=100,\n        VariationalCostPerWork=100,\n        Life=20,\n        Efficiency=90,\n        BuildCostPerKilowatt=10,\n        BuildBaseCost=10,\n        DeviceCount=1000,\n        MaxDeviceCount=200,\n        MinDeviceCount=100,\n    ).dict(),\n)\nDEL2 = \u53d8\u538b\u5668(\n    topo,\n    param=\u53d8\u538b\u5668\u4fe1\u606f(\n        **devParam,\n        PowerParameter=0.9,\n        LoadRedundancyParameter=1.2,"
        },
        {
            "comment": "The code defines a microgrid device with parameters for RatedPower, CostPerKilowatt, CostPerYearPerKilowatt, VariationalCostPerWork, Life, Efficiency, BuildCostPerKilowatt, BuildBaseCost, DeviceCount, MaxDeviceCount, MinDeviceCount. It also defines a load component and a battery component with their respective parameters for the microgrid simulation.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_topo_check.py\":151-194",
            "content": "        RatedPower=20000,\n        CostPerKilowatt=100,\n        CostPerYearPerKilowatt=100,\n        VariationalCostPerWork=100,\n        Life=20,\n        Efficiency=90,\n        BuildCostPerKilowatt=10,\n        BuildBaseCost=10,\n        DeviceCount=1000,\n        MaxDeviceCount=200,\n        MinDeviceCount=100,\n    ).dict(),\n)\nLOAD = \u7535\u8d1f\u8377(\n    topo,\n    param=\u7535\u8d1f\u8377\u4fe1\u606f(\n        **devParam,\n        EnergyConsumption=[1] * len(a),\n        MaxEnergyConsumption=10,\n        PriceModel=\u5e38\u6570\u7535\u4ef7(Price=1),\n    ).dict(),\n)\nBAT = \u9502\u7535\u6c60(\n    topo,\n    param=\u9502\u7535\u6c60\u4fe1\u606f(\n        **devParam,\n        \u5faa\u73af\u8fb9\u754c\u6761\u4ef6=\"\u65e5\u95f4\u8fde\u63a5\",\n        RatedCapacity=200,\n        CostPerCapacity=100,\n        TotalCapacity=2000,\n        CostPerYearPerCapacity=100,\n        VariationalCostPerWork=100,\n        Life=200000,\n        BatteryDeltaLimit=0.1,\n        ChargeEfficiency=90,\n        DischargeEfficiency=90,\n        BuildCostPerCapacity=10,\n        BuildBaseCost=10,\n        InitSOC=4,\n        BatteryStorageDecay=10,\n        BatteryLife=9000,\n        LifetimeCycleCount=100000000,\n        # TotalDischargeCapacity=1000,"
        },
        {
            "comment": "The code is defining a graph topology for a microgrid system. It includes lines, buses (A1, A2, A3), a bi-directional converter (BC), a battery (BAT), diesel generator (DS), load (LOAD), and solar panels (PV1, PV2). The code specifies the connections between these components in the microgrid.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_topo_check.py\":195-240",
            "content": "        MaxSOC=99,\n        MinSOC=4,\n        MaxTotalCapacity=2000,\n        MinTotalCapacity=1000,\n    ).dict(),\n)\nA1 = \u6bcd\u7ebf(topo, \"\u53ef\u8fde\u63a5\u4f9b\u7535\u7aef\u6bcd\u7ebf\")\nA2 = \u6bcd\u7ebf(topo, \"\u53ef\u8fde\u63a5\u4f9b\u7535\u7aef\u6bcd\u7ebf\")\nA3 = \u6bcd\u7ebf(topo, \"\u53ef\u8fde\u63a5\u7535\u6bcd\u7ebf\")\nBC = \u53cc\u5411\u53d8\u6d41\u5668(\n    topo,\n    param=\u53cc\u5411\u53d8\u6d41\u5668\u4fe1\u606f(\n        **devParam,\n        RatedPower=10000,\n        Efficiency=90,\n        CostPerKilowatt=100,\n        CostPerYearPerKilowatt=100,\n        VariationalCostPerWork=100,\n        Life=100,\n        BuildCostPerKilowatt=100,\n        BuildBaseCost=100,\n        MaxDeviceCount=2000,\n        MinDeviceCount=1000,\n        DeviceCount=10000,\n    ).dict(),\n)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u7535\u50a8\u80fd\u7aef\u6bcd\u7ebf\", BC.\u50a8\u80fd\u7aef, BAT.\u7535\u63a5\u53e3)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u67f4\u6cb9\u6bcd\u7ebf\", DS.\u71c3\u6599\u63a5\u53e3, DSS.\u71c3\u6599\u63a5\u53e3)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u7535\u6bcd\u7ebf\u8f93\u5165\u8f93\u51fa\", BC.\u7ebf\u8def\u7aef, A3.id)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u7535\u6bcd\u7ebf\u8f93\u5165\", DEL1.\u7535\u8f93\u51fa, A3.id)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u7535\u6bcd\u7ebf\u8f93\u51fa\", A3.id, DEL2.\u7535\u8f93\u5165)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u8d1f\u8377\u7535\u6bcd\u7ebf\", DEL2.\u7535\u8f93\u51fa, LOAD.\u7535\u63a5\u53e3)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u4f9b\u7535\u7aef\u6bcd\u7ebf\u8f93\u5165\", A1.id, PV1.\u7535\u63a5\u53e3)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u4f9b\u7535\u7aef\u6bcd\u7ebf\u8f93\u5165\", A2.id, PV2.\u7535\u63a5\u53e3)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u4f9b\u7535\u7aef\u6bcd\u7ebf\u8f93\u5165\", A2.id, DS.\u7535\u63a5\u53e3)\n\u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u4f9b\u7535\u7aef\u6bcd\u7ebf\u8f93\u51fa\", A2.id, DEL1.\u7535\u8f93\u5165)\n\u5408\u5e76\u7ebf(topo, \"\u53ef\u5408\u5e76\u4f9b\u7535\u7aef\u6bcd\u7ebf\", A1.id, A2.id)\n# L1 = \u6bcd\u7ebf(graph)"
        },
        {
            "comment": "Code walks over all connections in the graph and checks for consistency. It retrieves devices, adders, and converts the topology to a JSON format for further use.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_topo_check.py\":242-284",
            "content": "# # walk over all connections.\n# conn = \u8fde\u63a5\u7ebf(graph, PV.ports[\"\u7535\u63a5\u53e3\"], LOAD.ports[\"\u7535\u63a5\u53e3\"])\n# conn_merge = \u5408\u5e76\u7ebf(L0, L1)  # what do you do?\ntopo.check_consistency()\n# shall raise error.\n# methods for computing.\ndevs = topo.get_all_devices()\nprint_with_banner(devs, \"\u8bbe\u5907\")\n# {\n#     'type': '\u8bbe\u5907',\n#     'subtype': '\u53cc\u5411\u53d8\u6d41\u5668',\n#     'ports': {\n#         '\u7ebf\u8def\u7aef': {'subtype': '\u53cc\u5411\u53d8\u6d41\u5668\u7ebf\u8def\u7aef\u8f93\u5165\u8f93\u51fa', 'id': 18},\n#         '\u50a8\u80fd\u7aef': {'subtype': '\u53cc\u5411\u53d8\u6d41\u5668\u50a8\u80fd\u7aef\u8f93\u5165\u8f93\u51fa', 'id': 19}\n#     }\n# }\n# device, ports, device_data\nadders = topo.get_all_adders()\nprint_with_banner(adders, \"\u52a0\u6cd5\u5668\")\n# input, output, io\n# {\n#     16: {'input': [6], 'output': [9], 'IO': [18]},\n#     14: {'input': [1, 3], 'output': [5], 'IO': []},\n#     -1: {'input': [], 'output': [], 'IO': [19, 13]},\n#     -2: {'input': [8], 'output': [11], 'IO': []}\n# }\n###############\n# dump to dict\n###############\nmdict = topo.to_json()\nmdictList = [mdict]  # \u4f20\u5165API\u7684\u8ba1\u7b97\u53c2\u6570\nprint_with_banner(mdict, \"\u56fe\u5e8f\u5217\u5316\")\nwith open(\"template_input.json\", \"w+\") as f:\n    f.write(json.dumps(mdictList, ensure_ascii=False, indent=4))"
        },
        {
            "comment": "Loading from dictionary, parsing test, copying mDictList to override default residualEquipmentLife. If flag is \"-f\" or \"--full\", calculate energy flow graph using `calculate_energyflow_graph_base` and store result in \"test_output_full.json\". If flag is \"-p\" or \"--partial\", use `solveModelFromCalcParamList` after modifying mDictList and then dump the modified list.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_topo_check.py\":286-320",
            "content": "###############\n# load from dict\n###############\nimport sys\nflag = sys.argv[-1]\nfrom fastapi_celery_functions import calculate_energyflow_graph_base\n# TODO: add test of celery app\nfrom fastapi_datamodel_template import EnergyFlowGraph\n### TEST PARSING ###\n# from filediff.diff import file_diff_compare\nfrom copy import deepcopy\nimport os\n# breakpoint()  # error while reloading params\nEFG = EnergyFlowGraph(\n    mDictList=deepcopy(mdictList), residualEquipmentLife=2\n)  # override default.\nif flag in [\"-f\", \"--full\"]:  # been replaced by celery full test.\n    ret = calculate_energyflow_graph_base(EFG.dict())\n    logger_print(ret)\n    if ret:\n        with open(saved_path := \"test_output_full.json\", \"w+\") as f:\n            f.write(json.dumps(ret, ensure_ascii=False, indent=4))\n        logger_print(f\"dumped to: {saved_path}\")\n# if True: # override to debug.\nelif flag in [\"-p\", \"--partial\"]:\n    from solve_model import solveModelFromCalcParamList, mDictListToCalcParamList\n    mdictList2 = EFG.dict()[\"mDictList\"]\n    # text1 = json.dumps(mdictList[0]['nodes'], indent=4, ensure_ascii=False)"
        },
        {
            "comment": "This code compares two JSON files and writes the differences into a third file. It then calculates the result from the second JSON file, logs it, and saves the result in a fourth JSON file if it's not empty.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_topo_check.py\":321-351",
            "content": "    # text2 = json.dumps(mdictList2[0]['nodes'], indent=4, ensure_ascii=False)\n    # with open(\"input_1.json\", 'w+') as f:\n    #     f.write(text1)\n    # with open(\"input_2.json\", 'w+') as f:\n    #     f.write(text2)\n    # # file_diff_compare(f1, f2, \"diff_result.html\")\n    # # exit()\n    # import difflib\n    # max_width=150\n    # diff_out = \"diff_result.html\"\n    # numlines=0\n    # show_all=False\n    # logger_print(\"WRITE DIFF TO:\",diff_out)\n    # d = difflib.HtmlDiff(wrapcolumn=max_width)\n    # with open(diff_out, 'w', encoding=\"u8\") as f:\n    #     f.write(d.make_file(text1, text2, context=not show_all, numlines=numlines))\n    # exit()\n    ### YOU MAY WANT TO DIFF IT ###\n    calcParamList = mDictListToCalcParamList(mdictList2)\n    resultList = solveModelFromCalcParamList(calcParamList)\n    logger_print(resultList)\n    logger_print(\"RESULT:\", resultList)\n    if resultList:\n        with open(saved_path := \"test_output_partial.json\", \"w+\") as f:\n            f.write(\n                json.dumps(resultList, ensure_ascii=False, indent=4).replace("
        },
        {
            "comment": "The code is checking the topology of a microgrid and dumping data to a file. It raises an exception if invalid command line arguments are given, and logs information about infeasible constraints in the system. The constraints have been transformed by Pyomo, making it difficult to retrieve their original form.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_topo_check.py\":352-362",
            "content": "                    \"NaN\", \"nan\"\n                )\n            )\n        logger_print(f\"dumped to: {saved_path}\")\nelif os.path.basename(flag) != os.path.basename(__file__):\n    raise Exception(f\"Invalid command line arguments: {sys.argv}\")\n# may you get infeasible constraints on some row.\n# Row 'c_e_x1988826_' infeasible, all entries at implied bounds.\n# but this row has been transformed by pyomo, which is hard to retrieve."
        }
    ]
}