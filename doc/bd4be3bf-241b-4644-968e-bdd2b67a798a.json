{
    "summary": "Code snippet shows the method of converting a model to MPS or LP format using either Pyomo or CPLEX. It reads an input file, creates a new model using the specified method (Pyomo in this case), and exports it as MPS for analysis. If the method is \"docplex\", it uses Docplex's ModelReader to read the LP file and export it as MPS. However, if the method is \"pyomo\", it uses Pyomo's environment to create a new model, sets its bounds and objective sense, and exports it as MPS for analysis.",
    "details": [
        {
            "comment": "Code snippet shows the method of converting a model to MPS or LP format using either Pyomo or CPLEX. It reads an input file, creates a new model using the specified method (Pyomo in this case), and exports it as MPS for analysis. If the method is \"docplex\", it uses Docplex's ModelReader to read the LP file and export it as MPS. However, if the method is \"pyomo\", it uses Pyomo's environment to create a new model, sets its bounds and objective sense, and exports it as MPS for analysis.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/cplex_abnormal_exit_condition_debug/lp_to_mps.py\":0-27",
            "content": "# either pyomo model to mps or lp to mps (cplex)\n# method = \"docplex\"\nmethod = \"pyomo\"\nprint(\"using method:\", method)\ntemp_input_file_name = \"E:\\\\works\\\\jubilant-adventure2\\\\microgrid_base\\\\logs\\\\pyomo_2023_08_08_17_15_44_141633+08_00\\\\model.lp\"\nif method == \"docplex\":\n    from docplex.mp.model import Model\n    from docplex.mp.model_reader import ModelReader\n    mdl:Model = ModelReader.read(temp_input_file_name, model_name=\"InfeasibleLP\")\n    mdl.export_as_mps(\"converted.mps\") # required for lp-analysis\nelif method ==\"pyomo\":\n    from pyomo.environ import *\n    model = ConcreteModel()\n    # model.load(\"converted.mps\")\n    # lp & mps unsupported.\n    # print(dir(model))\n    model.x = Var(bounds=(-1,1))\n    model.obj = Objective(expr=model.x, sense=minimize)\n    model.write(\"exported.mps\", 'mps') # working!\nelse:\n    raise Exception(\"Unknown mps export method: %s\" % method)"
        }
    ]
}