{
    "summary": "This code snippet uses BeautifulSoup to parse and manipulate HTML. It identifies specific elements, applies JavaScript and CSS highlighting, and saves the updated HTML document. This is part of a web scraping process.",
    "details": [
        {
            "comment": "The code reads an input HTML file, applies highlighting to specific line ranges using JavaScript and CSS, and then writes the modified HTML output. It uses BeautifulSoup for parsing and manipulation. The code identifies elements with specific IDs in the given range, wraps them with JavaScript and CSS tags, and updates a dictionary of elements to wrap.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/chatgpt_convert_latex_to_python/highlight_html.py\":0-42",
            "content": "input_file = \"test_code.html\"\noutput_path = \"test_code_highlight.html\"\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(open(input_file, \"r\").read())\n# line_range = range(10, 20 + 1)\n# import rich\n# insert into head\ncss = open('highlight_line.css', 'r').read()\njs = open('highlight_line.js', 'r').read()\ncss_tag = soup.new_tag('style', type=\"text/css\")\ncss_tag.append(css)\njs_tag = soup.new_tag('script')\njs_tag.append(js)\nhead = soup.find('head')\nhead.append(js_tag)\nhead.append(css_tag)\nelements_to_wrap = {}\nfor a in soup.find_all(\"a\"):\n    # print(a)\n    a_id = a.attrs[\"id\"]\n    id_no = int(a_id.split(\"-\")[-1])\n    elements_to_wrap[id_no] = []\n    # if id_no not in line_range:\n    print(\"changing line:\", id_no)\n    elements_to_wrap[id_no].append(a)\n    for elem in a.next_siblings:\n        # print(elem, elem.name)\n        if elem.name == \"a\":\n            # if elem.name !='span':\n            break\n        else:\n            elements_to_wrap[id_no].append(elem)\n    # span = a.next_sibling()\n    # print(span)\n    # print(dir(a))"
        },
        {
            "comment": "This code snippet is part of a web scraping process. It searches for specific HTML elements, wraps them in new \"div\" tags, and appends the modified elements back to the original HTML document. The updated HTML document is then saved in a file.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/chatgpt_convert_latex_to_python/highlight_html.py\":43-71",
            "content": "    # find next sibling of \"span\".\npre = soup.find('pre')\nfor key, elems in elements_to_wrap.items():\n    div = soup.new_tag('div',id=f'div-line-{key}')\n    for elem in elems:\n        # print(elem)\n        elem.extract()\n        div.append(elem)\n    pre.append(div)\n        #\n        # # Find the tag you wish to append to.\n        # original_tag = content.find(\"body\")\n        #\n        # # Create & append new tags.\n        # new_tag = content.new_tag(\"button\",\n        #\n        #\n        # class =\"accordion\")\n        # original_tag.append(new_tag)\n        #\n        # new_tag = content.new_tag(\"div\", class =\"panel\")\n        # original_tag.append(new_tag)\n        #\n        # new_tag = content.new_tag(\"p\")\n        # original_tag.append(new_tag)\nwith open(output_path, \"w+\") as f:\n    f.write(str(soup))"
        }
    ]
}