{
    "summary": "The code defines a pendulum model, creates an ODE problem with external torque, solves it using solve() and calculates angular deflections and velocities.",
    "details": [
        {
            "comment": "This code defines a pendulum model using the DifferentialEquations package. It creates an ODE problem to simulate the motion of a pendulum with an external torque function M(t). The initial angular deflection and velocity, length, mass, and gravitational acceleration are specified. The solve() function is used to find the solution to the ODE problem over the given time interval. The code could be visualized using Plots package but it's currently commented out.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/pendulum.jl\":0-31",
            "content": "# create single pendulum model\nusing DifferentialEquations\n# using Plots\nl = 1.0                             # length [m]\nm = 1.0                             # mass [kg]\ng = 9.81                            # gravitational acceleration [m/s\u00b2]\n# (state_derivatives, states, external_control_function, time)\nfunction pendulum!(du,u,p,t)\n    du[1] = u[2]                    # \u03b8'(t) = \u03c9(t)\n    du[2] = -3g/(2l)*sin(u[1]) + 3/(m*l^2)*p(t) # \u03c9'(t) = -3g/(2l) sin \u03b8(t) + 3/(ml^2)M(t)\nend\n\u03b8\u2080 = 0.01                           # initial angular deflection [rad]\n\u03c9\u2080 = 0.0                            # initial angular velocity [rad/s]\nu\u2080 = [\u03b8\u2080, \u03c9\u2080]                       # initial state vector\ntspan = (0.0,10.0)                  # time interval\nM = t->0.1sin(t)                    # external torque [Nm], function\n# (ode_function, initial_states, timespan, )\nprob = ODEProblem(pendulum!,u\u2080,tspan,M)\nsol = solve(prob)\n# Plots.gr()\n# Plots.PyPlotBackend()\n# Plots.plot(sol,linewidth=2,xaxis=\"t\",label=[\"\u03b8 [rad]\" \"\u03c9 [rad/s]\"],layout=(2,1))"
        },
        {
            "comment": "This code is calculating the angular deflections and velocities of a pendulum system. It first prints the array u, then stores the solution's u values in states, rearranges them using permutedims and vcat, assigns the 1st column to angular_deflections and the 2nd column to angular_velocities.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/pendulum.jl\":33-38",
            "content": "# println(u)\nstates = sol.u\nstates_matrix = mapreduce(permutedims, vcat,states)\nangular_deflections = states_matrix[:,1]\nangular_velocities = states_matrix[:,2]"
        }
    ]
}