{
    "summary": "The code sets up a Celery application for a microgrid system, includes exception handling and timezone configuration, defines task functions, and sets worker configurations. However, the log file \"celery.log\" is not working properly.",
    "details": [
        {
            "comment": "This code sets up a Celery application for a microgrid system, using AMQP broker and Redis backend. It also includes custom exception handling and timezone configuration. However, the log file \"celery.log\" does not seem to be working properly.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_celery_server.py\":0-41",
            "content": "from log_utils import logger_print\nfrom log_utils import (\n    makeRotatingFileHandler,\n    celery_log_filename,\n    timezone_str,\n    logger_traceback,\n)\nfrom celery import Celery\nfrom passwords import redis_password\nfrom typing import Union\n# BUG: no log written into \"celery.log\"\nMAIN_NAME = \"fastapi_celery\"\napp = Celery(\n    MAIN_NAME,\n    broker=\"amqp://guest@localhost:5672//\",\n    backend=f\"redis://:{redis_password}@localhost:6380\",\n    # backend=f\"redis://:{redis_password}@localhost:6379\",\n)\n# override format exception logic. (seems not working at all!)\n# ref: https://poe.com/s/PV9zAO91vGQjHJuZ4toR (GPT4)\nimport better_exceptions\nimport sys\nfrom celery.utils.log import ColorFormatter  # type: ignore\napp.conf.update(CELERY_TIMEZONE=timezone_str, CELERY_ENABLE_UTC=False)\n# class CustomFormatter(logging.Formatter):\nclass CustomFormatter(ColorFormatter):\n    def formatException(self, exc_info):\n        \"\"\"\n        Format the exception information and return the formatted string.\n        Parameters:\n            exc_info (tuple): The exception information tuple."
        },
        {
            "comment": "Function to format exception messages, sets up custom logger for Celery with rotating file handler and formatter, imports necessary modules and defines a task function using FastAPI's celery functions.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_celery_server.py\":43-77",
            "content": "        Returns:\n            str: The formatted exception string.\n        \"\"\"\n        if exc_info and not isinstance(exc_info, tuple):\n            exc_info = sys.exc_info()  # copied from `ColorFormatter.formatException`\n        lines = better_exceptions.format_exception(*exc_info)\n        return \"\".join(lines)\ncustom_formatter = CustomFormatter()\nimport logging\ncelery_logger = app.log.get_default_logger()\ncelery_logger.addHandler(\n    makeRotatingFileHandler(celery_log_filename, level=logging.NOTSET)\n)\nfor handler in celery_logger.handlers:\n    handler.setFormatter(custom_formatter)\n# you'd better import models from other datamodel only file\n# you had not to pass anything like pydantic data model as parameter.\n# from microgrid_base.ies_optim import EnergyFlowGraph\n# from celery.exceptions import Ignore\nfrom fastapi_celery_functions import calculate_energyflow_graph_base\nfrom config import ies_env\nfrom mock_utils import generate_fake_output_data, EnergyFlowGraph\nfrom mock_utils import mock_output_data\n@app.task()"
        },
        {
            "comment": "This code defines a task function `calculate_energyflow_graph` that takes a dictionary as input and returns either the calculated result or a mock data depending on the environment. It also includes a helper function `generate_fake_data_based_on_input` for generating mock data based on the input dictionary. The code sets up Celery worker configuration to track task start, send task events, and limits the number of concurrent tasks to 3.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_celery_server.py\":78-108",
            "content": "# @app.task(bind=True)  # parse it elsewhere.\ndef calculate_energyflow_graph(energyflow_graph: dict) -> Union[None, dict]:\n    if ies_env.GENERATED_MOCK:\n        ret = generate_fake_data_based_on_input(energyflow_graph)\n    else:\n        try:\n            ret = calculate_energyflow_graph_base(energyflow_graph)\n        except Exception as exc:\n            if ies_env.FAILSAFE:\n                logger_traceback()\n                try:\n                    ret = generate_fake_data_based_on_input(energyflow_graph)\n                except:\n                    logger_traceback()\n                    ret = mock_output_data.copy()\n            else:\n                raise exc\n    return ret\ndef generate_fake_data_based_on_input(energyflow_graph):\n    input_data = EnergyFlowGraph.parse_obj(energyflow_graph)\n    fake_output_data = generate_fake_output_data(input_data)\n    ret = fake_output_data.dict()\n    return ret\napp.conf.update(task_track_started=True)\napp.conf.update(worker_send_task_events=True)\nconcurrent_tasks = 3\napp.conf.update(worker_concurrency=concurrent_tasks)"
        },
        {
            "comment": "This code sets the maximum memory and execution time limits for Celery workers. The `memory_limit` variable is set to 20GB, while the `time_limit` variable is set to 25 minutes. If the code is run directly (not imported), it starts a Celery worker process with these limitations.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_celery_server.py\":110-119",
            "content": "memory_limit = 20_000_000  # kB -> 20GB\napp.conf.update(worker_max_memory_per_child=memory_limit)\ntime_limit = 60 * 25  # sec, 25 minutes.\napp.conf.update(worker_time_limit=time_limit)\n# limits on ram usage, concurrency, execution time\nif __name__ == \"__main__\":\n    worker = app.Worker()\n    worker.start()  # type:ignore"
        }
    ]
}