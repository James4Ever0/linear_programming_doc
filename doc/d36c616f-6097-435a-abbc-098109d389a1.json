{
    "summary": "The code sets up a FastAPI server with Celery for task management in an IES system simulation and optimization service, allowing asynchronous task submission, cancellation, and state retrieval.",
    "details": [
        {
            "comment": "This code sets up a FastAPI server for an IES system simulation and optimization service, using Celery for task management. The server listens on port 9870 at address 0.0.0.0. It provides both async and sync APIs with descriptions available in the openapi.json file or through the API documentation link. The code also imports necessary modules and defines input structures for handling calculations and energy flow graphs, as well as setting up a Celery app instance.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_template.py\":0-42",
            "content": "# suggestion: use fastapi for self-documented server, use celery for task management.\n# celery reference: https://github.com/GregaVrbancic/fastapi-celery/blob/master/app/main.py\nport = 9870\nhost = \"0.0.0.0\"\nimport traceback\nimport celery\nappName = \"IES Optim Server Template\"\nversion = \"0.0.1\"\ntags_metadata = [\n    {\"name\": \"async\", \"description\": \"\u5f02\u6b65\u63a5\u53e3\uff0c\u8c03\u7528\u540e\u7acb\u5373\u8fd4\u56de\"},\n    {\"name\": \"sync\", \"description\": \"\u540c\u6b65\u63a5\u53e3\uff0c\u8c03\u7528\u540e\u9700\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u624d\u8fd4\u56de\"},\n]\ndescription = f\"\"\"\nIES\u7cfb\u7edf\u4eff\u771f\u548c\u4f18\u5316\u7b97\u6cd5\u670d\u52a1\u5668\nOpenAPI\u63cf\u8ff0\u6587\u4ef6(\u53ef\u5bfc\u5165Apifox): https://{host}:{port}/openapi.json\nAPI\u6587\u6863: https://{host}:{port}/docs\n\"\"\"\nimport traceback\nfrom fastapi import FastAPI\nfrom fastapi_datamodel_template import (\n    CalculationAsyncResult,\n    CalculationAsyncSubmitResult,\n    CalculationResult,\n    EnergyFlowGraph,\n    RevokeResult,\n    CalculationStateResult,\n)\n# define the input structure here.\nfrom pydantic import BaseModel\nfrom typing import List  # , Union , Literal, Dict\n# solved or not?\nimport datetime\nfrom celery.result import AsyncResult\nfrom typing import Dict, Any, Union\nfrom fastapi_celery_server import app as celery_app"
        },
        {
            "comment": "This code defines functions for removing stale tasks after 24 hours without updates. It includes a dictionary for task IDs and their associated objects, update times, and results. The `remove_stale_tasks` function iterates through the dictionaries to identify stale tasks based on the difference between the current time and their last update. It then removes those stale tasks from the dictionaries. The `remove_stale_tasks_decorator` function is a decorator that calls `remove_stale_tasks` before executing any decorated function, ensuring stale tasks are cleaned up before running tasks.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_template.py\":44-87",
            "content": "# remember these things won't persist.\n# remove any task without any update for 24 hours.\n# celery has the default of 24 hours. you handle it again here.\n# also has default task time of 1200 seconds. you may experiment.\ntaskDict: Dict[str, AsyncResult] = {}\n\"\"\"\n\u4efb\u52a1ID\u548c\u4efb\u52a1\u5bf9\u8c61\u7684\u5b57\u5178\n\"\"\"\ntaskInfo: Dict[str, datetime.datetime] = {}\n\"\"\"\n\u4efb\u52a1ID\u548c\u4efb\u52a1\u6700\u8fd1\u66f4\u65b0\u65f6\u95f4\u7684\u5b57\u5178\n\"\"\"\ntaskResult: Dict[str, Any] = {}\n\"\"\"\n\u4efb\u52a1ID\u548c\u4efb\u52a1\u7ed3\u679c\u7684\u5b57\u5178\n\"\"\"\ndef remove_stale_tasks():\n    \"\"\"\n    \u904d\u5386\u5e76\u6e05\u966424\u5c0f\u65f6\u672a\u66f4\u65b0\u7684\u4efb\u52a1\n    \"\"\"\n    now = datetime.datetime.now()\n    remove_keys = []\n    for key, value in taskInfo.items():\n        if (now - value).total_seconds() > 3600 * 24:\n            remove_keys.append(key)\n    for key in remove_keys:\n        if key in taskDict.keys():\n            del taskDict[key]\n        if key in taskInfo.keys():\n            del taskInfo[key]\n        if key in taskResult.keys():\n            del taskResult[key]\ndef remove_stale_tasks_decorator(function):\n    \"\"\"\n    \u6e05\u9664\u8fc7\u671f\u4efb\u52a1\u88c5\u9970\u5668\n    \"\"\"\n    def inner_function(*args, **kwargs):\n        remove_stale_tasks()\n        return function(*args, **kwargs)"
        },
        {
            "comment": "The code defines a callback function called `celery_on_message` which is triggered when a Celery task status changes. The function receives a dictionary `body` containing the updated task information. The task ID and status are extracted from the body, and the timestamp of the message is stored in a `taskInfo` dictionary. Additionally, there's another function called `background_on_message` that retrieves the result of a background task using the `get()` method with the specified callback and propagation settings.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_template.py\":89-125",
            "content": "    return inner_function\ndef celery_on_message(body: dict):\n    \"\"\"\n    Celery\u4efb\u52a1\u4fe1\u606f\u66f4\u65b0\u56de\u8c03\u51fd\u6570\n    Args:\n        body (dict): \u66f4\u65b0\u7684\u4efb\u52a1\u4fe1\u606f\n    \"\"\"\n    print(\"BODY TYPE?\", type(body))\n    print(\"ON MESSAGE?\", body)\n    task_id = body[\"task_id\"]\n    status = body[\"status\"]\n    print(\"TASK STATUS?\", status)\n    taskInfo[task_id] = datetime.datetime.now()\n    ###\n    # BODY TYPE? <class 'dict'>\n    # ON MESSAGE? {'status': 'STARTED', 'result': {'pid': 74297, 'hostname': 'celery@MacBook-Air-M1.local'}, 'traceback': None, 'children': [], 'date_done': None, 'task_id': 'c7a5a013-36aa-4242-842a-46fb3bb8e9fa'}\n    ###\n    # BODY TYPE? <class 'dict'>\n    # ON MESSAGE? {'status': 'SUCCESS', 'result': '14', 'traceback': None, 'children': [], 'date_done': '2023-03-28T09:26:50.382791', 'task_id': 'c7a5a013-36aa-4242-842a-46fb3bb8e9fa'}\ndef background_on_message(task: AsyncResult):\n    \"\"\"\n    \u540e\u53f0\u83b7\u53d6\u4efb\u52a1\u8ba1\u7b97\u7ed3\u679c\u7684\u65b9\u6cd5\n    Args:\n        task (AsyncResult): \u4efb\u52a1\u5bf9\u8c61\n    \"\"\"\n    value = task.get(on_message=celery_on_message, propagate=False)\n    # shall you not check here."
        },
        {
            "comment": "This code defines a FastAPI server that accepts an EnergyFlowGraph and submits it for asynchronous calculation. It uses Celery to handle the task submission and returns the calculation ID if successful, or a \"failed\" status if no resources are available. The ORJSONResponse class is used for JSON responses with the \"application/json\" media type.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_template.py\":126-167",
            "content": "    # and not the message callback.\n    # status = task.status\n    # print(\"TASK STATUS?\", status)\n    taskResult[task.id] = value\n    print(\"VALUE TYPE?\", type(value))  # str, '14'\n    print(\"TASK VALUE?\", value)\nfrom typing import Any\nimport orjson\nfrom starlette.responses import JSONResponse\nclass ORJSONResponse(JSONResponse):\n    media_type = \"application/json\"\n    def render(self, content: Any) -> bytes:\n        return orjson.dumps(content)\napp = FastAPI(\n    description=description,\n    version=version,\n    tags_metadata=tags_metadata,\n    default_response_class=ORJSONResponse,\n)\n@remove_stale_tasks_decorator\n@app.post(\n    \"/calculate_async\",\n    tags=[\"async\"],\n    description=\"\u586b\u5199\u6570\u636e\u5e76\u63d0\u4ea4\u62d3\u6251\u56fe\uff0c\u5982\u679c\u8fd8\u6709\u8ba1\u7b97\u8d44\u6e90\uff0c\u63d0\u4ea4\u72b6\u6001\u4e3a\u6210\u529f\uff0c\u8fd4\u56de\u8ba1\u7b97ID\uff0c\u5426\u5219\u4e0d\u8fd4\u56de\u8ba1\u7b97ID\uff0c\u63d0\u4ea4\u72b6\u6001\u4e3a\u5931\u8d25\",\n    summary=\"\u5f02\u6b65\u63d0\u4ea4\u80fd\u6d41\u62d3\u6251\u56fe\",\n    response_description=\"\u63d0\u4ea4\u72b6\u6001\u4ee5\u53ca\u6a21\u578b\u8ba1\u7b97ID,\u6839\u636eID\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c\",\n    response_model=CalculationAsyncSubmitResult,\n)\ndef calculate_async(graph: EnergyFlowGraph) -> CalculationAsyncSubmitResult:\n    # use celery\n    submit_result = \"failed\"\n    calculation_id = None\n    try:"
        },
        {
            "comment": "This code snippet is part of a FastAPI server template for an asynchronous calculation submission. It defines two functions: `CalculationAsyncSubmitResult` and `get_calculation_state`. The first function handles the async task submission by sending a Celery task, storing relevant information about the task, and returning a result object with the task ID. The second function retrieves the current state of an asynchronous calculation based on its ID and returns it in the form of a `CalculationStateResult` object.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_template.py\":168-203",
            "content": "        function_id = \"fastapi_celery.calculate_energyflow_graph\"\n        task = celery_app.send_task(function_id, args=(graph.dict(),))\n        taskInfo[task.id] = datetime.datetime.now()\n        taskDict[task.id] = task\n        calculation_id = task.id\n    except:\n        traceback.print_exc()\n    submit_result = \"success\"\n    return CalculationAsyncSubmitResult(\n        calculation_id=calculation_id, submit_result=submit_result\n    )\n@remove_stale_tasks_decorator\n@app.get(\n    \"/get_calculation_state\",\n    tags=[\"async\"],\n    response_model=CalculationStateResult,\n    response_description=\"Celery\u5185\u7f6e\u4efb\u52a1\u72b6\u6001\uff0c\u5982\u679c\u662fnull\u5219\u8868\u793a\u4e0d\u5b58\u5728\u8be5\u4efb\u52a1\",\n    summary=\"\u83b7\u53d6\u8ba1\u7b97\u72b6\u6001\",\n    description=\"\u6839\u636e\u8ba1\u7b97ID\u83b7\u53d6\u8ba1\u7b97\u72b6\u6001\",\n)\ndef get_calculation_state(calculation_id: str) -> CalculationStateResult:\n    \"\"\"\n    \u6839\u636e\u8ba1\u7b97ID\u83b7\u53d6\u8ba1\u7b97\u72b6\u6001\n    Args:\n        calculation_id (str): \u8ba1\u7b97ID\n    Returns:\n        calculation_state (CalculationStateResult): \u8ba1\u7b97\u72b6\u6001\n    \"\"\"\n    calculation_state = None\n    task = taskDict.get(calculation_id, None)\n    if task is not None:\n        calculation_state = task.state"
        },
        {
            "comment": "This code defines two routes for a FastAPI server. The first route, \"/get_calculation_result_async\", returns the calculation state and result if the calculation is complete, or empty data otherwise. It requires a calculation ID as input. The second route, \"/revoke_calculation\", cancels a calculation with the given ID and returns a revocation status. Both routes are decorated with @remove_stale_tasks_decorator and belong to the \"async\" tags.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_template.py\":204-236",
            "content": "        return CalculationStateResult(calculation_state=calculation_state)\n    else:\n        return CalculationStateResult(calculation_state=\"NOT_CREATED\")\n@remove_stale_tasks_decorator\n@app.get(\n    \"/get_calculation_result_async\",\n    tags=[\"async\"],\n    description=\"\u63d0\u4ea4\u8ba1\u7b97ID\uff0c\u8fd4\u56de\u8ba1\u7b97\u72b6\u6001\uff0c\u5982\u679c\u8ba1\u7b97\u5b8c\u6bd5\u4f1a\u4e00\u8d77\u8fd4\u56de\u6570\u636e\uff0c\u5426\u5219\u6570\u636e\u4e3a\u7a7a\",\n    summary=\"\u5f02\u6b65\u83b7\u53d6\u80fd\u6d41\u62d3\u6251\u8ba1\u7b97\u7ed3\u679c\",\n    response_description=\"\u8ba1\u7b97\u72b6\u6001\u548c\u8ba1\u7b97\u7ed3\u679c\",\n    response_model=CalculationAsyncResult,\n)\ndef get_calculation_result_async(calculation_id: str):\n    calculation_result = taskResult.get(calculation_id, None)\n    calculation_result = CalculationResult.parse_obj(calculation_result)\n    return CalculationAsyncResult(\n        calculation_state=get_calculation_state(calculation_id).calculation_state,\n        calculation_result=calculation_result,\n    )\n@remove_stale_tasks_decorator\n@app.get(\n    \"/revoke_calculation\",\n    tags=[\"async\"],\n    description=\"\u63d0\u4ea4\u8ba1\u7b97ID\uff0c\u64a4\u9500\u8ba1\u7b97\",\n    summary=\"\u64a4\u9500\u8ba1\u7b97\u4efb\u52a1\",\n    response_description=\"\u8fd4\u56de\u64a4\u9500\u8ba1\u7b97\u72b6\u6001\",\n    response_model=RevokeResult,\n    # different code and different response models."
        },
        {
            "comment": "This code defines a function `revoke_calculation` that handles task revocation. If the specified calculation ID exists, it terminates the task and returns a success result. Otherwise, it returns a \"NOT_CREATED\" state. The API endpoint \"/get_calculation_ids\" returns a list of cacheable calculation IDs.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_template.py\":237-265",
            "content": "    # so you would return in different models and the api will handle the code.\n    # by default there are some reserved code, for every api. no need to define your own? or the system will merge the custom response code with default ones automatically?\n    # responses={\"200\": {\"description\": \"\u64a4\u9500\u6210\u529f\", \"model\": RevokeResult}},\n)\ndef revoke_calculation(calculation_id: str):\n    revoke_result = \"failed\"\n    calculation_state = None\n    if calculation_id in taskDict.keys():\n        print(\"TERMINATING TASK:\", calculation_id)\n        taskDict[calculation_id].revoke(terminate=True)\n        revoke_result = \"success\"\n        calculation_state = get_calculation_state(calculation_id).calculation_state\n    else:\n        print(\"TASK DOES NOT EXIST:\", calculation_id)\n        calculation_state = \"NOT_CREATED\"\n    return RevokeResult(\n        revoke_result=revoke_result, calculation_state=calculation_state\n    )\nfrom typing import List\n@app.get(\n    \"/get_calculation_ids\",\n    tags=[\"async\"],\n    response_model=List[str],\n    response_description=\"\u7f13\u5b58\u4e2d\u53ef\u67e5\u8be2\u7684\u4efb\u52a1ID\u5217\u8868\","
        },
        {
            "comment": "The code defines a function \"get_calculation_ids\" that retrieves all task IDs from the \"taskDict\" dictionary and returns them as a list. This function has a description saying it checks for tasks with no updates in 24 hours and clears them from cache. The code uses the FastAPI framework, and uvicorn module is imported to run the app on specified host and port.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_template.py\":266-276",
            "content": "    description=\"\u4efb\u52a1\u5982\u679c24\u5c0f\u65f6\u5185\u6ca1\u6709\u72b6\u6001\u66f4\u65b0\u4f1a\u88ab\u6e05\u51fa\u7f13\u5b58\uff0c\u68c0\u67e5\u7f13\u5b58\u4e2d\u7684\u6240\u6709\u53ef\u67e5\u8be2\u4efb\u52a1ID\",\n    summary=\"\u67e5\u8be2\u4efb\u52a1ID\",\n)\ndef get_calculation_ids() -> List[str]:\n    calculation_ids = list(taskDict.keys())\n    return calculation_ids\nimport uvicorn\nuvicorn.run(app, host=host, port=port)"
        }
    ]
}