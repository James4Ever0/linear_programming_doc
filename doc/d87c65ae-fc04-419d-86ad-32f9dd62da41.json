{
    "summary": "This code loads and modifies a JSON file, sends POST requests to check/create tasks on server with specified IP & port based on test variable, and can parse the JSON data. It uses logging functionality and may interact with EnergyFlowGraph objects. Some commenting is missing or incomplete.",
    "details": [
        {
            "comment": "This code is loading a JSON file named \"template_input.json\", modifying the calculation target to \"\u73af\u4fdd\" and then sending POST requests to check the result, status or create a task on a server at specified IP and port using the provided URLs. It also checks if a test variable equals \"create_task\", \"check_result\", or \"check_status\" to determine which request to send. If parsing is enabled, it converts the JSON data into an EnergyFlowGraph object for further processing.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/celery_test.py\":0-47",
            "content": "from log_utils import logger_print\nimport os\nos.environ[\"http_proxy\"] = \"\"\nos.environ[\"https_proxy\"] = \"\"\nos.environ[\"all_proxy\"] = \"\"\nimport json\nparsing = False\n# parsing = True\nwith open(\"template_input.json\", \"r\") as f:\n    mDictList = json.load(f)\n# \u4fee\u6539\u4e3a\u73af\u4fdd\u76ee\u6807\nmDictList[0][\"graph\"][\"\u8ba1\u7b97\u76ee\u6807\"] = \"\u73af\u4fdd\"\nimport requests\nport = 9870\n# ip = \"127.0.0.1\"\n# ip = \"43.192.122.65\"\nip = \"69.234.199.80\"\n# port = 9871\n# ip = \"192.168.3.10\"\nurl = f\"http://{ip}:{port}/calculate_async\"\nresult_url = f\"http://{ip}:{port}/get_calculation_result_async\"\nstatus_url = f\"http://{ip}:{port}/get_calculation_state\"\n# test = \"create_task\"\ntest = \"check_result\"\n# test = \"check_status\"\ntask_id = \"9ebda25b-92f9-4b77-acc3-9c85c0cfefa9\"\n# task_id = \"914702ea-433c-4534-97ea-5cc619e37730\"\n# task_id = \"2533b339-86db-45bb-8d03-5d38ff9ff52c\"\ncheck_data = dict(calculation_id=task_id)\nif test == \"create_task\":\n    from fastapi_datamodel_template import EnergyFlowGraph\n    # from ies_optim import \u8bbe\u5907\u8282\u70b9\n    if parsing:\n        data = EnergyFlowGraph(mDictList=mDictList).dict()"
        },
        {
            "comment": "This code appears to be part of a larger program that sends requests to different URLs depending on the value of the 'test' variable. It uses the requests library to send POST and GET requests and handles various responses. The code also includes logging functionality, using logger_print(), and potentially interacts with JSON data. There is some commenting missing or incomplete, which could provide more clarity for future maintenance or review.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/celery_test.py\":48-72",
            "content": "    else:\n        data = dict(mDictList=mDictList)\n    # mdata = mDictList[0]['nodes'][25] # 25-35\n    # import rich\n    # logger_print(mdata) # \u8bbe\u5907\n    # r = requests.post(url, json=data.dict())\n    r = requests.post(url, json=data)\n    logger_print(r.json())\n    logger_print(r.status_code)\nelif test == \"check_result\":\n    r = requests.get(result_url, params=check_data)\n    logger_print(r.status_code)\n    logger_print(r.content)\n    output_path = \"output_template.json\"\n    logger_print(f\"writing to: {output_path}\")\n    with open(output_path, \"w+\") as f:\n        f.write(json.dumps(r.json(), indent=4, ensure_ascii=False))\nelif test == \"check_status\":\n    r = requests.get(status_url, params=check_data)\n    logger_print(r.status_code)\n    logger_print(r.content)\nelse:\n    raise Exception(\"TEST IS NOT CREATED:\", test)\n# t = \u8bbe\u5907\u8282\u70b9.parse_obj(mdata)\n# logger_print(t)"
        }
    ]
}