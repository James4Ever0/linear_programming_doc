{
    "summary": "The code defines functions for piecewise approximation using linear interpolation and creates a piecewise function for sine and powers of 2 within specified bounds. The z_func_approx function approximates a value based on input x and y, and is tested against the sine function.",
    "details": [
        {
            "comment": "The code defines functions for piecewise approximation, using linear interpolation from input and output arrays. It creates a piecewise function for the sine function and powers of 2 within specified bounds, with adjustable sample sizes.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/piecewise_approximation_test.py\":0-42",
            "content": "# z = x*sin(y)\n# y_s ~= sin(y)\n# i_0 = (x+y_s)/2, i_1 = (x-y_s)/2\n# z = i_0^2-i_1^2\nfrom linearization_config import *\ny_s_lb = -1\ny_s_ub = 1\ni_0_lb = (x_lb + y_s_lb) / 2\ni_0_ub = (x_ub + y_s_ub) / 2\ni_1_lb = (x_lb - y_s_ub) / 2\ni_1_ub = (x_ub - y_s_lb) / 2\nimport numpy as np\nfrom scipy.interpolate import interp1d\n# # \u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\u6570\u7ec4\n# x = np.array([0, 1, 2, 3, 4, 5])\n# y = np.array([0, 1, 4, 9, 16, 25])\ndef interpolate_from_input_and_output_array(x, y):\n    # \u4f7f\u7528interp1d\u51fd\u6570\u5c06\u8f93\u5165\u548c\u8f93\u51fa\u6570\u7ec4\u8f6c\u5316\u4e3a\u5206\u6bb5\u51fd\u6570\n    f = interp1d(x, y, kind=\"linear\")  # put np.ndarray here\n    return f\ndef get_piecewise_function(lb, ub, sample_size, func):\n    print(\"LB:\", lb, \"UB:\", ub)\n    input_array = np.linspace(lb, ub, sample_size)\n    output_array = func(input_array)\n    piecewise_func = interpolate_from_input_and_output_array(input_array, output_array)\n    return piecewise_func\npiecewise_sample_size = 1000\npiecewise_y_sin = get_piecewise_function(\n    y_lb, y_ub, piecewise_sample_size, lambda x: np.sin(x)\n)\npiecewise_pow_2_1 = get_piecewise_function(\n    i_0_lb, i_0_ub, piecewise_sample_size, lambda x: x**2"
        },
        {
            "comment": "The code defines a function z_func_approx that takes in two float parameters x and y. It asserts the input values are within specified bounds, then calculates intermediate values i_0 and i_1 using x and y. These values are used to calculate power of 2 approximations pow_2_i_0 and pow_2_i_1 from piecewise functions piecewise_pow_2_1 and piecewise_pow_2_2, respectively. Finally, it calculates z_approx as the difference between these two power of 2 approximations and returns it. The code also includes a print statement to test the function by calling it with input values (0.5, 2) and comparing the result to half of sine of 2.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/piecewise_approximation_test.py\":43-73",
            "content": ")\npiecewise_pow_2_2 = get_piecewise_function(\n    i_1_lb, i_1_ub, piecewise_sample_size, lambda x: x**2\n)\nimport math\ndef z_func_approx(x: float, y: float):\n    assert x > x_lb\n    assert x < x_ub\n    assert y > y_lb\n    assert y < y_ub\n    y = np.array([y])\n    x = np.array([x])\n    y_s = piecewise_y_sin(y)\n    i_0 = (x + y_s) / 2\n    i_1 = (x - y_s) / 2\n    pow_2_i_0 = piecewise_pow_2_1(i_0)\n    pow_2_i_1 = piecewise_pow_2_2(i_1)\n    z_approx = pow_2_i_0 - pow_2_i_1\n    return z_approx\nprint(z_func_approx(0.5, 2), 0.5 * np.sin(2))"
        }
    ]
}