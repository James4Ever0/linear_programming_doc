{
    "summary": "The code defines classes for IES algorithm configurations and Docker processes, setting options like diagnostics, error handling, and docker image updates.",
    "details": [
        {
            "comment": "This code defines a config class `IESEnv` for the IES algorithm program configurations. It includes settings such as initializing all variables as zero, treating unit warnings as errors, and setting a percentage warning threshold to trigger warnings. The `STATIC_MOCK` setting allows the server to return static mock results when set to a nonempty string.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/config_dataclasses.py\":0-29",
            "content": "from log_utils import logger_print\nfrom pydantic import confloat, Field  # , validator, ValidationError\nfrom config_utils import EnvBaseModel, Union\nfrom typing import Literal, Optional\nimport psutil\nphysical_cpu_core_count = psutil.cpu_count(logical=False)\nclass IESEnv(EnvBaseModel):\n    \"\"\"\n    IES algorithm program configurations.\n    \"\"\"\n    VAR_INIT_AS_ZERO: Union[None, str] = Field(\n        default=None,\n        title=\"If set to an nonempty string, then all variables will be initialized as zero, otherwise left uninitialized.\",\n    )\n    UNIT_WARNING_AS_ERROR: bool = Field(\n        default=False,\n        title=\"Treat unit related warnings as errors, such as percentage related warnings.\",\n    )\n    PERCENT_WARNING_THRESHOLD: confloat(gt=0) = Field(\n        default=1,\n        title=\"Emit warnings when any percentage values is less than given value.\",\n    )\n    STATIC_MOCK: Union[None, str] = Field(\n        default=None,\n        title=\"If set to an nonempty string, then the server will return static mock results.\","
        },
        {
            "comment": "The code defines several boolean Field variables for configuring server behavior, such as generating mock results based on input parameters or enabling failsafe mode. It also includes a field with the default value of 42, which relates to restoring randomness, and boolean fields for diagnostic purposes.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/config_dataclasses.py\":30-59",
            "content": "    )\n    GENERATED_MOCK: bool = Field(\n        default=False,\n        title=\"If set to True, the server will generate mock results by analyzing the input parameters (if MOCK_TEST is False))\",\n    )\n    DETERMINISTIC_MOCK: bool = Field(\n        default=False,\n        title=\"If set to True, then the server will return deterministic synthetic mock results based on input hash.\",\n    )\n    MOCK_DATA_THRESHOLD: float = Field(\n        default=0.001,\n        title=\"Threshold for mock data manipulation, under which will not change.\",\n    )\n    ANSWER_TO_THE_UNIVERSE: int = Field(\n        default=42,\n        title=\"Answer to the universe (value related to randomness restoration)\",\n    )\n    FAILSAFE: bool = Field(\n        default=False,\n        title=\"Enable failsafe mode, which guarantees that task output will be generated in any condition.\",\n    )\n    DETERMINISTIC_FAILSAFE: bool = Field(\n        default=False, title=\"Ensure determinism in failsafe mode.\"\n    )\n    INFEASIBILITY_DIAGNOSTIC: bool = Field(\n        default=False,"
        },
        {
            "comment": "The code defines several boolean and Literal fields for configuring a microgrid system. It includes options for enabling infeasibility diagnostic mode, dynamic type verification on the topology, setting adder error compensation modes, and ignoring exceptions raised by anchors. Additionally, it sets a default weight of adder error in the objective function passed to the solver and allows specifying a prolog stack limit.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/config_dataclasses.py\":60-88",
            "content": "        title=\"Enable infeasibility diagnostic mode, which will perform various tests to detect and analyze infeasibility, before and after accessing the solver.\",\n    )\n    DYNAMIC_TYPE_VERIFICATION: bool = Field(\n        default=False,\n        # default = True,\n        title=\"Enable dynamic type verification on topology.\",\n    )\n    ADDER_ERROR_COMPENSATION: Literal[\n        \"none\", \"positive\", \"negative\", \"combined\"\n    ] = Field(\n        default=\"none\",\n        title=\"Mode for adder error compensation, 'none' for no compensation, 'positive' for too much input, 'negative' for too little input, and 'combined' for both.\",\n    )\n    IGNORE_ANCHOR_EXCEPTIONS: bool = Field(\n        default=True, title=\"Ignore exceptions raised by anchors in topology checks.\"\n    )\n    ADDER_ERROR_WEIGHT: float = Field(\n        default=1e9,\n        # default=1e20,\n        # default=1e7,\n        title=\"Weight of adder error in objective passed to solver.\",\n    )\n    PROLOG_STACK_LIMIT: Optional[int] = Field(\n        default=None, title=\"Prolog stack limit in gigabytes.\""
        },
        {
            "comment": "The code defines various configuration options for a system. It includes parameters such as PROLOG_TABLE_SIZE_LIMIT, PROLOG_SHARED_TABLE_LIMIT, THREAD_COUNT, USE_PROLOG_CODE, and UNCHECK_CONNECTIVITY_IN_DYNAMIC_TYPE_VERIFICATION. The code also mentions a validator function for the \"MOCKGEN\" option but does not define it.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/config_dataclasses.py\":89-116",
            "content": "    )\n    PROLOG_TABLE_SIZE_LIMIT: Optional[int] = Field(\n        default=None, title=\"Prolog table limit in gigabytes.\"\n    )\n    PROLOG_SHARED_TABLE_LIMIT: Optional[int] = Field(\n        default=None, title=\"Prolog shared table limit in gigabytes.\"\n    )\n    THREAD_COUNT: Optional[int] = Field(\n        default=physical_cpu_core_count,\n        title=f\"Thread count for cplex solver, default is available physical cpu core count ({physical_cpu_core_count}).\",\n    )\n    USE_PROLOG_CODE: bool = Field(\n        default=False,\n        title=\"Use prolog (slower) instead of python for type checking state enumeration.\",\n    )\n    UNCHECK_CONNECTIVITY_IN_DYNAMIC_TYPE_VERIFICATION: bool = Field(\n        default=True,\n        # default=False,\n        title=\"If set to True, then connectivity checks will be skipped in dynamic type verification.\",\n    )\n    # @validator(\"MOCKGEN\")\n    # def validate_mockgen(cls, values, v):\n    #     mock_test = values.get(\"MOCK_TEST\", None)\n    #     if v is True:\n    #         if mock_test is None:"
        },
        {
            "comment": "The code defines a class called `DockerLauncherConfig` which is a data class for IES Docker launcher configurations. It includes various attributes such as `NO_HALFDONE`, `JUST_BUILD`, `TERMINATE_ONLY`, `DETACH_KEYS`, `UNITTEST`, and `FINAL_IMAGE_TAG`. These attributes control different aspects of the Docker image building and running process, including pulling half-done images, just building docker images, terminating all running containers, detaching from Docker container, performing unittest, and specifying final image tag.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/config_dataclasses.py\":117-148",
            "content": "    #             raise ValidationError(\n    #                 \"MOCKGEN shall not be set to True if MOCK_TEST is not set.\"\n    #             )\nclass DockerLauncherConfig(IESEnv):\n    \"\"\"\n    IES Docker launcher configurations.\n    Also parse algorithm related configs.\n    \"\"\"\n    NO_HALFDONE: bool = Field(\n        default=False,\n        title=\"Disable pulling half-done images from Dockerhub and build from ubuntu base image.\",\n    )\n    JUST_BUILD: bool = Field(\n        default=False, title=\"Just build docker image, don't run service.\"\n    )\n    TERMINATE_ONLY: bool = Field(\n        default=False, title=\"Only terminate all running containers and exit.\"\n    )\n    DETACH_KEYS: str = Field(\n        default=\"ctrl-d,d\",\n        title=\"Key sequence to detach from Docker container (not working on Windows)\",\n    )\n    UNITTEST: bool = Field(\n        default=False, title=\"Perform unittest before launching the service\"\n    )\n    FINAL_IMAGE_TAG: str = Field(\n        default=\"latest\",\n        title='Tag name(setting anything other than \"latest\" will skip image building and run final image with that tag instead)',"
        },
        {
            "comment": "This code snippet defines two configurable class variables, `FORCE_UPDATE` and `UPDATE_INTERVAL_IN_DAYS`, for the purpose of updating docker images. The default value for `FORCE_UPDATE` is set to False, indicating that updates will only occur if the image is older than 7 days. `UPDATE_INTERVAL_IN_DAYS` is set by default to 7 days as the interval between updates.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/config_dataclasses.py\":149-156",
            "content": "    )\n    # FORCE_UPDATE: bool = Field(\n    #     default=False,\n    #     title=\"Force updating ultimate docker image even if up-to-date (not older than 7 days).\",\n    # )\n    # UPDATE_INTERVAL_IN_DAYS: int = Field(\n    #     default=7, title=\"Update/rebuild image interval in days\"\n    # )"
        }
    ]
}