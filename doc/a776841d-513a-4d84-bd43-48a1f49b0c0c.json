{
    "summary": "This code introduces a microgrid simulation language with variables, constants, and expressions for various modes. It features array operations, bounds checking, automatic differentiation, aggregation of arrays, binary variable operations via broadcasting and multiplication, constant bounds, non-strict symbols in expressions, assertions, and user-defined branches.",
    "details": [
        {
            "comment": "Code defines various variable types, constants, and lists for a model. It includes constants like const0 and const1, simulation variables like simconst, and different types of variables such as real, integer, and binary variables. The code also includes non-negative variables, parameters, and section functions for the model.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/dsl_parser/mylang.ies\":0-29",
            "content": "# highlight dsl with: https://github.com/textX/textX-LS\n# shall you generate typed or type casted code.\n\u5e38\u91cf: # \u5e38\u91cf\u5b9a\u4e49\u7528\u4e8e\u68c0\u9a8c\u5176\u662f\u5426\u5df2\u7ecf\u88ab\u5b9a\u4e49 \u4e0d\u5f97\u5728\u6b64\u5904\u8d4b\u503c\n    const0\n    const1\n    \u4eff\u771f\u6a21\u62df:\n        simconst\n\u5e38\u91cf\u5217\u8868\uff1a\n\u5b9e\u6570\u53d8\u91cf: # \u5b9a\u4e49\u53d8\u91cf\u4e4b\u524d\uff0c\u5148\u68c0\u67e5\u662f\u5426\u88ab\u5b9a\u4e49\u4e86 \u5982\u679c\u88ab\u5b9a\u4e49\u4e86 \u90a3\u4e48\u5c31\u4e0d\u6267\u884c\u5b9a\u4e49\u64cd\u4f5c \u4f8b\u5982\u8bbe\u5907\u53f0\u6570\n    <| param0 # \u975e\u6b63\n\u6574\u6570\u53d8\u91cf\uff1a\n    >| param10 # \u975e\u8d1f\n    >> param11 # \u6b63\u6570\n\u53d8\u91cf\u5217\u8868:\n    const_array_pair0 ~ (const_array0 'unit_array_0', const_array1 'unit_array_1') # packing 1d array of same shape into 2d array\n\u975e\u8d1f\u53d8\u91cf\u5217\u8868:\n    param1\n    param2\n    param11: [100] # size of 100, index from 0 to 99\n    param5<0,100>: [1,10] # varName<lb, ub>'unit specification': [index_start, index_end, [index_jump]], if variables has been passed to bounds, automatically calculate constant lb/ub for it, then add actual constraints\n    param8\n\u4e8c\u5143\u53d8\u91cf\u5217\u8868:\n    param12: [11]\n    bin_param10 <param10>  # like ~param10\n\u6307\u793a\u53d8\u91cf\u5217\u8868: #\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\n    param3 <param8>  # assignment symbol (<>): define relaionship between indicators and variables/expressions.\n\u5355\u6307\u793a\u53d8\u91cf:\n    param7 <param10>\n\u5206\u6bb5\u51fd\u6570\uff1a\n    param9(param8) ~ (const_array0, const_array1)"
        },
        {
            "comment": "This code defines a language for microgrid simulation, with constraints and expressions for different simulation modes. It includes functions for array operations, bounds checking, automatic differentiation, and aggregation operations on arrays. The syntax is also defined with optional indexing and deprecated notation.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/dsl_parser/mylang.ies\":30-51",
            "content": "    param12(param11) ~ const_array_pair0 # input must be const/var 1d array, output with same type\n\u7ea6\u675f: # \u4e0d\u540c\u7684\u8ba1\u7b97\u6a21\u5f0f\u9700\u8981\u6dfb\u52a0\u4e0d\u540c\u7684\u7ea6\u675f \u8fd9\u91cc\u5b9a\u4e49\u516c\u5171\u7ea6\u675f\n    \u79d2\u7ea7\u4eff\u771f:\n        ...\n    \u8bbe\u8ba1\u89c4\u5212:\n        planningConstraint\n    \u4eff\u771f\u6a21\u62df:\n        simulationConstraint\n    param6 = param1 + param2 # intermediate expression list. type: list[expr]\n    param1 < param0 \n    param1 < 10 # constant bounds are recorded and compared.\n    param1 + param2 < param0\n    param1[i] + param2[i+1] < param0, (optional syntax): [0, maxIndex]\n    param1[i] + param2[i+j] < param0: i = -1, j = [1,10]\n    diff(param1) = param0 # diff(param1) = (param[i] - param[i+1]) * timeparam \u81ea\u52a8\u5fae\u5206 \u9ed8\u8ba4\u662f\u65f6\u95f4\u5fae\u5206\n    param3 # meaning: param3.x\n    (param3) # deprecated.\n    mean(param3) # shall complain when passed in some non-list objects. but mean(param3+1) won't complain.\n    sum(param3)\n    |> param3\n    |< param3\n    ~param10 # meaning: break down a single integer variable into multiple decision (binary) variables, bin_param10, with constraint param10_lb <= sum(bin_param10) <= param10"
        },
        {
            "comment": "The code defines operations for a binary variable list (param3) and uses various operators such as broadcasting, equality checks, and multiplication. It also mentions the importance of ensuring bounds are constants and warns about linearization needs when using bound variables in non-linear expressions.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/dsl_parser/mylang.ies\":51-58",
            "content": ", len(bin_param10) == param_10_ub, sum(bin_param10) == param10, and will broadcast this to all variables & varlist, by expanding into another dimension with size of param_10_ub. the lower bound and upper bound of param_10 must be constants. e.g. p0[i][j] < bp[j] * p1[i][j], which i is time index, all other indexs (j,k,l) are discrete indexs.\n    ?>param3 # type: binary variable list.\n    ?<param2 # when putting variable list like \"param2\", create or find indicator variable list along the way, then do the operation.\n    ??>param3 # check if it is \"really\" positive, equivalent to: ?>(param3 - EPS), EPS = 1e-5. when used with integer variables (list), automatically use this form instead.\n    ??<param3\n    ||param3\n    param3 * param4 # linearization needed! need param3 and param4 to be bounded. if unsure about its minima and maxima, then do not use it in other non-linear expression.\n    param3 < param4 <= param5 # separate this into two expressions. check all symbols are of inequality or equalit"
        },
        {
            "comment": "This code initializes and configures symbols in expressions to be non-strict (>= <=) and sets up an assertion for constant comparison. It also initializes a parameter value, ensures all symbols are non-strict, and defines a user-defined branch using a branched constraint.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/dsl_parser/mylang.ies\":58-63",
            "content": "y (=) and with same directions. enforce all symbols in expressions (with variables) are non-strict (>= <=) by automatic conversion.\n    const0 > const1 # make this into assertion, do not convert symbol in any way.\n    param3[0] := 1 # init val.\n    param3 := 0 # init all. val must be constant. execution order preserved.\n    USER_DEFINED_BRANCH: # this branch must be defined somewhere, by reading some config file.\n        branched_constraint"
        }
    ]
}