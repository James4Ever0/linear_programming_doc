{
    "summary": "FastAPI server with user and item metadata, read/create item endpoints, raises error for \"foo\" name, OpenAPI schema, uvicorn import, and server setup.",
    "details": [
        {
            "comment": "This code imports necessary modules and sets a server port number. It is written for the FastAPI framework, which automatically generates documentation. The code also provides metadata for two tags (users and items), including their descriptions and external documentation links.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_with_doc.py\":0-28",
            "content": "# test to create a server with fastapi, generate doc automatically.\n# code from: https://fastapi.tiangolo.com/tutorial/metadata/\n# notice: after you've done developing server, you can generate client automatically.\n# reference: https://fastapi.tiangolo.com/advanced/generate-clients/\n# custom the way to generate client functions.\nport = 9982\nif __name__ == \"__main__\":\n    from fastapi import FastAPI, HTTPException\n    import rich\n    AppName = \"ChimichangApp\"\n    tags_metadata = [\n        {\n            \"name\": \"users\",\n            \"description\": \"Operations with users. The **login** logic is also here.\",\n            \"externalDocs\": {\n                \"description\": \"Items external docs\",\n                \"url\": \"https://fastapi.tiangolo.com/\",\n            },\n        },\n        {\n            \"name\": \"items\",\n            \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n            \"externalDocs\": {\n                \"description\": \"Items external docs\",\n                \"url\": \"https://fastapi.tiangolo.com/\","
        },
        {
            "comment": "This code sets up a FastAPI server for an app, specifying title, description, version, terms of service, tags_metadata, contact information, and license info. It also includes an endpoint (\"/items/\") to get items, with summary, tags, and response description provided. However, creating and reading users are not implemented yet.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_with_doc.py\":29-72",
            "content": "            },\n        },\n    ]\n    description = f\"\"\"\n    {AppName} API helps you do awesome stuff. \ud83d\ude80\n    ## Items\n    You can **read items**.\n    ## Users\n    You will be able to:\n    * **Create users** (_not implemented_).\n    * **Read users** (_not implemented_).\n    \"\"\"  # this is not docstring. this is passed as parameter.\n    app = FastAPI(\n        title=AppName,\n        description=description,\n        version=\"0.0.1\",\n        terms_of_service=\"http://example.com/terms/\",\n        tags_metadata=tags_metadata,\n        contact={\n            \"name\": \"Deadpoolio the Amazing\",\n            \"url\": \"http://x-force.example.com/contact/\",\n            \"email\": \"dp@x-force.example.com\",\n        },  # contact?\n        license_info={\n            \"name\": \"Apache 2.0\",\n            \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n        },\n    )\n    from fastapi import Query\n    @app.get(\n        \"/items/\",\n        response_description=\"get response example\",\n        summary=\"summary for get items\",\n        tags=[\"users\"],  # this gets it into a folder."
        },
        {
            "comment": "This code defines a FastAPI server with a single endpoint for reading items. The query parameter `q` is used to specify the number of items to return, defaulting to 42. The function returns a list of item names and prints the magic number. The class `Item` represents an item with name, price, and a boolean value for \"is_offer\". A mapping is also included but its type is not fully defined.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_with_doc.py\":73-105",
            "content": "    )  # what is dependencies anyway?\n    async def read_items(\n        q: int = Query(\n            description=\"magic query number\",\n            default=42,\n            examples=dict(\n                e1=dict(summary=\"sum e1\", description=\"desc e1\", value=12),\n                e2=dict(summary=\"sum e2\", description=\"desc e2\", value=23),\n                e3=dict(summary=\"sum e3\", description=\"desc e3\", value=34),\n            ),\n        )\n    ):\n        print(\"MAGIC NUMBER?\", q)\n        return [{\"name\": \"Katana\"}]\n    from pydantic import BaseModel, Field\n    from typing import Mapping\n    class Item(BaseModel):\n        \"\"\"\n        can this item thing have any schema description?\n        \"\"\"\n        name: str\n        price: float\n        \"\"\"\n        how to insert mock data and data entry description?\n        \"\"\"\n        is_offer: bool = Field(\n            title=\"IS_OFFER_TITLE\",  # this will be generated if not passed\n            description=\"is offer description\",\n        )\n        myDict: Mapping  # it is mapping, not dict."
        },
        {
            "comment": "This code defines a FastAPI route for creating an item. It includes a ResponseModel class that serves as the response model for the API, with fields ans and ans_1. The schema_extra provides example values for the fields in the response. The code also imports Annotated from typing_extensions and Body from fastapi for use in defining the route's parameters and examples for the response. The description and summary provide information about the API's purpose, and the response_description explains what the response should indicate if creation is successful.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_with_doc.py\":106-134",
            "content": "        # if it is clear, you don't have to do this. if unclear, you do something different.\n    inventory = []\n    class ResponseModel(BaseModel):\n        \"\"\"model summary or description? example response model\"\"\"\n        ans: str = Field(description=\"pydantic description\", example=\"ans example\")\n        \"\"\"ans doc, not working though\"\"\"\n        ans_1: str\n        class Config:\n            schema_extra = {\"example\": {\"ans\": \"Foo\", \"ans_1\": \"ans_1 data\"}}\n    from typing_extensions import Annotated  # python 3.7\n    from fastapi import Body\n    # when it is async, no parallelism!\n    # but who needs that?\n    @app.post(\n        \"/items/\",\n        description=\"api for creating an item\",\n        summary=\"summary for creating an item\",\n        response_description=\"respond if creation is successful.\",\n        response_model=Annotated[  # can this work?\n            ResponseModel,\n            Body(\n                description=\"create item response model\",\n                examples={\"normal\": {\"ans\": \"ans data\", \"ans_1\": \"ans_1 data\"}},"
        },
        {
            "comment": "Endpoint for creating a new item. It receives an Item object in the request body and upon successful creation, it returns the created item. If the item's name is \"foo\", a 400 Bad Request error is raised. The OpenAPI schema is served at /openapi.json for API documentation purposes.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_with_doc.py\":135-171",
            "content": "            ),\n        ],\n        name=\"post_item_api_name\",\n    )\n    async def create_item(\n        item: Annotated[\n            Item,\n            Body(\n                description=\"create item input param item\",\n                example=Item(name=\"name\", price=2, is_offer=False, myDict={\"m\": 1}),\n            ),\n        ]\n    ):\n        \"\"\"\n        Create a new item.\n        ## Parameters\n        - **item**: Item object to create.\n        ## Returns\n        The created item.\n        ## Errors\n        - **400 Bad Request**: Invalid request data.\n        \"\"\"\n        print(\"RECV ITEM:\")\n        rich.print(item)\n        print()\n        if item.name == \"foo\":\n            raise HTTPException(status_code=400, detail=\"Item name cannot be foo.\")\n        inventory.append(item)\n        return ResponseModel(ans=\"1\", ans_1=\"2\")\n    # how to generate doc?\n    # visit: http://<host_ip>:9981/docs\n    #\n    # how to export doc?\n    #\n    # By default, the OpenAPI schema is served at /openapi.json\n    # this json file is needed to create project in apifox."
        },
        {
            "comment": "The code is importing the \"uvicorn\" library and running a FastAPI app on the specified host and port. This sets up the server for the app to handle incoming HTTP requests.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/fastapi_server_with_doc.py\":172-176",
            "content": "    # what is that json anyway?\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=port)"
        }
    ]
}