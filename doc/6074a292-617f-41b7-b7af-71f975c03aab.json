{
    "summary": "The code reads a JSON input file, parses it using the EnergyFlowGraph class, and creates an object. It logs each mDict in the EnergyFlowGraph and prints information for each one. The code uses various modules to solve the model, create a dictionary list for calculation parameters, solves the model using these parameters, stores simulation results in another dictionary, and writes the output file in JSON format.",
    "details": [
        {
            "comment": "The code reads a JSON input file, parses it using the EnergyFlowGraph class, and then creates a new EnergyFlowGraph object from the parsed data. It also logs each mDict in the EnergyFlowGraph and prints information for each one. The logger_print function is used to print messages with different prefixes based on their type. The code uses various modules such as log_utils, rich, and solve_model. The MAKEFILE dictionary is used to specify inputs and outputs for the program.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_json_input_format.py\":0-38",
            "content": "from log_utils import logger_print\n# input_path = \"test_data.json\"\n# input_path = \"test/sample_data/json_from_browser.json\"\ninput_path = \"test/sample_data/input_oom.json\"\n# input_path = \"test/test_topo.json\"\n# input_path = \"template_input.json\"\n# input_path = \"test/missing_param_input_dieselgenerator.json\"\n# input_path = \"test/lithion_battery.json\"\noutput_path = \"export_format_test.json\"\n# this is something different.\nMAKEFILE = dict(inputs=[input_path], outputs=[output_path], args=[])\nimport json\nwith open(input_path, \"r\") as f:\n    data = json.load(f)\n    # data = dict(mDictList=json.load(f))\nfrom ies_optim import EnergyFlowGraph\nfrom topo_check import \u62d3\u6251\u56fe\nEFG = EnergyFlowGraph.parse_obj(data)\nEFG_dict = EFG.dict()\nEFG2 = EnergyFlowGraph.parse_obj(EFG_dict)\nimport rich\nfrom solve_model import mDictListToCalcParamList, solveModelFromCalcParamList\nfor index, mDict in enumerate(EFG.mDictList):\n    logger_print(mDict)\n    logger_print()\n    logger_print(f\"_____parsing mDict #{index}_____\")\n    topo = \u62d3\u6251\u56fe.from_json(mDict.dict())"
        },
        {
            "comment": "This code checks the consistency of a topology and creates a dictionary list for calculation parameters. It then solves the model using these parameters and stores the simulation results in another dictionary. Finally, it writes the results to an output file in JSON format with proper indentation and without converting special characters to ASCII.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test_json_input_format.py\":39-48",
            "content": "    topo.check_consistency\nmDictList = EFG.dict()[\"mDictList\"]\ncalcParamList = mDictListToCalcParamList(mDictList)\nresultList = solveModelFromCalcParamList(calcParamList)\n# breakpoint()\nlogger_print(resultList[0][\"simulationResultTable\"])\nwith open(output_path, \"w\") as f:\n    f.write(json.dumps(resultList, indent=4, ensure_ascii=False))"
        }
    ]
}