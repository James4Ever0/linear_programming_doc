{
    "summary": "This code defines port and device types, establishes relationships, and includes functions for checking constraints. It can be used in microgrid systems to manage power flow or assign tasks, with predicates adder_port_status and adder_port_all_status for checking port statuses.",
    "details": [
        {
            "comment": "This code defines a set of port and device types, and creates relationships between them. It also includes functions to check constraints on the ports and ensure all ports have the same energy type. This information could be used in a microgrid system for managing power flow or assigning tasks to different devices.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/cplex_abnormal_exit_condition_debug/prolog_gen.pro\":1-54",
            "content": "port(bat_port1).\nport(generator_port1).\nport(load_port1).\ninput_port(bat_port1).\ninput_port(load_port1).\noutput_port(bat_port1).\noutput_port(generator_port1).\nidle_port(bat_port1).\nidle_port(generator_port1).\nidle_port(load_port1).\ndevice(battery).\ndevice(load).\ndevice(generator).\ndevice(DEVICE_NAME):- device(DEVICE_TYPE), call(DEVICE_TYPE, DEVICE_NAME).\nbattery(battery1).\nload(load1).\ngenerator(generator1).\nport_mapping(battery1, bat_port1).\nport_mapping(generator1, generator_port1).\nport_mapping(load1, load_port1).\nenergy(electricity).\nelectricity(bat_port1).\nelectricity(load_port1).\nelectricity(generator_port1).\nlist_member(X,[X|_]).\nlist_member(X,[_|TAIL]) :- list_member(X, TAIL).\nall_satisfy_constraint([], _).\nall_satisfy_constraint([H|T], Constraint) :-\n    call(Constraint, H),\n    all_satisfy_constraint(T, Constraint).\nall_with_same_type(PORT_LIST, ENERGY_TYPE) :- energy(ENERGY_TYPE), all_satisfy_constraint(PORT_LIST, ENERGY_TYPE).\nport_status(PORT, input) :- input_port(PORT).\nport_status(PORT, output):- output_port(PORT)."
        },
        {
            "comment": "The code defines the `adder_port_status` predicate, which takes an adder and a list of energy types as input. It checks that all ports belong to the adder, have the same energy type, and are either both input and output or all idle. The `adder_port_all_status` uses `findall` to gather the statuses for each port in the adder.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/cplex_abnormal_exit_condition_debug/prolog_gen.pro\":55-82",
            "content": "port_status(PORT, idle):- idle_port(PORT).\ninput_status(STATUS) :- STATUS = input.\noutput_status(STATUS) :- STATUS = output.\nidle_status(STATUS) :- STATUS = idle.\napply_list([], [], _).\napply_list([INP], [RET], FUNC) :- call(FUNC, INP, RET).\napply_list([INP|INP_TAIL], [RET|RET_TAIL], FUNC) :- apply_list(INP_TAIL, RET_TAIL, FUNC), call(FUNC, INP, RET).\nport_status_list(PORT, STATUS) :- apply_list(PORT, STATUS, port_status).\nadder(adder1, [bat_port1, generator_port1, load_port1]).\nadder_port_status(ADDER, [ENERGY_TYPE|[STATUS_LIST]]) :- \n    adder(ADDER, PORT_LIST),\n    all_satisfy_constraint(PORT_LIST, port),\n    all_with_same_type(PORT_LIST, ENERGY_TYPE),\n    port_status_list(PORT_LIST, STATUS_LIST),\n    (\n        list_member(STATUS_X, STATUS_LIST), list_member(STATUS_Y, STATUS_LIST),STATUS_X=input, STATUS_Y = output;\n        all_satisfy_constraint(STATUS_LIST, idle_status)\n    ).\nadder_port_all_status(ADDER, ALL_STATUS):-\n    findall(STATUS, adder_port_status(ADDER, STATUS), ALL_STATUS).\nadder_port_statu"
        },
        {
            "comment": "This code defines a relation 's_list' that takes two lists, ADDER_LIST and ADDER_STATUS_LIST, and applies each element of the ADDER_LIST to the corresponding element in ADder_STATUS_LIST using the predicate 'apply_list'. It uses this operation for adder_port_status.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/cplex_abnormal_exit_condition_debug/prolog_gen.pro\":82-82",
            "content": "s_list(ADDER_LIST, ADDER_STATUS_LIST) :- apply_list(ADDER_LIST, ADDER_STATUS_LIST, adder_port_status)."
        }
    ]
}