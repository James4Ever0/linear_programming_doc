{
    "summary": "This code imports functions, sets FLAGS, parses XLSX files to JSON and CSVs to JSON. It checks CSV flag, iterates over filepaths, calls parser function for CSV conversion, prints separator line after each conversion.",
    "details": [
        {
            "comment": "The code imports necessary functions and defines paths for different file types. It then sets the FLAGS for both XLSX and CSV parsing to True, and calls the main parser function from lib_parse_params module. The code also includes a list of workbook names, descriptions, and output directories for XLSX files, including one for microgrid interfaces.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/parse_params.py\":0-29",
            "content": "from log_utils import logger_print\n# FLAGS = {\"XLSX\": False, \"CSV\": True}\nimport os\ntype_utils_resdir = \"type_utils_resources\"\nfpath_under_type_utils_resdir = lambda fpath: os.path.join(type_utils_resdir, fpath)\nTYPE_UTILS_MICROGRID_PORTS = fpath_under_type_utils_resdir(\"microgrid_ports\")\nTYPE_UTILS_EXTRA_PORTS = fpath_under_type_utils_resdir(\"extra_ports\")\nport_type_def_excel_name = \"\u8bbe\u5907\u63a5\u53e3_11_3\"\nif __name__ == \"__main__\":\n    FLAGS = {\"XLSX\": True, \"CSV\": True}\n    from lib_parse_params import main_parser, csv_parser\n    xlsx_worklist = [\n        (\"\u8bbe\u5907\u4fe1\u606f\u5e93\u5404\u53c2\u6570_23_10_11_from_7_24\", \"\u57fa\u7840\u53c2\u6570\", \"device_params_intermediate\"),\n        # (\"\u8bbe\u5907\u4fe1\u606f\u5e93\u5404\u53c2\u6570_23_7_24\", \"\u57fa\u7840\u53c2\u6570\", \"device_params_intermediate\"),\n        (\n            fpath_under_type_utils_resdir(port_type_def_excel_name),\n            # fpath_under_type_utils_resdir(\"\u8bbe\u5907\u63a5\u53e3_10_11\"),\n            \"\u5fae\u7535\u7f51\u63a5\u53e3\",\n            TYPE_UTILS_MICROGRID_PORTS,\n        ),\n        (\n            fpath_under_type_utils_resdir(port_type_def_excel_name),\n            # fpath_under_type_utils_resdir(\"\u8bbe\u5907\u63a5\u53e3_10_11\"),"
        },
        {
            "comment": "This code defines input and output files for two data formats (.csv and .xlsx) and creates a dictionary \"MAKEFILE\" with the details. It then checks if XLSX flag is set, and if so, it parses each specified XLSX file using appropriate parser functions, storing results in corresponding JSON files.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/parse_params.py\":30-58",
            "content": "            \"\u65b0\u589e\u8bbe\u5907\u63a5\u53e3\",\n            TYPE_UTILS_EXTRA_PORTS,\n        ),\n        # (\"\u8bbe\u5907\u4fe1\u606f\u5e93\u5404\u53c2\u6570\", \"\u57fa\u7840\u53c2\u6570\", \"device_params_intermediate\"),\n        # (\"\u8bbe\u5907\u4fe1\u606f\u5e93\u5404\u53c2\u6570\", \"\u8bbe\u5907\u53c2\u6570\", \"device_params_intermediate\"),\n        # cannot work with all excels. damn it.\n        # (\"\u8bbe\u5907\u63a5\u53e3\", \"\u5fae\u7535\u7f51\u53c2\u6570\", \"microgrid_device_params_intermediate\"),\n    ]\n    csv_worklist = [\n        (\"\u8bbe\u5907\u63a5\u53e3-\u5fae\u7535\u7f51\u53c2\u6570\", \"microgrid_device_params_intermediate\"),  # this is not enough.\n    ]\n    MAKEFILE = dict(\n        inputs=[e[0] + \".csv\" for e in csv_worklist]\n        + [e[0] + \".xlsx\" for e in xlsx_worklist],\n        outputs=[e[-1] + \".json\" for e in csv_worklist + xlsx_worklist],\n        args=[],\n    )\n    if FLAGS[\"XLSX\"]:\n        for filepath, sheet_name, output_path in xlsx_worklist:\n            type_utils_parser = False\n            if filepath.startswith(type_utils_resdir):\n                type_utils_parser = True\n            main_parser(\n                f\"{filepath}.xlsx\", sheet_name, f\"{output_path}.json\", type_utils_parser\n            )\n            logger_print(\"____\")"
        },
        {
            "comment": "The code block checks if the CSV flag is set, then iterates over filepaths and output paths from the csv_worklist. It calls the csv_parser function to convert CSV files to JSON at the specified output path and prints a separator line after each conversion.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/parse_params.py\":60-63",
            "content": "    if FLAGS[\"CSV\"]:\n        for filepath, output_path in csv_worklist:\n            csv_parser(f\"{filepath}.csv\", f\"{output_path}.json\")\n            logger_print(\"____\")"
        }
    ]
}