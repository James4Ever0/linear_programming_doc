{
    "summary": "This code sets up energy systems, registers constraints, initializes devices, and provides debugging options using NumPy for hourly load data retrieval.",
    "details": [
        {
            "comment": "The code defines a class named \"LoadGet\" with methods to obtain hourly load data for cooling, heating, power, and steam. The methods take the number of hours in a day as an argument and return constant arrays representing the loads. The values in these arrays are all set to 10000.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":0-53",
            "content": "\"\"\"\n\u6837\u4f8b\u6a21\u5757\n\"\"\"\nimport numpy as np\nimport os\nimport math\nclass LoadGet(object):\n    \"\"\"\n    \u83b7\u53d6\u9010\u5c0f\u65f6\u51b7\u3001\u70ed\u3001\u7535\u3001\u84b8\u6c7d\u8d1f\u8377\u6570\u636e\n    \"\"\"\n    def get_cool_load(self, num_hour: int) -> np.ndarray:\n        \"\"\"\n        \u83b7\u53d6\u9010\u5c0f\u65f6\u51b7\u8d1f\u8377\u6570\u636e\n        Args:\n            num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n        Return:\n            \u5e38\u6570\u51b7\u8d1f\u8377\u6570\u7ec4 \u6570\u7ec4\u5f62\u72b6\u662f`(num_hour,)` \u5143\u7d20\u5168\u4e3a`10000`\n        \"\"\"\n        cool_load = np.ones(num_hour, dtype=float) * 10000\n        return cool_load\n    def get_heat_load(self, num_hour: int) -> np.ndarray:\n        \"\"\"\n        \u83b7\u53d6\u9010\u5c0f\u65f6\u70ed\u8d1f\u8377\u6570\u636e\n        Args:\n            num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n        Return:\n            \u5e38\u6570\u70ed\u8d1f\u8377\u6570\u7ec4 \u6570\u7ec4\u5f62\u72b6\u662f`(num_hour,)` \u5143\u7d20\u5168\u4e3a`10000`\n        \"\"\"\n        heat_load = np.ones(num_hour, dtype=float) * 10000\n        return heat_load\n    def get_power_load(self, num_hour: int) -> np.ndarray:\n        \"\"\"\n        \u83b7\u53d6\u9010\u5c0f\u65f6\u7535\u8d1f\u8377\u6570\u636e\n        Args:\n            num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n        Return:\n            \u5e38\u6570\u7535\u8d1f\u8377\u6570\u7ec4 \u6570\u7ec4\u5f62\u72b6\u662f`(num_hour,)` \u5143\u7d20\u5168\u4e3a`10000`\n        \"\"\"\n        power_load = np.ones(num_hour, dtype=float) * 10000\n        return power_load\n    def get_steam_load(self, num_hour: int) -> np.ndarray:"
        },
        {
            "comment": "This code defines a function for getting hourly steam load data and a class for retrieving radiation, electricity prices, natural gas prices, and steam prices. The radiation function loads daily hourly light intensity data from a file and repeats the first year's data if needed.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":54-91",
            "content": "        \"\"\"\n        \u83b7\u53d6\u9010\u5c0f\u65f6\u84b8\u6c7d\u8d1f\u8377\u6570\u636e\n        Args:\n            num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n        Return:\n            \u5e38\u6570\u84b8\u6c7d\u8d1f\u8377\u6570\u7ec4 \u6570\u7ec4\u5f62\u72b6\u662f`(num_hour,)` \u5143\u7d20\u5168\u4e3a`10000`\n        \"\"\"\n        steam_load = np.ones(num_hour, dtype=float) * 10000\n        return steam_load\nclass ResourceGet(object):\n    \"\"\"\n    \u83b7\u53d6\u5149\u7167\u8d44\u6e90\u3001\u7535\u4ef7\u3001\u71c3\u6c14\u4ef7\u683c\u3001\u84b8\u6c7d\u4ef7\u683c\n    \"\"\"\n    # \u5149\u7167\u8d44\u6e90,\u8d85\u8fc7\u4e00\u5e74\u7684,\u5c06\u4e00\u5e74\u6570\u636e\u8fdb\u884c\u91cd\u590d\n    # light intensity ranging from 0 to 1? not even reaching 0.3\n    def get_radiation(self, path: str, num_hour: int) -> np.ndarray:\n        \"\"\"\n        \u4ecenumpy\u4e8c\u7ef4\u6570\u5217\u6587\u4ef6\u52a0\u8f7d\u6bcf\u5c0f\u65f6\u5149\u7167\u8d44\u6e90,\u5982\u679c\u9700\u8981\u8d85\u8fc7\u4e00\u5e74\u5149\u7167\u8d44\u6e90\u6570\u636e,\u5c06\u7b2c\u4e00\u5e74\u6570\u636e\u8fdb\u884c\u91cd\u590d\u5806\u53e0\n        Args:\n            path (str): \u7528\u4e8e\u7ed9\u51fa\u5b8c\u6574\u7684\u6587\u4ef6\u8def\u5f84\n            num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n        Return:\n            intensityOfIllumination (np.array): \u9010\u5c0f\u65f6\u5149\u7167\u5f3a\u5ea6\u6570\u636e,\u6570\u7ec4\u5f62\u72b6\u4e3a`(num_hour,)`\n        \"\"\"\n        if os.path.exists(path):\n            raw_file = np.loadtxt(path, dtype=float)\n            radiation = raw_file[:, 0]\n            intensityOfIllumination1 = radiation\n            for loop in range(\n                1, math.ceil(num_hour / 8760)\n            ):  # if num_hour=24, then this is 1/365, we are not undergoing this process."
        },
        {
            "comment": "This code snippet defines functions for retrieving electricity and gas prices based on the number of hours in a day. It includes functions to get intensity of illumination, daily electricity price, and daily gas price. The code uses NumPy for array operations and handles exceptions when files do not exist.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":92-125",
            "content": "                intensityOfIllumination1 = np.concatenate(  # repeating the intensity of illumination if num_hour is longer than 8760\n                    (intensityOfIllumination1, radiation), axis=0\n                )\n            intensityOfIllumination2 = (\n                intensityOfIllumination1[0:num_hour] / 1000\n            )  # \u8f6c\u5316\u4e3akW, divide by one thousand\n            # also strip redundant data.\n            return intensityOfIllumination2  # shape: 1d array.\n        else:\n            raise Exception(\"File not extists.\")\n    def get_electricity_price(self, num_hour: int) -> np.ndarray:\n        \"\"\"\n        \u4e00\u5929\u4e0d\u540c\u5c0f\u65f6\u7684\u7535\u4ef7\n        Args:\n            num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n        Return:\n            \u5e38\u6570\u7535\u4ef7\u6570\u7ec4 \u6570\u7ec4\u5f62\u72b6\u662f`(num_hour,)` \u5143\u7d20\u5168\u4e3a`0.5`\n        \"\"\"\n        electricity_price = np.ones(num_hour, dtype=float) * 0.5\n        return electricity_price\n    def get_gas_price(self, num_hour: int) -> np.ndarray:\n        \"\"\"\n        \u4e00\u5929\u4e0d\u540c\u5c0f\u65f6\u7684\u71c3\u6c14\u4ef7\u683c\n        Args:\n            num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n        Return:\n            \u5e38\u6570\u71c3\u6c14\u4ef7\u683c\u6570\u7ec4 \u6570\u7ec4\u5f62\u72b6\u662f`(num_hour,)` \u5143 \u5143\u7d20\u5168\u4e3a`2.77`"
        },
        {
            "comment": "This code defines three methods for getting constant hourly prices for gas, municipal hot water, and municipal steam. It also includes a function for retrieving power, cooling, heating, and steam loads over time. These functions utilize numpy to create arrays of constant values.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":126-170",
            "content": "        \"\"\"\n        gas_price = np.ones(num_hour, dtype=float) * 2.77\n        return gas_price\n    def get_municipalHotWater_price(self, num_hour: int) -> np.ndarray:\n        \"\"\"\n        \u4e00\u5929\u4e0d\u540c\u5c0f\u65f6\u7684\u70ed\u6c34\u4ef7\u683c\n        Args:\n            num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n        Return:\n            \u5e38\u6570\u70ed\u6c34\u4ef7\u683c\u6570\u7ec4 \u6570\u7ec4\u5f62\u72b6\u662f`(num_hour,)` \u5143\u7d20\u5168\u4e3a`0.3`\n        \"\"\"\n        municipalHotWater_price = np.ones(num_hour, dtype=float) * 0.3\n        return municipalHotWater_price\n    def get_municipalSteam_price(self, num_h: int) -> np.ndarray:\n        \"\"\"\n        \u4e00\u5929\u4e0d\u540c\u5c0f\u65f6\u7684\u84b8\u6c7d\u4ef7\u683c\n        Args:\n            num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n        Return:\n            \u5e38\u6570\u84b8\u6c14\u4ef7\u683c\u6570\u7ec4 \u6570\u7ec4\u5f62\u72b6\u662f`(num_hour,)` \u5143\u7d20\u5168\u4e3a`0.3`\n        \"\"\"\n        municipalSteam = np.ones(num_h, dtype=float) * 0.3\n        return municipalSteam\ndef getPowerCoolHeatSteamLoads(num_hour: int):\n    \"\"\"\n    \u83b7\u53d6\u7535\u529b\u3001\u4f9b\u51b7\u3001\u4f9b\u70ed\u3001\u84b8\u6c7d\u8d1f\u8377\u6570\u636e\n    Args:\n        num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n    Return:\n        \u7535\u529b\u3001\u4f9b\u51b7\u3001\u4f9b\u70ed\u3001\u84b8\u6c7d\u8d1f\u8377\u6570\u636e\n    \"\"\"\n    load = LoadGet()\n    power_load = load.get_power_load(num_hour)\n    cool_load = load.get_power_load(num_hour)\n    heat_load = load.get_power_load(num_hour)"
        },
        {
            "comment": "The code retrieves intensity of illumination and resource prices for a given number of hours. It uses the ResourceGet class to get radiation data from a file, as well as electricity, gas, municipal hot water, and steam prices for the same number of hours. The results are returned as a tuple with five elements.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":171-211",
            "content": "    steam_load = load.get_power_load(num_hour)\n    return power_load, cool_load, heat_load, steam_load\nfrom typing import Union, List\ndef getResourceData(num_hour: int):\n    \"\"\"\n    \u83b7\u53d6\u5149\u7167\u3001\u80fd\u6e90\u4ef7\u683c\n    Args:\n        num_hour (int): \u4e00\u5929\u5c0f\u65f6\u6570\n    Return:\n        \u5149\u7167\u3001\u80fd\u6e90\u4ef7\u683c\n    \"\"\"\n    resource = ResourceGet()\n    # model_input\n    intensityOfIllumination: Union[np.ndarray, List] = resource.get_radiation(\n        \"jinan_changqing-hour.dat\", num_hour  # \u5149\u7167\u3001\u98ce\u901f\n    )\n    # what is the output? break here.\n    electricity_price0 = resource.get_electricity_price(num_hour)\n    gas_price0 = resource.get_gas_price(num_hour)\n    # TODO: \u6309\u9762\u79ef\u3001\u4eba\u6570\u8ba1\u4ef7\u70ed\u6c34\u6d88\u8017\n    municipalHotWater_price0 = resource.get_municipalHotWater_price(num_hour)\n    municipalSteam_price0 = resource.get_municipalSteam_price(num_hour)\n    return (\n        intensityOfIllumination,\n        electricity_price0,\n        gas_price0,\n        municipalHotWater_price0,\n        municipalSteam_price0,\n    )\nfrom integratedEnergySystemPrototypes import (\n    # IntegratedEnergySystem,\n    PhotoVoltaic,"
        },
        {
            "comment": "This code defines a function called \"electricSystemRegistration\" that registers devices for an electric system. It takes in parameters such as the number of hours, intensity of illumination, and a debug flag, and uses them to create instances of DieselEngine and PhotoVoltaic devices, registering their constraints. The code also imports Model from docplex.mp.model.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":212-264",
            "content": "    LiBrRefrigeration,\n    DieselEngine,\n    EnergyStorageSystem,\n    # EnergyStorageSystemVariable,\n    TroughPhotoThermal,\n    CombinedHeatAndPower,\n    GasBoiler,\n    ElectricBoiler,\n    Exchanger,\n    # AirHeatPump,\n    WaterHeatPump,\n    WaterCoolingSpiral,\n    DoubleWorkingConditionUnit,\n    TripleWorkingConditionUnit,\n    GeothermalHeatPump,\n    WaterEnergyStorage,\n    ElectricSteamGenerator,\n    # Linear_absolute,\n    CitySupply,\n    GridNet,\n    Linearization,\n)\nfrom docplex.mp.model import Model\ndef electricSystemRegistration(\n    model: Model,\n    num_hour: int,\n    intensityOfIllumination: np.ndarray,\n    day_node: int,\n    debug: bool = False,\n):\n    \"\"\" \"\"\"\n    # \u67f4\u6cb9\u53d1\u7535\u673a\n    dieselEngine = DieselEngine(\n        num_hour,\n        model,\n        device_count_max=320,\n        device_price=750,\n        running_price=2,\n        debug=debug,\n    )\n    dieselEngine.constraints_register()\n    # \u5149\u4f0f\n    photoVoltaic = PhotoVoltaic(\n        num_hour,\n        model,\n        device_count_max=5000,\n        device_price=4500,\n        intensityOfIllumination=intensityOfIllumination,"
        },
        {
            "comment": "This code sets up three devices: a diesel engine, a photovoltaic system, and a battery energy storage system. The battery energy storage system is used for energy storage and has constraints registered for it. Finally, the function returns these three devices.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":265-301",
            "content": "        efficiency=0.8,\n        device_name=\"PhotoVoltaic\",\n        debug=debug,\n        output_type=\"electricity\",\n    )\n    photoVoltaic.constraints_register()\n    # \u7535\u6c60\u50a8\u80fd\n    batteryEnergyStorageSystem = EnergyStorageSystem(\n        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=1800,\n        device_price_powerConversionSystem=250,\n        conversion_rate_max=2,\n        efficiency=0.9,\n        energy_init=1,\n        stateOfCharge_min=0,  # state of charge\n        stateOfCharge_max=1,\n        device_name=\"batteryEnergyStorageSystem\",\n        debug=debug,\n        input_type=\"electricity\",\n        output_type=\"electricity\",\n    )\n    # original: battery\n    batteryEnergyStorageSystem.constraints_register(\n        register_period_constraints=1, day_node=day_node\n    )\n    return dieselEngine, photoVoltaic, batteryEnergyStorageSystem\ndef steamSourcesRegistration(\n    model: Model,\n    num_hour: int,\n    intensityOfIllumination: np.ndarray,\n    # day_node: int,\n    electricity_price0: np.ndarray,"
        },
        {
            "comment": "This code initializes and registers three device types: TroughPhotoThermal, ElectricSteamGenerator, and CombinedHeatAndPower. Each device has specific parameters such as device count max, device price, efficiency, and constraints. The code ensures the devices are properly initialized and registered for use.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":302-341",
            "content": "    gas_price0: np.ndarray,\n    debug: bool = False,\n):\n    \"\"\" \"\"\"\n    # \u69fd\u5f0f\u5149\u70ed\u8bbe\u5907\n    troughPhotoThermal = TroughPhotoThermal(\n        num_hour,\n        model,\n        device_count_max=5000,\n        device_price=2000,\n        device_price_solidHeatStorage=1000,\n        intensityOfIllumination=intensityOfIllumination,\n        efficiency=0.8,\n        debug=debug,\n    )\n    troughPhotoThermal.constraints_register()\n    # \u7535\u7528\u84b8\u6c7d\u53d1\u751f\u5668\n    electricSteamGenerator = ElectricSteamGenerator(\n        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=200,\n        device_price_solidHeatStorage=200,  # gtxr? SolidHeatStorage\uff1f\n        electricity_price=electricity_price0*0, # use gridnet?\n        efficiency=0.9,\n        debug=debug,\n    )\n    electricSteamGenerator.constraints_register()\n    # \u70ed\u7535\u8054\u4ea7\u673a\u7ec4\n    combinedHeatAndPower = CombinedHeatAndPower(\n        num_hour,\n        model,\n        device_count_max=5,\n        device_price=2000,\n        gas_price=gas_price0,\n        rated_power=2000,\n        electricity_to_heat_ratio=1.2,  # dr? \u7535\u70ed?"
        },
        {
            "comment": "This code defines several types of steam generators and heat sources for a model, registers their constraints, and returns them. It includes troughPhotoThermal, electricSteamGenerator, combinedHeatAndPower, gasBoiler, and municipalSteam as hot water sources. The model, number of hours, intensity of illumination, day node, electricity price, and municipal hot water price are inputs for the function.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":342-387",
            "content": "        debug=debug,\n    )\n    combinedHeatAndPower.constraints_register()\n    # \u71c3\u6c14\u9505\u7089\n    gasBoiler = GasBoiler(\n        num_hour,\n        model,\n        device_count_max=5000,\n        device_price=200,\n        gas_price=gas_price0,\n        efficiency=0.9,\n        debug=debug,\n        output_type=\"steam\",\n    )\n    gasBoiler.constraints_register()\n    # \u5e02\u653f\u84b8\u6c7d\n    municipalSteam = CitySupply(\n        num_hour,\n        model,\n        device_count_max=5000,\n        device_price=3000,\n        running_price=0.3 * np.ones(num_hour),\n        efficiency=0.9,\n        device_name=\"municipalSteam\",\n        debug=debug,\n        output_type=\"steam\",\n    )\n    municipalSteam.constraints_register()\n    return (\n        troughPhotoThermal,\n        electricSteamGenerator,\n        combinedHeatAndPower,\n        gasBoiler,\n        municipalSteam,\n    )\ndef hotWaterSourcesRegistration(\n    model: Model,\n    num_hour: int,\n    intensityOfIllumination: np.ndarray,\n    day_node: int,\n    electricity_price0: np.ndarray,\n    municipalHotWater_price0: np.ndarray,"
        },
        {
            "comment": "This code initializes and registers three energy storage devices: a photovoltaic system for generating heat, a phase change hot water storage system for storing heat, and a municipal hot water supply. The systems are set up with specified parameters and the debug option is used to enable or disable debugging information.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":388-427",
            "content": "    gas_price0: np.ndarray,\n    debug: bool = False,\n):\n    \"\"\"\"\"\"\n    # \u5e73\u677f\u5149\u70ed\n    platePhotothermal = PhotoVoltaic(\n        num_hour,\n        model,\n        device_count_max=10000,\n        device_price=500,\n        intensityOfIllumination=intensityOfIllumination,\n        efficiency=0.8,\n        device_name=\"platePhotothermal\",\n        debug=debug,\n        output_type=\"hot_water\",\n    )  # platePhotothermal\n    platePhotothermal.constraints_register()\n    # \u76f8\u53d8\u84c4\u70ed\n    phaseChangeHotWaterStorage = EnergyStorageSystem(\n        num_hour,\n        model,\n        device_count_max=10000,\n        device_price=350,\n        device_price_powerConversionSystem=1000,  # free conversion?\n        conversion_rate_max=0.5,\n        efficiency=0.9,\n        energy_init=0,\n        stateOfCharge_min=0,\n        stateOfCharge_max=1,\n        device_name=\"phaseChangeHotWaterStorage\",\n        debug=debug,\n        input_type=\"hot_water\",\n        output_type=\"hot_water\",\n    )\n    phaseChangeHotWaterStorage.constraints_register()\n    # \u5e02\u653f\u70ed\u6c34\n    municipalHotWater = CitySupply("
        },
        {
            "comment": "This code initializes three hot water devices: municipalHotWater, hotWaterElectricBoiler, and gasBoiler_hotWater. It creates instances of ElectricBoiler and GasBoiler classes using similar parameters, registers constraints for each device, and assigns them to the respective variables.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":428-466",
            "content": "        num_hour,\n        model,\n        device_count_max=10000,\n        device_price=3000,\n        running_price=municipalHotWater_price0,\n        efficiency=0.9,\n        device_name=\"municipalHotWater\",\n        debug=debug,\n        output_type=\"hot_water\",\n    )\n    municipalHotWater.constraints_register()\n    # \u70ed\u6c34\u7535\u9505\u7089\n    hotWaterElectricBoiler = ElectricBoiler(  # connect to our powergrid.\n        num_hour,\n        model,\n        device_count_max=10000,\n        device_price=200,\n        electricity_price=electricity_price0 * 0,\n        efficiency=0.9,\n        device_name=\"hotWaterElectricBoiler\",\n        debug=debug,\n        output_type=\"hot_water\",\n    )\n    hotWaterElectricBoiler.constraints_register()\n    # \u71c3\u6c14\u70ed\u6c34\u5668\n    gasBoiler_hotWater = GasBoiler(\n        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=200,\n        gas_price=gas_price0,\n        efficiency=0.9,\n        device_name=\"gasBoiler_hotWater\",\n        debug=debug,\n        output_type=\"hot_water\",\n    )\n    gasBoiler_hotWater.constraints_register()"
        },
        {
            "comment": "The code is initializing a water storage tank for energy management. It registers constraints and returns several heat devices including plate photothermal, waterStorageTank, municipalHotWater, gasBoiler_hotWater, phaseChangeHotWaterStorage, hotWaterElectricBoiler. This is part of the cooletIceHeatDevicesRegistration function which takes in a model, number of hours, electricity price, and debug flag as parameters.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":468-508",
            "content": "    # \u6c34\u50a8\u80fd\u7f50\n    waterStorageTank = WaterEnergyStorage(\n        num_hour,\n        model,\n        volume_max=10000,\n        volume_price=300,\n        device_price_powerConversionSystem=1,\n        conversion_rate_max=0.5,\n        efficiency=0.9,\n        energy_init=1,\n        stateOfCharge_min=0,\n        stateOfCharge_max=1,\n        ratio_cold_water=10,\n        ratio_warm_water=10,\n        ratio_hot_water=20,\n        device_name=\"waterStorageTank\",\n        debug=debug,\n    )\n    waterStorageTank.constraints_register(\n        register_period_constraints=1, day_node=day_node\n    )\n    return (\n        platePhotothermal,\n        waterStorageTank,\n        municipalHotWater,\n        gasBoiler_hotWater,\n        phaseChangeHotWaterStorage,\n        hotWaterElectricBoiler,\n    )\ndef cooletIceHeatDevicesRegistration(\n    model: Model,\n    num_hour: int,\n    # intensityOfIllumination: np.ndarray,\n    # day_node: int,\n    electricity_price0: np.ndarray,\n    # municipalHotWater_price0: np.ndarray,\n    # gas_price0: np.ndarray,\n    debug: bool = False,"
        },
        {
            "comment": "This code defines and initializes multiple HVAC (Heating, Ventilation, and Air Conditioning) devices such as heat pumps, water source heat pumps, and water cooling spiral machines. These devices are created with specific parameters like maximum device count, price, electricity price, case ratios, and names. The code then registers the constraints for each device using the `constraints_register()` method.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":509-551",
            "content": "):\n    \"\"\"\"\"\"\n    # \u70ed\u6cf5\n    heatPump = WaterHeatPump(\n        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=1000,\n        electricity_price=electricity_price0*0,\n        case_ratio=np.array([1, 1, 1, 1]),  # total four cases?\n        device_name=\"heatPump\",\n        debug=debug,\n    )\n    heatPump.constraints_register()\n    # \u6c34\u6e90\u70ed\u6cf5\n    waterSourceHeatPump = WaterHeatPump(\n        num_hour,\n        model,\n        device_count_max=2000,\n        device_price=3000,\n        electricity_price=electricity_price0*0,\n        case_ratio=np.ones(4),\n        device_name=\"waterSourceHeatPump\",\n        debug=debug,\n    )\n    waterSourceHeatPump.constraints_register()\n    # \u6c34\u51b7\u87ba\u65cb\u673a\n    waterCoolingSpiralMachine = WaterCoolingSpiral(\n        num_hour,\n        model,\n        device_count_max=2000,\n        device_price=1000,\n        electricity_price=electricity_price0*0,\n        case_ratio=np.array([1, 0.8]),\n        debug=debug,\n    )\n    waterCoolingSpiralMachine.constraints_register()\n    # \u4e09\u5de5\u51b5\u673a\u7ec4\n    tripleWorkingConditionUnit = TripleWorkingConditionUnit("
        },
        {
            "comment": "Code creates different energy devices:\n1. TripleWorkingConditionUnit,\n2. DoubleWorkingConditionUnit,\n3. GroundSourceHeatPump, and\n4. IceStorage - EnergyStorageSystem.\nAll devices have specified attributes like num_hour, model, device_count_max, device_price, electricity_price (some with default 0), case_ratio, and debug. Each device registers its constraints after being created.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":552-591",
            "content": "        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=1000,\n        electricity_price=electricity_price0*0,\n        case_ratio=[1, 0.8, 0.8],\n        debug=debug,\n    )\n    tripleWorkingConditionUnit.constraints_register()\n    # \u53cc\u5de5\u51b5\u673a\u7ec4\n    doubleWorkingConditionUnit = DoubleWorkingConditionUnit(\n        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=1000,\n        electricity_price=electricity_price0*0,\n        case_ratio=[1, 0.8],\n        debug=debug,\n    )\n    doubleWorkingConditionUnit.constraints_register()\n    # \u5730\u6e90\u70ed\u6cf5\n    groundSourceHeatPump = GeothermalHeatPump(\n        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=40000,\n        electricity_price=electricity_price0*0,\n        debug=debug,\n    )\n    groundSourceHeatPump.constraints_register()\n    # \u7535\u6c60\uff1f\u4fdd\u9c9c\uff1f\u76f8\u53d8\uff1f\u51b0\u84c4\u80fd\uff1f\n    iceStorage = EnergyStorageSystem(  # what is this?\n        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=300,\n        device_price_powerConversionSystem=1,"
        },
        {
            "comment": "Code creates instances of EnergyStorageSystem for iceStorage, phaseChangeColdWaterStorage, and phaseChangeWarmWaterStorage devices. These devices are initialized with specified parameters like conversion rate, efficiency, energy, state of charge, device name, and input/output types. The constraints for each device are registered using the constraints_register() method. The code also includes a TODO comment to modify one instance to low-temperature water phase change storage.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":592-629",
            "content": "        conversion_rate_max=0.5,\n        efficiency=0.9,\n        energy_init=1,\n        stateOfCharge_min=0,\n        stateOfCharge_max=1,\n        device_name=\"iceStorage\",\n        debug=debug,\n        input_type=\"ice\",\n        output_type=\"cold_water\",\n    )\n    iceStorage.constraints_register()\n    # \u76f8\u53d8\u84c4\u51b7\n    phaseChangeColdWaterStorage = EnergyStorageSystem(\n        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=500,\n        device_price_powerConversionSystem=1,\n        conversion_rate_max=0.5,\n        efficiency=0.9,\n        energy_init=1,\n        stateOfCharge_min=0,\n        stateOfCharge_max=1,\n        device_name=\"phaseChangeColdWaterStorage\",\n        debug=debug,\n        input_type=\"cold_water_storage\",\n        output_type=\"cold_water\",\n    )\n    phaseChangeColdWaterStorage.constraints_register()\n    # TODO: \u4fee\u6539\u4e3a\uff1a\u4f4e\u6e29\u6c34 \u76f8\u53d8\u84c4\u70ed\n    phaseChangeWarmWaterStorage = EnergyStorageSystem(\n        num_hour,\n        model,\n        device_count_max=20000,\n        device_price=300,\n        device_price_powerConversionSystem=1,"
        },
        {
            "comment": "The code creates an instance of a phase change warm water storage device with specific parameters, registers its constraints, and returns other devices as part of a system.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/demo_utils.py\":630-652",
            "content": "        conversion_rate_max=0.5,\n        efficiency=0.9,\n        energy_init=1,\n        stateOfCharge_min=0,\n        stateOfCharge_max=1,\n        device_name=\"phaseChangeWarmWaterStorage\",\n        debug=debug,\n        input_type=\"warm_water_storage\",\n        output_type=\"warm_water\",\n    )\n    phaseChangeWarmWaterStorage.constraints_register()\n    return (\n        heatPump,\n        waterSourceHeatPump,\n        waterCoolingSpiralMachine,\n        tripleWorkingConditionUnit,\n        doubleWorkingConditionUnit,\n        groundSourceHeatPump,\n        iceStorage,\n        phaseChangeColdWaterStorage,\n        phaseChangeWarmWaterStorage,\n    )"
        }
    ]
}