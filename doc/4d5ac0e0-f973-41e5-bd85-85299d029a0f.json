{
    "summary": "The code initializes variables, creates a diesel generator object for microgrid design, checks topology, generates an EnergyFlowGraph, and calculates results and logs.",
    "details": [
        {
            "comment": "The code is reading wind speed and illumination data from a file, storing them in lists. The data represents hourly values for the year, and these will be used later in calculations. Depending on the DEBUG setting, it defines extraParams and datalen variables which are used in further calculations. It also initializes a list 'a' with 100 values repeated for each day of the year. Finally, it defines algoParam that specifies the calculation objective such as economic, environmental, or balanced, along with the time step for calculations.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/diesel_topo_check.py\":0-50",
            "content": "from log_utils import logger_print\nimport os\nos.environ[\"SKIP_ARGENV\"] = \"True\"\nos.environ[\"DOTENV\"] = \".test_microgrid_topo_env\"\nfrom config import *\n# import json\nfrom topo_check import *\nfrom ies_optim import *\nfrom export_format_validate import *\n# DEBUG = False\nDEBUG = True\ndata_fpath = \"./heatpump_code_reference/windspeed_and_illumination_8760.dat\"\nwindspeed = []  # m/s\nillumination = []  # W/m2 -> kW/m2\nwith open(data_fpath, \"r\") as f:\n    for line in f.readlines():\n        line = line.strip()\n        if line.startswith(\"#\"):\n            continue\n        dat = line.split()\n        if len(dat) == 4:\n            num_dat = [float(e) for e in dat]\n            windspeed.append(num_dat[3] + 4)\n            illumination.append(num_dat[1] / 1000)\nif DEBUG:\n    extraParams = dict(\n        \u5178\u578b\u65e5\u4ee3\u8868\u7684\u65e5\u671f=[1],\n        \u5178\u578b\u65e5=True,\n    )\n    datalen = 24\nelse:\n    extraParams = dict(\n        \u5178\u578b\u65e5=False,\n    )\n    datalen = 8760\na = [100] * datalen  # this is not random.\nalgoParam = \u8ba1\u7b97\u53c2\u6570(\n    \u8ba1\u7b97\u76ee\u6807=\"\u7ecf\u6d4e\",\n    # \u8ba1\u7b97\u76ee\u6807=\"\u7ecf\u6d4e_\u73af\u4fdd\",\n    # \u8ba1\u7b97\u76ee\u6807=\"\u73af\u4fdd\",\n    \u8ba1\u7b97\u6b65\u957f=\"\u5c0f\u65f6\","
        },
        {
            "comment": "The code is creating an instance of a diesel generator and its information for a microgrid design. It uses typical weather data, topology parameters, and device details to calculate the optimal placement and performance of the diesel generator in the system. The code also considers factors like wind speed, illumination, temperature, and depreciation rates in the design process.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/diesel_topo_check.py\":51-96",
            "content": "    # \u5178\u578b\u65e5\u4ee3\u8868\u7684\u65e5\u671f=[1, 2],\n    \u8ba1\u7b97\u7c7b\u578b=\"\u8bbe\u8ba1\u89c4\u5212\",\n    # \u98ce\u901f=windspeed,\n    # \u5149\u7167=illumination,\n    \u98ce\u901f=windspeed[:datalen],\n    \u5149\u7167=illumination[:datalen],\n    \u6c14\u6e29=a,\n    \u8d34\u73b0\u7387=9,\n    # \u8d34\u73b0\u7387=0.1,\n    # \u5e74\u5229\u7387=0.1,\n    **extraParams,\n).dict()\n# topo = \u62d3\u6251\u56fe()  # with structure?\ntopo = \u62d3\u6251\u56fe(**algoParam)  # with structure?\ndevParam = dict(\u751f\u4ea7\u5382\u5546=\"Any\", \u8bbe\u5907\u578b\u53f7=\"Any\")\n# devParam = dict(\u751f\u4ea7\u5382\u5546=\"Any\", \u8bbe\u5907\u578b\u53f7=\"Any\", \u8bbe\u5907\u540d\u79f0=\"Any\")\n\u67f4\u6cb91 = \u67f4\u6cb9(\n    topo,\n    param=\u67f4\u6cb9\u4fe1\u606f(\n        \u8bbe\u5907\u540d\u79f0=\"Any\",\n        Price=(9.2, \"\u5143/L\"),\n        \u70ed\u503c=(9.1667, \"kWh/L\"),\n        CO2=(2.583, \"kg/L\"),\n        NOX=(0.01, \"kg/L\"),\n        SO2=(0.01, \"kg/L\"),\n    ).dict(),\n    # param=\u67f4\u6cb9\u4fe1\u606f(\u8bbe\u5907\u540d\u79f0=\"Any\", Price=(10, \"L/\u5143\"), \u70ed\u503c=(10, \"MJ/L\"), CO2=(10, \"kg/L\")).dict(),\n)\np1 = \u67f4\u6cb9\u53d1\u7535\u4fe1\u606f(\n    **devParam,\n    \u8bbe\u5907\u540d\u79f0=\"\u67f4\u6cb9\u53d1\u75351\",\n    RatedPower=100,\n    unitPlanningAlgorithmSelection=\u6cb9\u8017\u89c4\u5212\u7b97\u6cd5.\u6700\u4f73,\n    PowerDeltaLimit=0.3,\n    PowerStartupLimit=10,\n    CostPerMachine=6,\n    CostPerYearPerMachine=0.1,\n    VariationalCostPerWork=0.1,\n    Life=15,\n    BuildCostPerMachine=0.2,\n    BuildBaseCost=0,\n    DieselToPower_Load=[\n        ("
        },
        {
            "comment": "This code defines a set of values for diesel generator parameters and creates a diesel generator object. It also sets the device count to 3 and creates a load object with a specific energy consumption pattern. The commented lines indicate possible alternative configurations for the load type and energy consumption values.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/diesel_topo_check.py\":97-164",
            "content": "            0.13,\n            29,\n        ),\n        (\n            0.145,\n            36,\n        ),\n        (\n            0.164,\n            43,\n        ),\n        (\n            0.18,\n            50,\n        ),\n        (\n            0.19,\n            57,\n        ),\n        (\n            0.21,\n            64,\n        ),\n        (\n            0.224,\n            71,\n        ),\n        (\n            0.238,\n            79,\n        ),\n        (\n            0.26,\n            86,\n        ),\n        (\n            0.294,\n            93,\n        ),\n        (\n            0.365,\n            100,\n        ),\n    ],\n    DeviceCount=(c := 3),\n    # DeviceCount=10,\n    MaxDeviceCount=c,\n    MinDeviceCount=c,\n).dict()\n# breakpoint()\n\u67f4\u6cb9\u53d1\u75351 = \u67f4\u6cb9\u53d1\u7535(\n    topo,\n    param=p1,\n)\nLOAD_E = \u7535\u8d1f\u8377(\n    topo,\n    param=\u7535\u8d1f\u8377\u4fe1\u606f(\n        **devParam,\n        \u8bbe\u5907\u540d\u79f0=\"\u7535\u8d1f\u83771\",\n        LoadType=\u8d1f\u8377\u7c7b\u578b.Normal,\n        # LoadType=\u8d1f\u8377\u7c7b\u578b.Flexible,\n        # Pmin=100,\n        # Pmax=500,\n        EnergyConsumption=[(100 * math.sin(i) + 300) * 0.3 for i in range(len(a))],\n        # EnergyConsumption=[400] * len(a),  # TODO: fix data retrieval bug"
        },
        {
            "comment": "The code defines a function create_connection_line, creates connections between different interfaces, checks the consistency of the topology, generates an EnergyFlowGraph (EFG), writes it to a file, and then calculates and logs the result. The code is related to diesel fuel generation and the topology of the system.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/diesel_topo_check.py\":165-203",
            "content": "        PriceModel=\u5e38\u6570\u7535\u4ef7(Price=1),\n    ).dict(),\n)\ndef \u521b\u5efa\u8fde\u63a5\u7ebf(left, right):\n    \u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u6bcd\u7ebf\", left, right)\n\u521b\u5efa\u8fde\u63a5\u7ebf(\u67f4\u6cb91.\u71c3\u6599\u63a5\u53e3, \u67f4\u6cb9\u53d1\u75351.\u71c3\u6599\u63a5\u53e3)\n\u521b\u5efa\u8fde\u63a5\u7ebf(\u67f4\u6cb9\u53d1\u75351.\u7535\u63a5\u53e3, LOAD_E.\u7535\u63a5\u53e3)\ntry:\n    topo.check_consistency()\nexcept Exception as e:\n    pass\nfrom fastapi_celery_functions import calculate_energyflow_graph_base\nimport os\nmdict = topo.to_json()\nimport json\nmdictList = [mdict]\n# breakpoint()  # error while reloading params\nEFG = EnergyFlowGraph(mDictList=mdictList, residualEquipmentLife=2)  # override default.\nwith open(\"diesel_topo_check_test_input.json\", \"w+\") as f:\n    json.dump(EFG.dict(), f)\nret = calculate_energyflow_graph_base(EFG.dict())\nlogger_print(ret)\nif ret:\n    with open(saved_path := \"diesel_test_output_full.json\", \"w+\") as f:\n        f.write(json.dumps(ret, ensure_ascii=False, indent=4))\n    logger_print(f\"dumped to: {saved_path}\")"
        }
    ]
}