{
    "summary": "This code defines classes for microgrid objects, stores calculation details, and ensures error avoidance in the `ParetoCurve` class. It includes a `CalculationResult` class for single-calculation results, an incomplete `EnergyFlowGraph` class, and subclasses `CalculationAsyncResult` and `RevokeResult`.",
    "details": [
        {
            "comment": "This code is importing necessary modules and defining a class called \"Curve\" using Pydantic's BaseModel. The Curve class has an x attribute (List[str]) for x-axis data, y attribute (List[float]) for y-axis data, and a validator function to validate the input list of strings for the x attribute. The code also includes imports from other modules such as networkx, constants, and ies_optim.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_datamodel_template.py\":0-39",
            "content": "from log_utils import logger_print\nfrom pydantic import BaseModel, Field, validator, confloat\nfrom networkx.readwrite import json_graph\nfrom typing import Mapping, List, Tuple, Union, Dict, Any\nimport networkx\nfrom constants import *\ntry:\n    from typing import Literal\nexcept:\n    from typing_extensions import Literal\ntry:\n    from typing import assert_never\nexcept:\n    from typing_extensions import assert_never\n# from celery.states import PENDING, RECEIVED, STARTED, SUCCESS, FAILURE, RETRY, REVOKED\n# question: how to convert pydantic models to json?\n# to json: json.dumps(model.dict())\n# from ies_optim import EnergyFlowGraph, \u4eff\u771f\u7ed3\u679c, \u89c4\u5212\u7ed3\u679c\u8be6\u60c5, \u89c4\u5212\u65b9\u6848\u6982\u89c8\nfrom ies_optim import *\nclass \u66f2\u7ebf(BaseModel):\n    x: List[str] = Field(title=\"x\u8f74\u6570\u636e\")\n    y: List[float] = Field(title=\"y\u8f74\u6570\u636e\")\n    @validator(\"x\")\n    def validate_x(cls, x: List[str]):\n        \"\"\"\n        Validate the input list of strings `x` and return the validated list.\n        Args:\n            cls: The class of the validator.\n            x (List[str]): The input list of strings to be validated."
        },
        {
            "comment": "The code defines several classes representing objects related to a microgrid. It includes classes for output curves, devices with output curves, and objective results. The output curve class contains properties like title, abbreviation, and curve data. The device output curve class has properties for name and a list of output curves. Finally, the ObjectiveResult class stores financial, environmental objectives along with an adder error.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_datamodel_template.py\":41-75",
            "content": "        Returns:\n            List[str]: The validated list of strings.\n        Raises:\n            Exception: If the input list `x` is not valid.\n        \"\"\"\n        suffixMapping = {\u4e24\u5c0f\u65f6\u79d2\u6570: \"\u79d2\", \u6bcf\u5e74\u5c0f\u65f6\u6570: \"\u65f6\"}\n        for suffix in suffixMapping.values():\n            if x[0].endswith(suffix):\n                return x\n        len_x = len(x)\n        if len_x in suffixMapping.keys():\n            suffix = suffixMapping[len_x]\n            x = [e + suffix for e in x]\n            return x\n        else:\n            raise Exception(\"Non-standard x array length:\", len_x)\nclass \u51fa\u529b\u66f2\u7ebf(BaseModel):\n    name: str = Field(title=\"\u51fa\u529b\u66f2\u7ebf\u6807\u9898\")\n    # device_name: str = Field(title = \"\u8bbe\u5907\u540d\u79f0\")\n    abbr: str = Field(title=\"\u51fa\u529b\u66f2\u7ebf\u7f29\u5199\")\n    data: \u66f2\u7ebf = Field(title=\"\u66f2\u7ebf\u6570\u636e\")\nclass \u8bbe\u5907\u51fa\u529b\u66f2\u7ebf(BaseModel):\n    name: str = Field(title=\"\u8bbe\u5907\u540d\u79f0\")\n    plot_list: List[\u51fa\u529b\u66f2\u7ebf] = Field(title=\"\u51fa\u529b\u66f2\u7ebf\u5217\u8868\")\nclass ObjectiveResult(BaseModel):\n    financialObjective: float = Field(title=\"\u7ecf\u6d4e\u76ee\u6807\u503c\")\n    environmentalObjective: float = Field(title=\"\u73af\u4fdd\u76ee\u6807\u503c\")\n    adderError: float = Field(title=\"\u52a0\u6cd5\u5668\u8bef\u5dee\")"
        },
        {
            "comment": "This code defines a class named \"\u5355\u6b21\u8ba1\u7b97\u7ed3\u679c\" that represents the results of a single computation. It includes fields for objective result, planning result table, planning summary, performance data list, and simulation result table. The fields contain various types of information related to calculations such as financial and environmental objectives, planning details, device output curves, and simulation results.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_datamodel_template.py\":78-110",
            "content": "class \u5355\u6b21\u8ba1\u7b97\u7ed3\u679c(BaseModel):\n    objectiveResult: ObjectiveResult = Field(\n        title=\"\u8ba1\u7b97\u76ee\u6807\u503c\u7ed3\u679c\",\n        description=\"\u5b58\u653e\u4f8b\u5982\u7ecf\u6d4e\u76ee\u6807\u503c\u3001\u73af\u4fdd\u76ee\u6807\u503c\u7684\u8ba1\u7b97\u7ed3\u679c\",\n        example={\"financialObjective\": 2000, \"environmentalObjective\": 3000},\n    )\n    planningResultTable: List[\u89c4\u5212\u7ed3\u679c\u8be6\u60c5_\u7ffb\u8bd1] = Field(\n        title=\"\u89c4\u5212\u7ed3\u679c\u8be6\u60c5\u5217\u8868\", description=\"\u65b9\u6848\u5185\u5404\u673a\u7ec4\u4fe1\u606f\"\n    )\n    planningSummary: \u89c4\u5212\u65b9\u6848\u6982\u89c8_\u7ffb\u8bd1 = Field(title=\"\u89c4\u5212\u65b9\u6848\u6982\u89c8\", description=\"\u5305\u62ec\u65b9\u6848\u7c7b\u578b\uff0c\u65b9\u6848\u603b\u53c2\u6570\u7b49\u7b49\")\n    performanceDataList: List[\u8bbe\u5907\u51fa\u529b\u66f2\u7ebf] = Field(\n        title=\"\u8bbe\u5907\u51fa\u529b\u66f2\u7ebf\u5217\u8868\",\n        description=\"\u6bcf\u4e2a\u8bbe\u5907\u9010\u6b65\u957f\u51fa\u529b\u60c5\u51b5\",\n        example=[\n            {\n                \"name\": \"Any\",\n                \"plot_list\": [\n                    {\n                        \"name\": \"plotName\",\n                        \"abbr\": \"plotAbbr\",\n                        \"data\": {\"x\": [], \"y\": []},\n                    }\n                ],\n            }\n        ],\n    )\n    simulationResultTable: List[\u4eff\u771f\u7ed3\u679c] = Field(\n        title=\"\u4eff\u771f\u7ed3\u679c\u5217\u8868\",\n        example=[\n            {\n                \"name\": \"Any\",\n                \"modelNumber\": \"Any\",\n                \"equiCounts\": 1,"
        },
        {
            "comment": "This code defines a ParetoCurve class with x and y as lists of float values, and x_label and y_label as strings. The default values are provided for each attribute. Check if any \"Field\" is using the \"default\" positional argument to avoid potential errors.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_datamodel_template.py\":111-144",
            "content": "                \"coolingCapacity\": 1,\n                \"coolingLoad\": 1,\n                \"electricSupply\": 1,\n                \"electricLoad\": 1,\n                \"heatingLoad\": 1,\n                \"heatLoad\": 1,\n                \"steamProduction\": 1,\n                \"steamLoad\": 1,\n                \"hydrogenProduction\": 1,\n                \"hydrogenConsumption\": 1,\n                \"dieselConsumption\": 1,\n                \"dieselConsumptionCosts\": 1,\n                \"naturalGasConsumption\": 1,\n                \"naturalGasConsumptionCosts\": 1,\n                \"averageEfficiency\": 1,\n                \"equipmentMaintenanceCosts\": 1,\n                \"coldIncome\": 1,\n                \"hotIncome\": 1,\n                \"eletricncome\": 1,\n                \"steamIncome\": 1,\n                \"hydrogenIncome\": 1,\n            }\n        ],\n    )\n# class ParetoCurve(BaseModel):\n#     x: List[float]\n#     x_label: str\n#     y: List[float]\n#     y_label: str\n# you need to check if any \"Field\" is using \"default\" positional argument, which might leads to error."
        },
        {
            "comment": "The code defines a class `CalculationResult` for storing the result of a calculation, including a list of single-calculation results, residual equipment annual factor, success status, and error log. It also includes a comment about an `EnergyFlowGraph` class that is not fully defined in this code snippet. The graph represents energy flow topology for both simulation and optimization, requiring different parameter models and variable definitions. The examples provided demonstrate the differences in required parameters between modeling simulation and planning design.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_datamodel_template.py\":145-176",
            "content": "class CalculationResult(BaseModel):\n    resultList: List[\u5355\u6b21\u8ba1\u7b97\u7ed3\u679c]\n    # paretoCurve: Union[None, ParetoCurve] = None\n    residualEquipmentAnnualFactor: confloat(ge=0) = Field(\n        default=0, title=\"\u8f85\u52a9\u8bbe\u5907\u5e74\u5316\u7cfb\u6570\", description=\"\u4eff\u771f\u6a21\u62df\u662f0\uff0c\u8bbe\u8ba1\u89c4\u5212\u4e3a\u975e0\"\n    )\n    success: bool\n    error_log: str\n# class EnergyFlowGraph(BaseModel):\n#     \"\"\"\n#     \u7528\u4e8e\u4eff\u771f\u548c\u4f18\u5316\u8ba1\u7b97\u7684\u80fd\u6d41\u62d3\u6251\u56fe\uff0c\u4eff\u771f\u548c\u4f18\u5316\u6240\u9700\u8981\u7684\u53c2\u6570\u6a21\u578b\u548c\u53d8\u91cf\u5b9a\u4e49\u4f1a\u6709\u6240\u4e0d\u540c\u3002\n#     \"\"\"\n#     graph: Mapping = Field(\n#         title=\"\u80fd\u6d41\u62d3\u6251\u56fe\u7684\u9644\u52a0\u5c5e\u6027\",\n#         description=\"\u4eff\u771f\u548c\u4f18\u5316\u6240\u9700\u7684\u6a21\u578b\u53c2\u6570\u5b57\u5178\",\n#         examples=dict(\n#             \u5efa\u6a21\u4eff\u771f=dict(\n#                 summary=\"\u5efa\u6a21\u4eff\u771f\u6240\u9700\u53c2\u6570\",\n#                 description=\"\u5efa\u6a21\u4eff\u771f\u9700\u8981\u77e5\u9053\u4eff\u771f\u6b65\u957f\u548c\u8d77\u59cb\u65f6\u95f4\",\n#                 value={\n#                     \"\u6a21\u578b\u7c7b\u578b\": \"\u5efa\u6a21\u4eff\u771f\",\n#                     \"\u4eff\u771f\u6b65\u957f\": 60,\n#                     \"\u5f00\u59cb\u65f6\u95f4\": \"2023-3-1\",  # shall you parse this into `datetime.datetime`\n#                     \"\u7ed3\u675f\u65f6\u95f4\": \"2024-3-1\",\n#                 },\n#             ),\n#             \u89c4\u5212\u8bbe\u8ba1=dict(\n#                 summary=\"\u89c4\u5212\u8bbe\u8ba1\u6240\u9700\u53c2\u6570\",\n#                 description=\"\u89c4\u5212\u8bbe\u8ba1\u4e0d\u9700\u8981\u77e5\u9053\u4eff\u771f\u6b65\u957f\u548c\u8d77\u59cb\u65f6\u95f4,\u4f1a\u6839\u636e\u4e0d\u540c\u4f18\u5316\u6307\u6807\u4e8b\u5148\u5168\u90e8\u8ba1\u7b97\uff0c\u4e0d\u9700\u8981\u5728\u6b64\u6307\u51fa\","
        },
        {
            "comment": "This code defines a class with properties \"nodes\" and \"adjacency\", representing nodes and edges in a graph respectively. It also includes a method, \"to_graph\", which converts the object to a NetworkX graph and optionally handles directed graphs.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_datamodel_template.py\":177-207",
            "content": "#                 value={\"\u6a21\u578b\u7c7b\u578b\": \"\u89c4\u5212\u8bbe\u8ba1\"},\n#             ),\n#         ),\n#     )\n#     nodes: List[Mapping] = Field(\n#         title=\"\u8282\u70b9\",\n#         description=\"\u7531\u6240\u6709\u8282\u70b9ID\u548c\u5c5e\u6027\u5b57\u5178\u7ec4\u6210\u7684\u5217\u8868\",\n#         example=[\n#             {\"id\": \"a\", \"node_type\": \"load\"},\n#             {\"id\": \"b\", \"node_type\": \"device\"},\n#             {\"id\": \"c\", \"node_type\": \"load\"},\n#             {\"id\": \"d\", \"node_type\": \"port\", \"port_type\": \"AC\"},\n#             {\"id\": \"e\", \"node_type\": \"port\", \"port_type\": \"AC\"},\n#             {\"id\": \"f\", \"node_type\": \"port\", \"port_type\": \"AC\"},\n#         ],\n#     )\n#     adjacency: List[List[Mapping]] = Field(\n#         title=\"\u8fb9\",\n#         description=\"\u7531\u80fd\u6d41\u56fe\u4e2d\u8282\u70b9\u4e92\u76f8\u8fde\u63a5\u7684\u8fb9\u7ec4\u6210\u7684\u5217\u8868\",\n#         example=[\n#             [{\"id\": \"b\"}, {\"id\": \"d\"}],\n#             [{\"id\": \"a\"}, {\"id\": \"e\"}],\n#             [{\"id\": \"c\"}, {\"id\": \"f\"}],\n#             [{\"id\": \"d\"}, {\"id\": \"e\"}],\n#             [{\"id\", \"d\"}, {\"id\": \"f\"}],\n#         ],\n#     )\n#     def to_graph(self, directed=False) -> networkx.Graph:\n#         \"\"\"\n#         \u8f93\u51fa`networkx`\u8ba1\u7b97\u56fe"
        },
        {
            "comment": "Function defines a method to return a NetworkX graph object from the data stored in self.graph.\nCalculationAsyncSubmitResult is a model for asynchronous calculation submission results with calculation_id and submit_result fields.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_datamodel_template.py\":209-254",
            "content": "#         Arguments:\n#             directed (bool): \u662f\u5426\u8fd4\u56de\u6709\u5411\u56fe\n#         Returns:\n#             G (Graph): `networkx`\u8ba1\u7b97\u56fe\n#         \"\"\"\n#         graph: List[Tuple] = [(k, v) for k, v in self.graph.items()]\n#         graph_dict = dict(\n#             directed=directed,\n#             multigraph=False,\n#             graph=graph,\n#             nodes=self.nodes,\n#             adjacency=self.adjacency,\n#         )\n#         G = json_graph.adjacency_graph(graph_dict, directed=directed)\n#         return G\nclass CalculationAsyncSubmitResult(BaseModel):\n    \"\"\"\n    \u5f02\u6b65\u8ba1\u7b97\u63d0\u4ea4\u7ed3\u679c\u8fd4\u56de\u7c7b\n    \"\"\"\n    calculation_id: Union[None, str] = Field(\n        description=\"\u5982\u679c\u6210\u529f\u6ce8\u518c\u8ba1\u7b97\u4efb\u52a1\uff0c\u8fd4\u56deID\uff0c\u5426\u5219\u4e3a\u7a7a\", title=\"\u8ba1\u7b97ID\"\n    )\n    submit_result: Literal[\"success\", \"failed\"] = Field(\n        description='\u5982\u679c\u6210\u529f\u63d0\u4ea4\uff0c\u8fd4\u56de\"success\"\uff0c\u5426\u5219\u8fd4\u56de\"failed\"', title=\"\u63d0\u4ea4\u7ed3\u679c\"\n    )\nclass CalculationStateResult(BaseModel):\n    \"\"\"\n    \u5305\u542b\u8ba1\u7b97\u4efb\u52a1\u72b6\u6001\u7684\u6570\u636e\u7c7b\n    \"\"\"\n    calculation_state: Literal[\n        None,\n        \"PENDING\",\n        \"RECEIVED\",\n        \"STARTED\",\n        \"SUCCESS\",\n        \"FAILURE\",\n        \"RETRY\","
        },
        {
            "comment": "This code defines two classes, `CalculationAsyncResult` and `RevokeResult`, which inherit from a base class called `CalculationStateResult`. Both classes have specific fields that represent the status and results of a calculation task. The `CalculationAsyncResult` has a field for the calculation result, which can be either null if the calculation is not yet complete or does not exist, or an instance of `CalculationResult` if it exists. The `RevokeResult` class has a field that stores the result of a task revocation attempt, either \"success\" or \"failed\".",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_datamodel_template.py\":255-279",
            "content": "        \"REVOKED\",\n        \"NOT_CREATED\",\n    ] = Field(description=\"Celery\u5185\u7f6e\u4efb\u52a1\u72b6\u6001\uff0c\u5982\u679c\u662fnull\u5219\u8868\u793a\u4e0d\u5b58\u5728\u8be5\u4efb\u52a1\", title=\"\u8ba1\u7b97\u4efb\u52a1\u72b6\u6001\")\n# would you transfer this thing over celery, or you need to build it?\n# i'd rather build it.\nclass CalculationAsyncResult(CalculationStateResult):\n    \"\"\"\n    \u5f02\u6b65\u8ba1\u7b97\u4efb\u52a1\u67e5\u8be2\u8fd4\u56de\u7ed3\u679c\n    \"\"\"\n    calculation_result: Union[None, CalculationResult] = Field(\n        description=\"\u5982\u679c\u6ca1\u6709\u8ba1\u7b97\u5b8c\u6216\u8005\u4e0d\u5b58\u5728\u8fd4\u56de\u7a7a\uff0c\u5426\u5219\u8fd4\u56de\u8ba1\u7b97\u7ed3\u679c\u5b57\u5178\", title=\"\u8ba1\u7b97\u7ed3\u679c\"\n    )\nclass RevokeResult(CalculationStateResult):\n    \"\"\"\n    \u64a4\u9500\u8fd4\u56de\u7ed3\u679c\n    \"\"\"\n    revoke_result: Literal[\"success\", \"failed\"] = Field(\n        description='\u5982\u679c\u6210\u529f\u64a4\u9500\u4efb\u52a1\uff0c\u8fd4\u56de\"success\"\uff0c\u5426\u5219\u8fd4\u56de\"failed\"', title=\"\u64a4\u9500\u7ed3\u679c\"\n    )"
        }
    ]
}