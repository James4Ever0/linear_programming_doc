{
    "summary": "The Python-based microgrid system utilizes IESLang, provides dependencies and configurations for tasks, generates model code, prepares tests and API definitions, and includes utility scripts and language specifications.",
    "details": [
        {
            "comment": "This code directory contains a microgrid algorithm service, with the main objective of modeling an IES (Integrated Energy System) and optimizing its operation. The user can define the topology by adding loads, grids, energy sources, and generators. The modeling language used is \"IESLang\". The code also includes a file for passwords (passwords.py), a script to launch Docker (docker_launch.py), and describes public APIs in openapi.json. To set up the service, install dependencies and run 'make' under the base directory.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/README.md\":0-34",
            "content": "# Microgrid Algorithm Service\nThe main objective of this directory is to model an IES system and optimize its operation.\nUser defines topology, in which devices such as loads, grids, energy sources and generators are.\nInputs and outputs follow a standard format. Modeling language \"IESLang\" is used to describe the system.\n## \"passwords.py\"\nThis file is ignored by default. Should you create this under `./passwords.py` and `./microgrid_server_release/server/passwords.py`.\nExample content:\n```python\nfrom log_utils import logger_print\nredis_password = ''\n```\n## \"docker_launch.py\"\nJust run this file by `python3 docker_launch.py` and service will be created under `http://localhost:9870`.\nAttach container by `docker container attach <container_id>`.\n## \"openapi.json\"\nThis file describe public APIs of the algorithm server. You can load this file using Postman/Apifox.\nTo acquire this file, run `curl -O <server_end_point>/openapi.json`.\n## Usage\nThe easiest way for setting this up is by installing all dependencies and then invoke `make` under base directory."
        },
        {
            "comment": "This code provides instructions for setting up a Python-based microgrid system, specifying the necessary software installations and configurations. It includes details on dependencies, system requirements, and guidance on making modifications to avoid issues with generated files. Additional resources are provided for learning about Pyomo, which seems to be an essential component of the system.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/README.md\":36-55",
            "content": "On different system you may need to modify code in `Makefile` to ensure correct dependency resolution.\nInstall CPLEX and Anaconda (for environment management) on your system. Do not use non-Linux OSes for deployment since they do not support `tmux`.\nMinimum Python version is `3.9`.\nInstall Python dependencies by `pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt`.\nTo run `celery`, you need to install and run `redis-server` and `rabbitmq-server`.\n## Developing\nIf some files are generated by templates, do not modify them. Instead, find related \".j2\" files and modify it, then invoke `make test` under base directory, to ensure your modification is not making more troubles.\nFor more info on Pyomo, please check [this tutorial](https://www.shangyexinzhi.com/article/5385476.html), [github repo](https://github.com/WenYuZhi/PyomoTutorial) or [official docs](https://pyomo.readthedocs.io/en/stable/index.html).\n## Roadmap\n* [x] create algorithm service\n* [x] parse input parameters from excel"
        },
        {
            "comment": "The code snippet provided is a list of tasks that need to be completed for the microgrid_base project. Tasks include creating a name mapping table, defining port types and connectivity matrix, generating model code using Jinja2 templating language and macros, preparing generative tests, and type checking undefined variables. The remaining task is to define and parse *.ies DSL files. Additionally, there are various Python files listed for their specific functions in the project, such as ies_optim.py.j2 which generates the main model code, and Jinja_utils.py for reading and rendering templates.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/README.md\":56-73",
            "content": "* [x] create name mapping table\n* [x] define port types and connectivity matrix\n* [x] generate model code using jinja2 and macros\n* [x] prepare generative tests\n* [x] type check undefined variables\n* [ ] define and parse `*.ies` DSL files\n## File Structure\n- Makefile: main makefile for code generation, define build dependencies, handles and share environment variables across submake sessions.\n- ies_optim.py.j2: template for generating main model code\n- jinja_utils.py: utils for reading and rendering template, testing and formatting generated code\n- type_system_v2.py: topology type system generation\n- parse_params.py: shared params for code generation\n- parse_frontend_sim_param_translation.py: parse `.js` file and generate export table header translation map\n- parse_export_format.py: generate `export_format_validate.py`\n- parse_optim_constraints.py: generate `constraints.log` (which contains all constraints used in model) by parsing `ies_optim.py`\n- parse_units_and_names.py: generate `microgrid_jinja_param_base.py` used for input datastructure and unit definitions in `ies_optim.py`"
        },
        {
            "comment": "This codebase contains a microgrid server release for service distribution. It includes constant definitions in `constants_en.txt`, modified unit definitions in `merged_units.txt` used by the \"pint\" package, setup scripts for the server in `init`, Python requirements file `requirements.txt`, and various files for server code implementation. The code includes validation and data export functions, schema for data exchange, and a FastAPI server that defines APIs. Additional scripts are present for finding and killing previous algorithm services, launching the service, and creating tmux sessions.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/README.md\":74-89",
            "content": "- microgrid_server_release: for service distribution\n    - constants_en.txt: constants definitions imported by merged_units.txt\n    - merged_units.txt: modified unit definitions used by package \"pint\"\n    - init: setup scripts for server (incomplete)\n        - init.sh: bash setup script\n        - requirements.txt: python requirements file\n    - server: main server code\n        - export_format_validate.py: validate and export data to output\n        - export_format.json: used by `solve_model.py` for data validation\n        - expr_utils.py: for analyzing expressions in exceptions\n        - fastapi_celery_server.py: celery worker for model solving\n        - fastapi_datamodel_template.py: data exchange schema for api\n        - fastapi_server_template.py: fastapi server code, which defines apis\n        - fastapi_terminate_service.sh: for finding and killing previous algorithm service (for restart)\n        - fastapi_tmuxp.sh: launching service by creating four panes in one tmux session\n        - fastapi_tmuxp.yml: config file read by tmuxp, used to create tmux session"
        },
        {
            "comment": "This codebase contains various files for a microgrid optimization project, including model definition and implementation (ies_optim.py), unit conversion utilities (unit_utils.py), and test cases (test_json_input_format.py, test_topo_check.py) to validate the input data format, topology consistency, and model solving capabilities. The code also includes example API input data format (template_input.json) and utilities for constructing model topology (topo_check.py). Additionally, there is a file for password storage (passwords.py) used by `fastapi_celery_server.py` and a file for frontend parameter translation (frontend_sim_param_translation.json). The codebase also contains test cases for problematic data (test/sample_data), shared fixtures used by the model testing (common_fixtures.py), and an unfinished C file.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/README.md\":90-102",
            "content": "        - frontend_sim_param_translation.json: translate Chinese table headers into predefined terms for output\n        - ies_optim.py: model definition and implementation\n        - passwords.py: stores password for redis, used by `fastapi_celery_server.py`\n        - solve_model.py: receive input as model specification, invoke optimization session and create results.\n        - template_input.json: example api input data format\n        - test_json_input_format.py: test reading file for input data, checking topology consistency, model solving and data exporting\n        - test_topo_check.py: test using code to construct model topology as input data and check topology consistency, model solving and data exporting\n        - topo_check.py: utils for constructing model topology and checking\n        - unit_utils.py: utils for unit conversion\n- test: code for testing\n    - sample_data: stores data which might causes problem to system\n    - common_fixtures.py: shared fixtures used by `test_model.py`\n    - c"
        },
        {
            "comment": "The code mentions different Python files and their purposes within the project. `common_fixtures.py.j2` is a code template for generating input data fixtures, while `conic_problem.py` experimentally solves nonlinear objectives using numpy. `dev_info_tmp_gen.py` reads the template and generates a temporary file. `generate_test_model.py` generates test models by reading a template file. `Makefile` is a test makefile for easy construction. `dsl_parser` includes experimental parsing and code generation tools, such as functional execution mechanisms and IESLang related build tasks.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/README.md\":102-114",
            "content": "ommon_fixtures.py.j2: code template which uses `ies_optim.py` for generating input data fixtures to `common_fixtures.py.tmp`\n    - common_fixtures.py.tmp: template generation target, used as reference while writing `common_fixtures.py`\n    - conic_problem.py: experiment on solving fictional optimization nonlinear objectives using numpy\n    - dev_info_tmp_gen.py: reading `common_fixtures.py.j2` and generate `.tmp` target\n    - generate_test_model.py: reading `test_model.py.j2` and generate `test_model.py`\n    - test_model.py: test code for main model code\n    - Makefile: test makefile for easy construction by specifying build dependencies\n- dsl_parser: IESLang parser and code generator\n    - functional_base.py: experimental functional exeucution mechanism\n    - functional_base.py.j2: for generating functional_base.py.j2\n    - generate_code.py: for reading functional_base.py.j2 and generate python code\n    - lex_yacc.py: for tokenizing and parsing IESLang code (experiment)\n    - Makefile: define IESLang related build tasks"
        },
        {
            "comment": "This code chunk represents various files and folders involved in the microgrid base project. It includes the IESLang language specification, a legacy language specification file, Python scripts for calculating variable bounds and parsing, LP files with Chinese characters, and files for debugging CPLEX solver. Additionally, there are frontend conversion format files, including input template processing, sample data, and error handling scripts.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/README.md\":115-129",
            "content": "    - mylang.ies: IESLang language specification\n    - mylang.txt: legacy language specification\n    - pyomo_reduce_ineqalities.py: for calculating variable bounds from a system of ineqality expressions, used by iesl\n    - yacc_init.py: experimencal parser\n    - your_model_name.lp: experimental model export as lp files which contains Chinese charactors\n    - \u67f4\u6cb9.ies: diesel power generator model written in IESLang language\n- cplex_convex_debug: test files for debugging cplex solver\n    - init.sh: for moving `*.lp` files to this directory.\n- frontend_convert_format: convert non-standard frontend data into standard model specification format, used by frontend\n    - customToolbar.vue: code used by frontend, which includes logics for input data construction\n    - cvt.js: non-standard input format conversion\n    - error_cvt.js: error message handling (translation)\n    - input_template_processed.json: example input template\n    - sample_parse.json: partial cleaned non-standard input data\n    - sample.json: raw non-standard input data"
        },
        {
            "comment": "This code chunk lists various files and their purposes within the project. It includes a logging directory, makefile for OS detection, Ninja file generation, package experiments, template files, pytest files with different features, and buffer mechanism for conda stdout.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/README.md\":130-143",
            "content": "- logs: directory reserved for logging\n    - .log: need to be touched in order to preserve this directory in release archive `release.7z`\n- makefile_ninja_pytest_incremental_test\n    - platform_detect_makefile: for detecting different os using makefile\n        - Makefile: os detect implementation\n    - construct_ninja_file.py: using package \"ninja_syntax\" to generate ninja.build file\n    - dodo.py: experiment of package \"pydo\"\n    - generic.py: python type system experiment\n    - lfnf.py: pytest file used for testing pytest \"-lfnf\" commandline flag\n    - Makefile.j2: test jinja template for generating Makefile\n    - mytest.py: pytest file using type hints and request fixture\n    - test_buffer.py: infinite loop for conda stdout buffer mechanism\n    - type_check.py: multiple experiments of python type system\n    - typecheck.py: static condition exhausitiveness check"
        }
    ]
}