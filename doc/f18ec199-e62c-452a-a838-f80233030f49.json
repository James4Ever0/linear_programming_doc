{
    "summary": "This code utilizes Pint for unit conversions, defining new units, and handling invalid characters. It tests unit compatibility, converts to base units, and prints references.",
    "details": [
        {
            "comment": "Code imports the pint library for unit conversions, defines custom units, and performs calculations with them. It demonstrates creating a UnitRegistry, defining new units, converting between units, and handling invalid characters.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_unit_conversions_test.py\":0-37",
            "content": "# there involves multiplication, division, scale factors.\nimport pint\n# similar projects: https://pint.readthedocs.io/en/stable/getting/faq.html\nureg = pint.UnitRegistry()\na = 1 * ureg.cm\nprint(a)  # centimeter?\n# either load from definition file or just here.\n# https://pint.readthedocs.io/en/stable/advanced/defining.html\nureg.define(\"\u5143 = [currency]\")\nureg.define(\"dollar = 7 \u5143\")\nureg.define(\"\u767e- = 100\")\nureg.define(\"\u5343- = 1000\")\nureg.define(\"\u4e07- = 10000\")\nureg.define(\"\u4ebf- = 100000000\")\n# b = ureg.dollar # not defined? let's define new units?\nb = 1 * ureg.\u5143\nprint(b)\nureg.define(\"\u5e74 = year\")\nureg.define(\"m2 = meter ** 2\")  # working or not?\n# equals to \"meter * meter\"\nc = ureg.celsius\n# you cannot do this: ureg['\u2103']\n# this is not a valid name.\n# ureg.__getattr__(\"\u00b0C\")\nprint(c)  # invalid charactor: \u2103\nprint(\n    ureg.W, ureg.kW, ureg.kWh, ureg.\u5e74, ureg.MPa, ureg.m2, ureg.MVA, ureg.\u03a9, ureg.M\u03a9\n)  # great.\nval = b.to(ureg.\u4e07\u5143)\nprint(val, val.magnitude)  # the float val.\n# breakpoint()\nval2 = ureg.Quantity(100, \"\u5143/kWh\").to(\"\u4e07\u5143/kWh\")"
        },
        {
            "comment": "Code is using Pint library to handle unit conversions. It converts a quantity from one set of units to another, and shows how to define a new unit system based on desired base units. The code also demonstrates getting compatible units for a specific unit name.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_unit_conversions_test.py\":38-75",
            "content": "print(val2, val2.magnitude)\nprint()\nroot_units = val2.to_root_units()\nserialized_quantity = val2.to_tuple()\nprint(root_units)\nprint(serialized_quantity)\n# (0.01, (('\u4e07\u5143', 1), ('kilowatt_hour', -1)))\n# how to detect and convert?\nmagnitude, unit_tuple = serialized_quantity\n# how to parse the unit tuple?\n# ureg.parse_units()\nmyUnit = ureg.UnitsContainer(unit_tuple)\nprint(\"MYUNIT:\", myUnit)\n# once you know the trick...\n# convert to preferred unit system: https://pint.readthedocs.io/en/stable/user/systems.html\n# how to create a unit system?\ntarget_base_units = ['\u4e07\u5143','kWh']\n# # what is the target unit?\n# group = ureg.Group('IES_Unit_Group')\n# group.add_units('\u4e07\u5143','kWh')\n# system = ureg.System(\"IES_Unit_System\")\n# system.add_groups('IES_Unit_Group')\nval_test = ureg.Quantity(100,'\u5143/kWh')\nprint(\"TEST QUANTITY:\",val_test)\ntest_magnitude, test_unit_tuple = val_test.to_tuple()\nfor unit_name, unit_power in test_unit_tuple:\n    print(\"TEST_UNIT?\", unit_name)\n    compatible_units = ureg.get_compatible_units(unit_name) # shall be frozen set."
        },
        {
            "comment": "The code is testing the compatibility of units and converting them to base units using the uncertainty calculation package. It also prints out the compatible units and test base units for reference. The comment explains the purpose of this specific block of code within the larger context of the program.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_unit_conversions_test.py\":76-86",
            "content": "    # why [currency] is not good?\n    print(\"COMPATIBLE UNITS:\", compatible_units)\n    breakpoint()\n# # uncertainty calculation package:\n# # https://pythonhosted.org/uncertainties/\n# ureg.default_system = \"IES_Unit_System\"\n# test_base_units = val_test.to_base_units()\n# print(\"TEST BASE UNITS:\", test_base_units)"
        }
    ]
}