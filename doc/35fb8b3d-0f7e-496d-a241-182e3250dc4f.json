{
    "summary": "This code imports modules, defines variables, and generates device information for a microgrid system. It loads and formats two templates (TEST FIXTURES and TEST EXPORT) while sorting exportData dictionary and excluding specific parameter from devNames list.",
    "details": [
        {
            "comment": "This code imports necessary modules, appends a path, and defines variables. It iterates over ies_optim's attributes, checking for specific parameter names and \"\u4fe1\u606f\" class names. If found, it creates dictionaries to store the common parameters and IDs for each device type.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test/dev_info_tmp_gen.py\":0-38",
            "content": "# fpath = \"device_info.yml.tmp\"\nimport yaml\nimport sys\nimport rich\nsys.path.append(\"../\")\nimport jinja_utils\nimport ies_optim\nimport inspect\n# import copy\n\u8ba1\u7b97\u53c2\u6570 = \"\u8ba1\u7b97\u53c2\u6570\"\nexportData = {}\nexportIDData = {}\n_id = 0\nfor k, v in ies_optim.__dict__.items():\n    # for k, v in mglobals.items():\n    # print(k)\n    # print(k.__annotations__)\n    if k == \u8ba1\u7b97\u53c2\u6570:\n        sig = inspect.signature(v)\n        commonParams = {}\n        for sigkey in sig.parameters.keys():\n            commonParams[sigkey] = None\n        exportData[k] = commonParams\n        # breakpoint()\n    elif k.endswith(\"\u4fe1\u606f\") and (not k.startswith(\"\u8bbe\u5907\")):\n        if issubclass(v, ies_optim.\u8bbe\u5907\u57fa\u7840\u4fe1\u606f):\n            devName = k.strip(\"\u4fe1\u606f\")\n            devIDData = {}\n            # get ID classes.\n            devIDName = f\"{devName}ID\"\n            devIDClass = ies_optim.__dict__[devIDName]\n            devIDClassSignature = inspect.signature(devIDClass)\n            for sigkey in devIDClassSignature.parameters.keys():\n                devIDData[sigkey] = _id\n                _id += 1"
        },
        {
            "comment": "This code appears to be generating device information for a microgrid system. It creates a dictionary of device parameters, updates it with common attributes if the device is a certain class, and writes the data to a file for further use. The code seems to involve some kind of template handling as well.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test/dev_info_tmp_gen.py\":39-69",
            "content": "            exportIDData[k] = devIDData\n            commonParams = dict(\u8bbe\u5907\u540d\u79f0=devName)\n            if issubclass(v, ies_optim.\u8bbe\u5907\u4fe1\u606f):\n                # \u610f\u5473\u7740\u6709\u516c\u5171\u5185\u5bb9\n                commonParams.update(\u751f\u4ea7\u5382\u5546=\"Any\", \u8bbe\u5907\u578b\u53f7=f\"{devName}1\")\n            sig = inspect.signature(v)\n            # print(sig)\n            # breakpoint()\n            print()\n            print(devName.center(30, \"=\"))\n            for sigkey in sig.parameters.keys():\n                # print(sigkey)\n                if sigkey in commonParams.keys():\n                    continue\n                else:\n                    commonParams.update({sigkey: None})\n            rich.print(commonParams)\n            exportData[k] = commonParams\n    # class/methods might have distinct annotations inside.\n# with open(fpath, \"w+\") as f:\n#     content = yaml.safe_dump(exportData, allow_unicode=True)\n#     f.write(content)\ncode_path, template_path = jinja_utils.code_and_template_path(\n    base_name := \"common_fixtures\"\n)\ncode_path += \".tmp\"\n# from collections import OrderedDict"
        },
        {
            "comment": "The code loads and formats two templates for testing purposes: one for fixtures with the banner \"TEST FIXTURES\", and another for exporting data with the banner \"TEST EXPORT\". It sorts the exportData dictionary, excluding a specific calculation parameter from the devNames list.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test/dev_info_tmp_gen.py\":70-90",
            "content": "# exportedDataOrdered = OrderedDict()\njinja_utils.load_render_and_format(\n    template_path,\n    code_path,\n    render_params := dict(\n        data=dict(sorted(exportData.items(), key=lambda item: item[0] == \u8ba1\u7b97\u53c2\u6570)),\n        id_data=exportIDData,\n    ),\n    banner := \"TEST FIXTURES\",\n)\ncode_path, template_path = jinja_utils.code_and_template_path(\"test_export\")\njinja_utils.load_render_and_format(\n    template_path,\n    code_path,\n    render_params=dict(\n        devNames=[key for key in render_params[\"data\"].keys() if key != \u8ba1\u7b97\u53c2\u6570]\n    ),\n    banner=\"TEST EXPORT\",\n)"
        }
    ]
}