{
    "summary": "This code imports libraries, loads data, sets constants, uses Pint for unit conversion, includes an LRU cache decorator. It calculates new magnitude and unit, generates factor string for Jinja templating, searches keys in excelMap. Handles unit conversion and extraction, appending info to a list based on conditions. Generates Jinja2 templates, converts units, writes content to output file with UTF-8 encoding after enabling environment features and disabling passthrough.",
    "details": [
        {
            "comment": "This code imports necessary libraries, loads data from a JSON file, defines constants and parameters for cloud-based power system simulation, and utilizes the Pint unit conversion library. The code also creates a cached function for a UnitRegistry object to ensure efficient usage.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_jinja_code_generator.py\":0-48",
            "content": "encoding = \"utf-8\"\ntemplate_path = \"cloudpss_model_template.py.j2\"\ntemplate = open(template_path, \"r\", encoding=encoding).read()\nfrom jinja2 import Environment, FileSystemLoader\n# import jinja2\nimport json\n# import rich\nload_path = \"cloudpss_inputs.json\"\nwith open(load_path, \"r\", encoding=\"utf-8\") as f:\n    data = json.loads(f.read())\n    # rich.print(data)\nexcelMap = data[\"excelMap\"]\ndataParams = {\n    \"ratedParam\": \"\u8bbe\u5907\u989d\u5b9a\u8fd0\u884c\u53c2\u6570\",\n    \"operationalConstraints\": \"\u8bbe\u5907\u8fd0\u884c\u7ea6\u675f\",\n    \"economicParam\": \"\u8bbe\u5907\u7ecf\u6d4e\u6027\u53c2\u6570\",\n    \"OperateParam\": \"\u8bbe\u5907\u5de5\u51b5\",\n}\n# \u8bbe\u5907\u989d\u5b9a\u8fd0\u884c\u53c2\u6570\n# \u8bbe\u5907\u8fd0\u884c\u7ea6\u675f\n# \u8bbe\u5907\u7ecf\u6d4e\u6027\u53c2\u6570\n# \u8bbe\u5907\u5de5\u51b5\n# unknown property:\n# \u71c3\u6c14\u8f6e\u673a -> \u6321\u4f4d -> dict ({\"route\": \"OperateParams.params\"})\n# \u8fd9\u4e2a\u53c2\u6570\u6ca1\u6709\u7528\u4e8e\u5efa\u6a21\u4eff\u771f\u6216\u8005\u4f18\u5316\nfrom pint_convert_units import unitFactorCalculator\nfrom typing import Union, List\nfrom pint import UnitRegistry\nfrom functools import lru_cache\n@lru_cache(maxsize=1)\ndef getUnitRegistryAndStandardUnits(\n    unit_definition_file_path: str = \"merged_units.txt\",\n    standard_units_name_list: List[str] = [\n        \"\u4e07\u5143\",\n        \"kWh\",\n        \"km\",\n        \"kW\",\n        \"\u5e74\","
        },
        {
            "comment": "This code defines functions for handling units of measurement. It creates a UnitRegistry, sets standard units based on provided names, and converts input unit to the standard format using replacements for abbreviations and suffixes like \"m\u00b2\", \"t/h\", etc. The code also includes a function to retrieve standard units and an LRU cache decorator for efficient caching of results.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_jinja_code_generator.py\":49-90",
            "content": "        \"MPa\",\n        \"V\",\n        \"Hz\",\n        \"ohm\",\n        \"one\",\n        \"\u53f0\",\n        \"m2\",\n        \"m3\",\n        \"kelvin\",\n        \"metric_ton\", # this is weight.\n        \"p_u_\",\n        \"dimensionless\",\n    ],\n):\n    ureg = UnitRegistry(unit_definition_file_path)\n    standard_units = frozenset(\n        [ureg.Unit(unit_name) for unit_name in standard_units_name_list]\n    )\n    return ureg, standard_units\n@lru_cache(maxsize=1)\ndef getStandardUnits():\n    standard_units = frozenset([])\n    return standard_units\ndef convertToStandardUnit(unit: Union[str, None]):\n    factor_string = unit_hint = \"\"\n    # times factor, not division!\n    # numeric_conversion_dict = {\"percent\": 0.01}\n    if unit:\n        unit = (\n            unit.replace(\"%\", \"percent\")\n            .replace(\"m\u00b2\", \"m2\")\n            .replace(\"m\u00b3/h\", \"m3/hour\")\n            .replace(\"m\u00b3\", \"m3\")\n            .replace(\"t/h\", \"t/hour\")\n            .replace(\"p.u.\", \"p_u_\")\n        )\n        # if unit in numeric_conversion_dict.keys():\n        #     unit_hint = f\"([]) <- ({unit})\""
        },
        {
            "comment": "This code retrieves a unit registry and standard units, calculates the new magnitude and unit based on the old unit, and generates factor string and unit hint for Jinja templating. If the new magnitude is not 1, it updates the unit hint accordingly. The code also searches for keys in an excelMap and appends device name to a list.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_jinja_code_generator.py\":91-123",
            "content": "        #     factor_string = f\" * {numeric_conversion_dict[unit]}\"\n        ureg, standard_units = getUnitRegistryAndStandardUnits()\n        try:\n            unit_hint = f\"({str(ureg.Unit(unit))})\"\n        except:\n            raise Exception(\"Invalid unit string:\", unit)\n        new_magnitude, new_unit_name = unitFactorCalculator(\n            ureg, standard_units=standard_units, old_unit_name=unit\n        )\n        if new_magnitude != 1:\n            unit_hint = f\"({new_unit_name}) <- {unit_hint}\"\n            factor_string = (\n                f' {\"*\" if new_unit_name != \"kelvin\" else \"+\"} {new_magnitude}'\n            )\n    return unit_hint, factor_string\n# import re\nmylist = []\nfor key, value in excelMap.items():\n    if type(value) == dict:\n        if \"\u751f\u4ea7\u5382\u5546\" in value.keys():  # with or without unit?\n            mylist_elem = []\n            mylist_dict_elem = {\n                key: [] for key in [\"\u8bbe\u5907\u989d\u5b9a\u8fd0\u884c\u53c2\u6570\", \"\u8bbe\u5907\u8fd0\u884c\u7ea6\u675f\", \"\u8bbe\u5907\u7ecf\u6d4e\u6027\u53c2\u6570\", \"\u8bbe\u5907\u5de5\u51b5\"]\n            }\n            print(\"DEVICE NAME:\", key)\n            mylist_elem.append(key.replace(\"-\", \"_\"))"
        },
        {
            "comment": "This code is checking if a value in the 'value' dictionary is a string and contains a specific pattern. If it does, it extracts relevant information from the string and assigns values to 'k0', 'k', and 'v'. It then formats the 'unit' variable by replacing square brackets with parentheses and trims any leading/trailing spaces. If 'unit' is empty after these modifications, it raises an exception.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_jinja_code_generator.py\":124-144",
            "content": "            # this is a device for sure.\n            # rich.print(value)\n            for k, v in value.items():\n                if type(v) == str:\n                    if v.split(\".\")[0] in dataParams.keys():\n                        k0 = dataParams[v.split(\".\")[0]]\n                        print(\"K0\", k0, \"K\", k, \"V\", v.split(\".\")[-1])\n                        value_name = k.split(\"(\")[0]\n                        unit = (\n                            k.replace(\"[\", \"(\")\n                            .replace(\"]\", \")\")\n                            .replace(value_name, \"\")\n                            .strip()\n                        )\n                        # replace square brackets with round brackets.\n                        if unit.startswith(\"(\") and unit.endswith(\")\"):\n                            unit = unit[1:-1].strip()\n                            if len(unit) == 0:\n                                raise Exception(\"Invalid Unit:\", unit)\n                        else:\n                            if len(unit) > 0:"
        },
        {
            "comment": "This code is handling unit conversion and extraction of value name, unit, and factor from a key-value pair. If the unit is invalid or not found, an exception is raised. The extracted information is then appended to a list of dictionary elements in mylist_dict_elem based on certain conditions.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_jinja_code_generator.py\":145-163",
            "content": "                                raise Exception(\"Invalid Unit:\", unit)\n                            else:\n                                unit = None\n                        # pattern = r\"(\\w+)\\((\\w+)\\)\"\n                        # result = re.findall(pattern, k)\n                        # if len(result) > 0:\n                        #     value_name, unit = result[0]\n                        #     print(f\"value_name={value_name}\\nunit={unit}\")\n                        # else:\n                        #     value_name = k\n                        #     unit = None\n                        #     print(f\"value_name={value_name}\")\n                        # return value_name, unit\n                        unit_hint, factor = convertToStandardUnit(unit)\n                        comment = f\"\u5355\u4f4d\uff1a{unit_hint} [{k0}]\" if unit else f\"{k0}\"\n                        melem = [value_name, comment, factor]\n                        mylist_dict_elem[k0].append(melem)\n                    else:\n                        if v not in [\"manufacturer\", \"equipType\"]:"
        },
        {
            "comment": "This code is generating Jinja2 template for Python, handling different types of parameters and converting environmental parameter units to standard units. It then appends them to a list and finally generates the code using Jinja2 template engine, writing it to the specified output file path with UTF-8 encoding.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_jinja_code_generator.py\":164-199",
            "content": "                            print(\">> UNIDENTIFIED PARAM TYPE <<\")\n                        print(k, v)\n                else:\n                    print(\">> UNIDENTIFIED VALUE TYPE <<\")\n                    print(k, type(v), v)\n            mylist_elem.append(mylist_dict_elem)\n            mylist.append(mylist_elem)\n        elif \"\u8d1f\u8377\u540d\u79f0\" in value.keys():  # load for sure.\n            for k, v in value.items():\n                ...\n        print(\"_\" * 30)\noutput_path = \"cloudpss_jinja_code_output.py\"\nenv_param_list = [\n    (\"\u6e29\u5ea6\", \"\u00b0C\"),\n    (\"\u7a7a\u6c14\u6bd4\u6e7f\u5ea6\", \"kg/kg\"),  # dimensionless. right?\n    (\"\u592a\u9633\u8f90\u5c04\u5f3a\u5ea6\", \"W/m2\"),\n    (\"\u571f\u58e4\u5e73\u5747\u6e29\u5ea6\", \"\u00b0C\"),\n    (\"\u8ddd\u5730\u976210m\u5904\u4e1c\u5411\u98ce\u901f\", \"m/s\"),\n    (\"\u8ddd\u5730\u976250m\u5904\u4e1c\u5411\u98ce\u901f\", \"m/s\"),\n    (\"\u8ddd\u5730\u976210m\u5904\u5317\u5411\u98ce\u901f\", \"m/s\"),\n    (\"\u8ddd\u5730\u976250m\u5904\u5317\u5411\u98ce\u901f\", \"m/s\"),\n]\nenv_param_converted_list = []\nfor name, unit in env_param_list:\n    unit_hint, factor = convertToStandardUnit(unit)\n    elem = [name, unit_hint, factor]\n    env_param_converted_list.append(elem)\n#### GENERATE CODE, WRITE TO output_path, with encoding='utf-8'\nfrom jinja2 import StrictUndefined"
        },
        {
            "comment": "The code sets up a Jinja environment with trim_blocks and lstrip_blocks enabled for rendering, disables undefined passthrough to avoid filling blanks, and then gets the template, renders it with necessary parameters, and writes the rendered content to an output file.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_jinja_code_generator.py\":201-223",
            "content": "def main():\n    # enable render option:\n    # `trim_blocks` and `lstrip_blocks`\n    #\n    # disable undefined passthrough:\n    # make sure there won't be blanks to fill. origin: https://ttl255.com/jinja2-tutorial-part-1-introduction-and-variable-substitution/\n    # undefined=StrictUndefined\n    #\n    env = Environment(loader=FileSystemLoader(\"./\"),trim_blocks=True, lstrip_blocks=True, undefined=StrictUndefined)\n    tpl = env.get_template(template_path)\n    with open(output_path, \"w+\", encoding=encoding) as fout:\n        render_content = tpl.render( # only pass parameter needed for template\n            mylist=mylist,\n            env_param_list=env_param_list,\n            env_param_converted_list=env_param_converted_list,\n            ureg=getUnitRegistryAndStandardUnits()[0],\n        )\n        # render_content = tpl.render(mylist = [\"\u5149\u4f0f\",\"\u98ce\u673a\",\"\u71c3\u6c14\u8f6e\u673a\"])\n        fout.write(render_content)\n        # render_content1 = tpl.render(mylist2=[(\"\u5355\u4e2a\u5149\u4f0f\u677f\u9762\u79ef\",\"\u5355\u4f4d\uff1a(m\u00b2)\",\"\"),(\"\u6700\u5927\u53d1\u7535\u529f\u7387\",\"\u5355\u4f4d\uff1a(kW)\",\"\"),\"\u91c7\u8d2d\u6210\u672c\",\"\u5355\u4f4d\uff1a(\u4e07\u5143/\u53f0)\",\"\u56fa\u5b9a\u7ef4\u62a4\u6210\u672c\",\"\u5355\u4f4d\uff1a(\u4e07\u5143/\u5e74)\",\"\u53ef\u53d8\u7ef4\u62a4\u6210\u672c\",\"\u5355\u4f4d\uff1a(\u4e07\u5143/kWh) <- (\u5143/kWh)\",\"\u8bbe\u8ba1\u5bff\u547d\",\"\u5355\u4f4d\uff1a(\u5e74)\"])"
        },
        {
            "comment": "This code snippet appears to be at the end of a function or method. It checks if the script is being run directly and if so, calls the main function. The previous line seems like it writes content to a file (fout.write(render_content1)) but is commented out.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_jinja_code_generator.py\":224-228",
            "content": "        # fout.write(render_content1)\nif __name__ == \"__main__\":\n    main()"
        }
    ]
}