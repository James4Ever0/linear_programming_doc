{
    "summary": "The code prepares the environment, creates power generation objects, defines microgrid topology, initializes electrolyzers, optimizes parameters, calculates energy flow with error handling, saves graph configuration as JSON files, and provides logging functionality.",
    "details": [
        {
            "comment": "This code sets up the environment for microgrid topology checking. It defines constants such as NO_BATTERY, NO_ELEC_LOAD, and NO_RENEWABLE. It also checks a windspeed and illumination data file line by line, appending the processed data to the respective lists. The code then imports necessary modules for logging, configuration, and topology checking. Additionally, it sets up DEBUG mode if needed, and specifies additional environment variables as required.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":0-46",
            "content": "import os\nos.environ[\"SKIP_ARGENV\"] = \"True\"\nos.environ[\"DOTENV\"] = \".test_microgrid_topo_env\"\n# os.environ[\"DOTENV\"] = \".test_topo_env\"\ndata_fpath = \"./heatpump_code_reference/windspeed_and_illumination_8760.dat\"\nwindspeed = []  # m/s\nillumination = []  # W/m2 -> kW/m2\n# NO_BATTERY = True\nNO_BATTERY = False\n# NO_ELEC_LOAD=True\nNO_ELEC_LOAD = False\n# NO_RENEWABLE=True\nNO_RENEWABLE = False\nDEBUG = True\n# DEBUG = False\nwith open(data_fpath, \"r\") as f:\n    for line in f.readlines():\n        line = line.strip()\n        if line.startswith(\"#\"):\n            continue\n        dat = line.split()\n        if len(dat) == 4:\n            num_dat = [float(e) for e in dat]\n            windspeed.append(num_dat[3] + 4)\n            illumination.append(num_dat[1] / 1000)\nfrom log_utils import logger_print\nfrom config import *\n# ies_env.VAR_INIT_AS_ZERO = \"1\"\n# os.environ[\n#     \"PERCENT_WARNING_THRESHOLD\"\n# ] = \"1\"  # percent value less or equal than this value shal be warned\nimport json\nfrom topo_check import *\n# import rich\nif DEBUG:\n    datalen = 24"
        },
        {
            "comment": "This code defines a function `print_with_banner` for printing data with a banner, imports necessary libraries, creates a list 'a' of length 8760 (representing hours in a year), and sets up computation parameters 'algoParam' based on DEBUG mode and extraParams. It uses different parameter settings depending on whether in debugging or non-debugging mode. The parameters include the calculation goal, time step, type, wind speed, illumination, and discount rate.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":47-98",
            "content": "else:\n    datalen = 8760\n####################\n# build from code. #\n####################\n# FIXED: \u52a0\u6cd5\u5668\u6ca1\u6709\"output\"\ndef print_with_banner(data, banner: str):\n    logger_print()\n    logger_print(\"=\" * 40 + f\"[{banner}]\")\n    logger_print(data)\n    logger_print()\n# you may need pydantic here. verify then import to compute graph.\nfrom ies_optim import *\nfrom export_format_validate import *\n# import numpy as np\n# a = abs(np.random.random((24,))).tolist()\na = [100] * datalen  # this is not random.\n# a = abs(np.random.random((datalen,))).tolist()\n# algoParam = \u8ba1\u7b97\u53c2\u6570(\u8ba1\u7b97\u6b65\u957f=\"\u5c0f\u65f6\", \u5178\u578b\u65e5=False, \u8ba1\u7b97\u7c7b\u578b=\"\u4eff\u771f\u6a21\u62df\", \u98ce\u901f=a, \u5149\u7167=a, \u6c14\u6e29=a, \u5e74\u5229\u7387=0.1).dict()\nif DEBUG:\n    extraParams = dict(\n        \u5178\u578b\u65e5\u4ee3\u8868\u7684\u65e5\u671f=[1],\n        \u5178\u578b\u65e5=True,\n    )\nelse:\n    extraParams = dict(\n        \u5178\u578b\u65e5=False,\n    )\nalgoParam = \u8ba1\u7b97\u53c2\u6570(\n    \u8ba1\u7b97\u76ee\u6807=\"\u7ecf\u6d4e\",\n    # \u8ba1\u7b97\u76ee\u6807=\"\u7ecf\u6d4e_\u73af\u4fdd\",\n    # \u8ba1\u7b97\u76ee\u6807=\"\u73af\u4fdd\",\n    \u8ba1\u7b97\u6b65\u957f=\"\u5c0f\u65f6\",\n    # \u5178\u578b\u65e5\u4ee3\u8868\u7684\u65e5\u671f=[1, 2],\n    \u8ba1\u7b97\u7c7b\u578b=\"\u8bbe\u8ba1\u89c4\u5212\",\n    # \u98ce\u901f=windspeed,\n    # \u5149\u7167=illumination,\n    \u98ce\u901f=windspeed[:datalen],\n    \u5149\u7167=illumination[:datalen],\n    \u6c14\u6e29=a,\n    \u8d34\u73b0\u7387=9,\n    # \u8d34\u73b0\u7387=0.1,\n    # \u5e74\u5229\u7387=0.1,\n    **extraParams,"
        },
        {
            "comment": "This code is creating solar and wind power generation information objects with specified parameters and adding them to a topology.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":99-142",
            "content": ").dict()\n# topo = \u62d3\u6251\u56fe()  # with structure?\ntopo = \u62d3\u6251\u56fe(**algoParam)  # with structure?\ndevParam = dict(\u751f\u4ea7\u5382\u5546=\"Any\", \u8bbe\u5907\u578b\u53f7=\"Any\")\n# devParam = dict(\u751f\u4ea7\u5382\u5546=\"Any\", \u8bbe\u5907\u578b\u53f7=\"Any\", \u8bbe\u5907\u540d\u79f0=\"Any\")\nP1 = \u5149\u4f0f\u53d1\u7535\u4fe1\u606f(\n    **devParam,\n    \u8bbe\u5907\u540d\u79f0=\"\u5149\u4f0f1\",\n    Area=2.59,\n    RenewableEnergyConsumptionConstraint=\u65b0\u80fd\u6e90\u6d88\u7eb3\u7ea6\u675f.\u9650\u5236\u6d88\u7eb3\u7387,\n    RenewableEnergyConsumptionRate=95,\n    # too low for percentage\n    PowerConversionEfficiency=90,\n    # PowerConversionEfficiency=0.9,\n    MaxPower=0.6,\n    PowerDeltaLimit=10,\n    CostPerKilowatt=0.14,\n    CostPerYearPerKilowatt=0.002,\n    VariationalCostPerWork=0,\n    Life=25,\n    BuildCostPerKilowatt=0.14,\n    BuildBaseCost=0,\n    MaxInstallArea=4300,\n    MinInstallArea=4300,\n    DeviceCount=4300,\n).dict()\n\u5149\u4f0f\u53d1\u75351 = \u5149\u4f0f\u53d1\u7535(topo, param=P1)  # \u8fd9\u79cd\u662f\u589e\u52a0\u65b0\u7684\u5149\u4f0f\u53d1\u7535\nWT_P1 = \u98ce\u529b\u53d1\u7535\u4fe1\u606f(\n    **devParam,\n    \u8bbe\u5907\u540d\u79f0=\"\u98ce\u529b1\",\n    RenewableEnergyConsumptionConstraint=\u65b0\u80fd\u6e90\u6d88\u7eb3\u7ea6\u675f.\u9650\u5236\u6d88\u7eb3\u7387,\n    RenewableEnergyConsumptionRate=95,\n    CutoutPower=2350,\n    RatedPower=2500,\n    RatedWindSpeed=9,\n    MinWindSpeed=3,\n    MaxWindSpeed=20,\n    PowerDeltaLimit=10,\n    CostPerKilowatt=0.4,"
        },
        {
            "comment": "Creating wind and diesel power objects with given parameters. Wind turbine (WT_P1) and diesel generator (Diesel info, tsuru-miku) are instantiated with specific attributes like RatedPower, PowerDeltaLimit, etc., for a microgrid topology check.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":143-197",
            "content": "    CostPerYearPerKilowatt=0.005,\n    VariationalCostPerWork=0,\n    Life=25,\n    BuildCostPerKilowatt=0.2,\n    BuildBaseCost=0,\n    MaxDeviceCount=12,\n    MinDeviceCount=12,\n    DeviceCount=12,\n).dict()\n\u98ce\u529b\u53d1\u75351 = \u98ce\u529b\u53d1\u7535(topo, param=WT_P1)\n\u67f4\u6cb91 = \u67f4\u6cb9(\n    topo,\n    param=\u67f4\u6cb9\u4fe1\u606f(\n        \u8bbe\u5907\u540d\u79f0=\"Any\",\n        Price=(9.2, \"\u5143/L\"),\n        \u70ed\u503c=(9.1667, \"kWh/L\"),\n        CO2=(2.583, \"kg/L\"),\n        NOX=(0.01, \"kg/L\"),\n        SO2=(0.01, \"kg/L\"),\n    ).dict(),\n    # param=\u67f4\u6cb9\u4fe1\u606f(\u8bbe\u5907\u540d\u79f0=\"Any\", Price=(10, \"L/\u5143\"), \u70ed\u503c=(10, \"MJ/L\"), CO2=(10, \"kg/L\")).dict(),\n)\np1 = \u67f4\u6cb9\u53d1\u7535\u4fe1\u606f(\n    **devParam,\n    \u8bbe\u5907\u540d\u79f0=\"\u67f4\u6cb9\u53d1\u75351\",\n    RatedPower=1e4,\n    PowerDeltaLimit=0.3,\n    PowerStartupLimit=0.0001,\n    CostPerMachine=6,\n    CostPerYearPerMachine=0.1,\n    VariationalCostPerWork=0.1,\n    Life=15,\n    BuildCostPerMachine=0.2,\n    BuildBaseCost=0,\n    DieselToPower_Load=[\n        (\n            0.13,\n            29,\n        ),\n        (\n            0.145,\n            36,\n        ),\n        (\n            0.164,\n            43,\n        ),\n        (\n            0.18,\n            50,\n        ),"
        },
        {
            "comment": "This code defines a microgrid topology, including generators and transformers, with specific parameters. The code creates a generator using the defined parameters and a transformer factory function to create transformers based on their index, DC rating, and power rating. The breakpoint() is used for debugging purposes.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":198-259",
            "content": "        (\n            0.19,\n            57,\n        ),\n        (\n            0.21,\n            64,\n        ),\n        (\n            0.224,\n            71,\n        ),\n        (\n            0.238,\n            79,\n        ),\n        (\n            0.26,\n            86,\n        ),\n        (\n            0.294,\n            93,\n        ),\n        (\n            0.365,\n            100,\n        ),\n    ],\n    DeviceCount=20,\n    MaxDeviceCount=20,\n    MinDeviceCount=20,\n).dict()\n# breakpoint()\n\u67f4\u6cb9\u53d1\u75351 = \u67f4\u6cb9\u53d1\u7535(\n    topo,\n    param=p1,\n)\n# breakpoint()\ndef \u53d8\u6d41\u5668\u5de5\u5382(index, dc: int, rp: float):\n    ret = \u53d8\u6d41\u5668(\n        topo,\n        param=\u53d8\u6d41\u5668\u4fe1\u606f(\n            **devParam,\n            \u8bbe\u5907\u540d\u79f0=f\"\u53d8\u6d41\u5668{index}\",\n            RatedPower=rp,\n            CostPerKilowatt=0.023,\n            CostPerYearPerKilowatt=0.00023,\n            VariationalCostPerWork=0,\n            Life=20,\n            Efficiency=99,\n            BuildCostPerKilowatt=0,\n            BuildBaseCost=0,\n            DeviceCount=dc,\n            MaxDeviceCount=dc,\n            MinDeviceCount=dc,\n        ).dict(),\n    )\n    return ret"
        },
        {
            "comment": "Creating transformers for wind and solar power, initializing loads with flexible types, setting minimum and maximum energy consumption values, and defining prices for hydrogen and electrical loads.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":262-308",
            "content": "\u53d8\u6d41\u56681 = \u53d8\u6d41\u5668\u5de5\u5382(1, 35, 1000)  # \u98ce\u673a\n\u53d8\u6d41\u56682 = \u53d8\u6d41\u5668\u5de5\u5382(2, 12, 1000)  # \u5149\u4f0f\n\u53d8\u6d41\u56683 = \u53d8\u6d41\u5668\u5de5\u5382(3, 7, 5000)\n\u53d8\u6d41\u56684 = \u53d8\u6d41\u5668\u5de5\u5382(4, 3, 5000)\n# import random\nLOAD_H = \u6c22\u8d1f\u8377(\n    topo,\n    param=\u6c22\u8d1f\u8377\u4fe1\u606f(\n        **devParam,\n        \u8bbe\u5907\u540d\u79f0=\"\u6c22\u8d1f\u83771\",\n        # LoadType=\u8d1f\u8377\u7c7b\u578b.Normal,\n        LoadType=\u8d1f\u8377\u7c7b\u578b.Flexible,\n        # Pmin=0,\n        Pmin=100,\n        Pmax=1500,\n        EnergyConsumption=[1500] * len(a),\n        PriceModel=\u5e38\u6570\u6c22\u4ef7(Price=18),\n    ).dict(),\n)\nif not NO_ELEC_LOAD:\n    LOAD_E = \u7535\u8d1f\u8377(\n        topo,\n        param=\u7535\u8d1f\u8377\u4fe1\u606f(\n            **devParam,\n            \u8bbe\u5907\u540d\u79f0=\"\u7535\u8d1f\u83771\",\n            LoadType=\u8d1f\u8377\u7c7b\u578b.Flexible,\n            Pmin=100,\n            Pmax=500,\n            EnergyConsumption=[400] * len(a),  # TODO: fix data retrieval bug\n            PriceModel=\u5e38\u6570\u7535\u4ef7(Price=1),\n        ).dict(),\n    )\nif not NO_BATTERY:\n    \u9502\u7535\u6c601 = \u9502\u7535\u6c60(\n        topo,\n        param=\u9502\u7535\u6c60\u4fe1\u606f(\n            **devParam,\n            \u8bbe\u5907\u540d\u79f0=\"\u9502\u7535\u6c601\",\n            \u5faa\u73af\u8fb9\u754c\u6761\u4ef6=\"\u65e5\u95f4\u8fde\u63a5\",\n            RatedCapacity=1000,\n            CostPerCapacity=0.06,\n            CostPerYearPerCapacity=0,\n            VariationalCostPerWork=0.05,"
        },
        {
            "comment": "This code defines a battery and a bidirectional converter for a microgrid. The battery has parameters such as capacity, lifetime, efficiency, and decay rate. The converter has parameters including rated power, efficiency, cost per kilowatt, and device count range. The code creates instances of these devices based on the specified parameters.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":309-345",
            "content": "            Life=15,\n            BatteryDeltaLimit=0.5,\n            ChargeEfficiency=92,\n            DischargeEfficiency=92,\n            BuildCostPerCapacity=0.03,\n            BuildBaseCost=0,\n            InitSOC=50,\n            BatteryStorageDecay=0,\n            # BatteryStorageDecay=0.5,\n            BatteryLife=10,\n            LifetimeCycleCount=6000,\n            # TotalDischargeCapacity=1000,\n            MaxSOC=100,\n            MinSOC=15,\n            TotalCapacity=20000,\n            MaxTotalCapacity=20000,\n            MinTotalCapacity=1000,\n        ).dict(),\n    )\n    \u53cc\u5411\u53d8\u6d41\u56681 = \u53cc\u5411\u53d8\u6d41\u5668(\n        topo,\n        param=\u53cc\u5411\u53d8\u6d41\u5668\u4fe1\u606f(\n            **devParam,\n            \u8bbe\u5907\u540d\u79f0=\"\u53cc\u5411\u53d8\u6d41\u56681\",\n            RatedPower=1250,\n            Efficiency=100,\n            CostPerKilowatt=0,\n            # CostPerKilowatt=0.014,\n            CostPerYearPerKilowatt=0,\n            VariationalCostPerWork=0,\n            Life=20,\n            BuildCostPerKilowatt=0,\n            BuildBaseCost=0,\n            MaxDeviceCount=40,\n            MinDeviceCount=10,\n            DeviceCount=40,"
        },
        {
            "comment": "This code creates an electrolyzer device named \"\u7535\u89e3\u69fd1\" with given parameters and adds it to the topology. It utilizes a class called \"\u7535\u89e3\u69fd\" and passes the topology and device parameters to initialize the electrolyzer object. The parameters include rated input power, hydrogen generation efficiency, cost per machine, etc.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":346-389",
            "content": "        ).dict(),\n    )\n\u7535\u89e3\u69fd1 = \u7535\u89e3\u69fd(\n    topo,\n    param=\u7535\u89e3\u69fd\u4fe1\u606f(\n        **devParam,\n        \u8bbe\u5907\u540d\u79f0=f\"\u7535\u89e3\u69fd1\",\n        RatedInputPower=1e5,\n        HydrogenGenerationStartupRate=0.001,\n        HydrogenGenerationEfficiency=100,\n        DeltaLimit=3.4,\n        HeatRecycleEfficiency=100,\n        CostPerMachine=900,\n        CostPerYearPerMachine=5,\n        VariationalCostPerWork=0.01,\n        Life=15,\n        BuildCostPerMachine=20,\n        BuildBaseCost=0,\n        MaxDeviceCount=6,\n        MinDeviceCount=6,\n        DeviceCount=6,\n    ).dict(),\n)\n# \u7535\u89e3\u69fd2 = \u7535\u89e3\u69fd(\n#     topo,\n#     param=\u7535\u89e3\u69fd\u4fe1\u606f(\n#         **devParam,\n#         \u8bbe\u5907\u540d\u79f0=f\"\u7535\u89e3\u69fd2\",\n#         RatedInputPower=1000,\n#         HydrogenGenerationStartupRate=5,\n#         HydrogenGenerationEfficiency=60,\n#         DeltaLimit=50,\n#         HeatRecycleEfficiency=70,\n#         CostPerMachine=800,\n#         CostPerYearPerMachine=5,\n#         VariationalCostPerWork=0.01,\n#         Life=15,\n#         BuildCostPerMachine=20,\n#         BuildBaseCost=0,\n#         MaxDeviceCount=6,\n#         MinDeviceCount=1,"
        },
        {
            "comment": "This code creates a transmission line and three connection lines in the microgrid topology. It also includes an optional function to create additional connection lines if renewable energy sources are enabled. The transmission line is optimized with specific parameters and the connection lines cannot be connected directly to each other.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":390-439",
            "content": "#         DeviceCount=6,\n#     ).dict(),\n# )\n\u4f20\u8f93\u7ebf1 = \u4f20\u8f93\u7ebf(\n    topo,\n    param=\u4f20\u8f93\u7ebf\u4fe1\u606f(\n        **devParam,\n        \u8bbe\u5907\u540d\u79f0=\"\u4f20\u8f93\u7ebf1\",\n        Optimize=True,\n        U=10000,\n        Rho=2.94e-8,\n        GivenAveragePower=10000,\n        GivenMaxPower=10000,\n        Pwire_Asec_Pr=[\n            (7200, 95, 3.3),\n            (7800, 120, 3.7),\n            (9000, 150, 4.2),\n            (10500, 185, 4.7),\n            (11200, 210, 5.1),\n            (12200, 240, 5.5),\n            (13100, 300, 6.2),\n            (16000, 400, 7.4),\n            (26000, 600, 12.4),\n            (39000, 900, 19.2),\n            (109000, 900, 19.2),\n        ],\n        PowerTransferDecay=0,\n        CostPerKilometer=0,\n        CostPerYearPerKilometer=0,\n        Life=20,\n        BuildCostPerKilometer=0,\n        BuildBaseCost=0,\n        Length=20,\n    ).dict(),\n)\nif not NO_RENEWABLE:\n    \u6bcd\u7ebf1 = \u6bcd\u7ebf(topo, \"\u53ef\u8fde\u63a5\u6bcd\u7ebf\")\n    \u6bcd\u7ebf2 = \u6bcd\u7ebf(topo, \"\u53ef\u8fde\u63a5\u6bcd\u7ebf\")\n\u6bcd\u7ebf3 = \u6bcd\u7ebf(topo, \"\u53ef\u8fde\u63a5\u6bcd\u7ebf\")\n# \u6bcd\u7ebf4 = \u6bcd\u7ebf(topo, \"\u53ef\u8fde\u63a5\u6bcd\u7ebf\")\n# \u6bcd\u7ebf5 = \u6bcd\u7ebf(topo, \"\u53ef\u8fde\u63a5\u6bcd\u7ebf\")\ndef \u521b\u5efa\u8fde\u63a5\u7ebf(left, right):\n    \u8fde\u63a5\u7ebf(topo, \"\u4e0d\u53ef\u8fde\u63a5\u6bcd\u7ebf\", left, right)\nif not NO_RENEWABLE:"
        },
        {
            "comment": "Creates connections between components in a microgrid setup: connects wind and solar energy sources to transformers, mother lines to transformers and battery if applicable, battery to bidirectional converter, transmission line to bidirectional converter and mother line, electrolyzer to hydrogen load, and additional connections related to hydrogen load and mother line 5.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":440-491",
            "content": "    \u521b\u5efa\u8fde\u63a5\u7ebf(\u98ce\u529b\u53d1\u75351.\u7535\u63a5\u53e3, \u53d8\u6d41\u56681.\u7535\u8f93\u5165)\n    \u521b\u5efa\u8fde\u63a5\u7ebf(\u5149\u4f0f\u53d1\u75351.\u7535\u63a5\u53e3, \u53d8\u6d41\u56682.\u7535\u8f93\u5165)\n    \u521b\u5efa\u8fde\u63a5\u7ebf(\u53d8\u6d41\u56681.\u7535\u8f93\u51fa, \u6bcd\u7ebf1.id)\n    \u521b\u5efa\u8fde\u63a5\u7ebf(\u53d8\u6d41\u56682.\u7535\u8f93\u51fa, \u6bcd\u7ebf2.id)\n    \u521b\u5efa\u8fde\u63a5\u7ebf(\u6bcd\u7ebf1.id, \u53d8\u6d41\u56683.\u7535\u8f93\u5165)\n    \u521b\u5efa\u8fde\u63a5\u7ebf(\u6bcd\u7ebf2.id, \u53d8\u6d41\u56684.\u7535\u8f93\u5165)\n\u521b\u5efa\u8fde\u63a5\u7ebf(\u67f4\u6cb91.\u71c3\u6599\u63a5\u53e3, \u67f4\u6cb9\u53d1\u75351.\u71c3\u6599\u63a5\u53e3)\n\u521b\u5efa\u8fde\u63a5\u7ebf(\u67f4\u6cb9\u53d1\u75351.\u7535\u63a5\u53e3, \u6bcd\u7ebf3.id)\n# \u521b\u5efa\u8fde\u63a5\u7ebf(\u53d8\u6d41\u56683.\u7535\u8f93\u51fa, \u6bcd\u7ebf3.id)\n# \u521b\u5efa\u8fde\u63a5\u7ebf(\u53d8\u6d41\u56684.\u7535\u8f93\u51fa, \u6bcd\u7ebf3.id)\n\u521b\u5efa\u8fde\u63a5\u7ebf(\u6bcd\u7ebf3.id, \u7535\u89e3\u69fd1.\u7535\u63a5\u53e3)\nif not NO_BATTERY:\n    # \u521b\u5efa\u8fde\u63a5\u7ebf(\u9502\u7535\u6c601.\u7535\u63a5\u53e3, \u6bcd\u7ebf3.id)\n    \u521b\u5efa\u8fde\u63a5\u7ebf(\u9502\u7535\u6c601.\u7535\u63a5\u53e3, \u53cc\u5411\u53d8\u6d41\u56681.\u50a8\u80fd\u7aef)\n    \u521b\u5efa\u8fde\u63a5\u7ebf(\u4f20\u8f93\u7ebf1.\u7535\u8f93\u5165, \u6bcd\u7ebf3.id)\n    \u521b\u5efa\u8fde\u63a5\u7ebf(\u4f20\u8f93\u7ebf1.\u7535\u8f93\u51fa, \u53cc\u5411\u53d8\u6d41\u56681.\u7ebf\u8def\u7aef)\n    # \u521b\u5efa\u8fde\u63a5\u7ebf(\u53cc\u5411\u53d8\u6d41\u56681.\u7ebf\u8def\u7aef, \u6bcd\u7ebf3.id)\n# \u521b\u5efa\u8fde\u63a5\u7ebf(\u6bcd\u7ebf3.id, \u4f20\u8f93\u7ebf1.\u7535\u8f93\u5165)\n# \u521b\u5efa\u8fde\u63a5\u7ebf(\u4f20\u8f93\u7ebf1.\u7535\u8f93\u51fa, \u6bcd\u7ebf4.id)\n# if not NO_BATTERY:\n#     \u521b\u5efa\u8fde\u63a5\u7ebf(\u9502\u7535\u6c601.\u7535\u63a5\u53e3, \u53cc\u5411\u53d8\u6d41\u56681.\u50a8\u80fd\u7aef)\n#     \u521b\u5efa\u8fde\u63a5\u7ebf(\u53cc\u5411\u53d8\u6d41\u56681.\u7ebf\u8def\u7aef, \u6bcd\u7ebf4.id)\n# \u521b\u5efa\u8fde\u63a5\u7ebf(\u4f20\u8f93\u7ebf1.\u7535\u8f93\u51fa, \u7535\u89e3\u69fd1.\u7535\u63a5\u53e3)\n# # \u521b\u5efa\u8fde\u63a5\u7ebf(\u6bcd\u7ebf4.id, \u7535\u89e3\u69fd1.\u7535\u63a5\u53e3)\n# # \u521b\u5efa\u8fde\u63a5\u7ebf(\u6bcd\u7ebf4.id, \u7535\u89e3\u69fd2.\u7535\u63a5\u53e3)\n# if not NO_ELEC_LOAD:\n#     \u521b\u5efa\u8fde\u63a5\u7ebf(\u6bcd\u7ebf4.id, LOAD_E.\u7535\u63a5\u53e3)\n\u521b\u5efa\u8fde\u63a5\u7ebf(\u7535\u89e3\u69fd1.\u5236\u6c22\u63a5\u53e3, LOAD_H.\u6c22\u6c14\u63a5\u53e3)\n# \u521b\u5efa\u8fde\u63a5\u7ebf(\u7535\u89e3\u69fd2.\u5236\u6c22\u63a5\u53e3, \u6bcd\u7ebf5.id)\n# \u521b\u5efa\u8fde\u63a5\u7ebf(\u6bcd\u7ebf5.id, LOAD_H.\u6c22\u6c14\u63a5\u53e3)\n# \u521b\u5efa\u8fde\u63a5\u7ebf(\u6bcd\u7ebf5.id, LOAD_H.\u6c22\u6c14\u63a5\u53e3)\n# L1 = \u6bcd\u7ebf(graph)\n# # walk over all connections.\n# conn = \u8fde\u63a5\u7ebf(graph, PV.ports[\"\u7535\u63a5\u53e3\"], LOAD.ports[\"\u7535\u63a5\u53e3\"])\n# conn_merge = \u5408\u5e76\u7ebf(L0, L1)  # what do you do?\n# we will do it later."
        },
        {
            "comment": "This code is creating an EnergyFlowGraph object using a microgrid topology dictionary and overriding the default equipment life to 2 years. It then saves the graph configuration as a JSON file, calculates energy flow based on the configuration using `calculate_energyflow_graph_base` function, logs the result, and if there's a successful calculation, it saves the output JSON as well. The code also includes error handling for any exceptions during consistency check of the microgrid topology.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/microgrid_topo_check.py\":492-525",
            "content": "# try:\n#     topo.check_consistency()\n# except Exception as e:\n#     # raise e\n#     pass\n# shall raise error.\n# methods for computing.\nfrom fastapi_celery_functions import calculate_energyflow_graph_base\n# TODO: add test of celery app\nfrom fastapi_datamodel_template import EnergyFlowGraph\nimport os\nmdict = topo.to_json()\nimport json\nmdictList = [mdict]\n# breakpoint()  # error while reloading params\nEFG = EnergyFlowGraph(mDictList=mdictList, residualEquipmentLife=2)  # override default.\njson_dump_params = dict(ensure_ascii=False, indent=4)\nwith open(\"microgrid_topo_check_test_input.json\", \"w+\") as f:\n    json.dump(EFG.dict(), f, **json_dump_params)\nret = calculate_energyflow_graph_base(EFG.dict())\nlogger_print(ret)\nif ret:\n    with open(saved_path := \"microgrid_test_output_full.json\", \"w+\") as f:\n        f.write(json.dumps(ret, **json_dump_params))\n    logger_print(f\"dumped to: {saved_path}\")"
        }
    ]
}