{
    "summary": "This code creates a FastAPI server for microgrid optimization with Celery tasks, task management, logger setup, custom route handler class, and asynchronous routing, supporting Pareto curve generation, mock testing, and API endpoint revocation.",
    "details": [
        {
            "comment": "This code sets up a FastAPI server for a microgrid system. It imports necessary modules, defines logger_print function to log messages using the defined logger, and configures logging handlers. The server runs on host \"0.0.0.0\" and port 9870. Celery is suggested for task management but not imported yet.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":0-44",
            "content": "from log_utils import logger_print\n# suggestion: use fastapi for self-documented server, use celery for task management.\n# celery reference: https://github.com/GregaVrbancic/fastapi-celery/blob/master/app/main.py\nimport traceback\nfrom fastapi import BackgroundTasks, FastAPI\nfrom fastapi_datamodel_template import (\n    CalculationAsyncResult,\n    CalculationAsyncSubmitResult,\n    CalculationResult,\n    EnergyFlowGraph,\n    RevokeResult,\n    CalculationStateResult,\n)\nport = 9870\nhost = \"0.0.0.0\"\nimport logging\nfrom log_utils import (\n    fastapi_log_filename,\n    stdout_handler,\n    makeRotatingFileHandler,\n    # Formatter\n)\nfrom log_utils import logger_print as lp\nfastapi_log_handler = makeRotatingFileHandler(fastapi_log_filename)\nlogger = logging.getLogger(\"fastapi\")\nlogger.setLevel(\"DEBUG\")\nlogger.addHandler(fastapi_log_handler)\nlogger.addHandler(stdout_handler)\n# import celery\ndef logger_print(*args):  # override this.\n    lp(*args, logger=logger)\nfrom config import *\n# import os\n# MOCK = ies_env.STATIC_MOCK\n# changed to MOCK_TEST in config.py"
        },
        {
            "comment": "This code sets up a FastAPI server template for an IES (Intelligent Electrical System) optimization and simulation service. It includes the necessary imports, defines app name, version, and tags metadata. The description explains that it provides an API with async and sync interfaces. Additionally, it references a mock utility function and mentions using Celery for task execution.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":45-84",
            "content": "# MOCK = os.environ.get(\"MOCK\", None)  # if this is mock test.\nimport json\nfrom mock_utils import mock_calculation_result\nappName = \"IES Optim Server Template\"\nversion = \"0.0.1\"\ntags_metadata = [\n    {\"name\": \"async\", \"description\": \"\u5f02\u6b65\u63a5\u53e3\uff0c\u8c03\u7528\u540e\u7acb\u5373\u8fd4\u56de\"},\n    {\"name\": \"sync\", \"description\": \"\u540c\u6b65\u63a5\u53e3\uff0c\u8c03\u7528\u540e\u9700\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u624d\u8fd4\u56de\"},\n]\ndescription = f\"\"\"\nIES\u7cfb\u7edf\u4eff\u771f\u548c\u4f18\u5316\u7b97\u6cd5\u670d\u52a1\u5668\nOpenAPI\u63cf\u8ff0\u6587\u4ef6(\u53ef\u5bfc\u5165Apifox): https://{host}:{port}/openapi.json\nAPI\u6587\u6863: https://{host}:{port}/docs\n\"\"\"\n# from fastapi.utils import is_body_allowed_for_status_code\n# from starlette.exceptions import HTTPException\nfrom starlette.requests import Request\n# from starlette.responses import JSONResponse  # , Response\n# from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n# define the input structure here.\n# from pydantic import BaseModel\nfrom typing import List  # , Union , Literal, Dict\n# solved or not?\nimport datetime\nfrom celery.result import AsyncResult\nfrom typing import Dict, Any\nif ies_env.STATIC_MOCK is None:\n    from fastapi_celery_server import app as celery_app\n# remember these things won't persist."
        },
        {
            "comment": "This code defines functions to remove stale tasks from a dictionary. It includes two functions: `remove_stale_tasks()`, which removes tasks older than 24 hours, and a decorator `remove_stale_tasks_decorator()` for applying the removal function to other functions. The code also has three dictionaries to store task IDs, objects, and result information.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":85-129",
            "content": "# remove any task without any update for 24 hours.\n# celery has the default of 24 hours. you handle it again here.\n# also has default task time of 1200 seconds. you may experiment.\ntaskDict: Dict[str, AsyncResult] = {}\n\"\"\"\n\u4efb\u52a1ID\u548c\u4efb\u52a1\u5bf9\u8c61\u7684\u5b57\u5178\n\"\"\"\ntaskInfo: Dict[str, datetime.datetime] = {}\n\"\"\"\n\u4efb\u52a1ID\u548c\u4efb\u52a1\u6700\u8fd1\u66f4\u65b0\u65f6\u95f4\u7684\u5b57\u5178\n\"\"\"\ntaskResult: Dict[str, Any] = {}\n\"\"\"\n\u4efb\u52a1ID\u548c\u4efb\u52a1\u7ed3\u679c\u7684\u5b57\u5178\n\"\"\"\ndef remove_stale_tasks():\n    \"\"\"\n    \u904d\u5386\u5e76\u6e05\u966424\u5c0f\u65f6\u672a\u66f4\u65b0\u7684\u4efb\u52a1\n    \"\"\"\n    now = datetime.datetime.now()\n    remove_keys = []\n    for key, value in taskInfo.items():\n        if (now - value).total_seconds() > 3600 * 24:\n            remove_keys.append(key)\n    for key in remove_keys:\n        if key in taskDict.keys():\n            del taskDict[key]\n        if key in taskInfo.keys():\n            del taskInfo[key]\n        if key in taskResult.keys():\n            del taskResult[key]\ndef remove_stale_tasks_decorator(function):\n    \"\"\"\n    \u6e05\u9664\u8fc7\u671f\u4efb\u52a1\u88c5\u9970\u5668\n    \"\"\"\n    def inner_function(*args, **kwargs):\n        remove_stale_tasks()\n        return function(*args, **kwargs)\n    return inner_function"
        },
        {
            "comment": "This code defines two functions: `celery_on_message` and `background_on_message`. The `celery_on_message` function is a callback for Celery task updates, which updates the task status and handles failure by storing traceback information in a dictionary. The `background_on_message` function retrieves the result of completed background tasks. Both functions use logging to print the type and content of received messages.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":132-168",
            "content": "error_log_dict = {}\ndef celery_on_message(body: dict):\n    \"\"\"\n    Celery\u4efb\u52a1\u4fe1\u606f\u66f4\u65b0\u56de\u8c03\u51fd\u6570\n    Args:\n        body (dict): \u66f4\u65b0\u7684\u4efb\u52a1\u4fe1\u606f\n    \"\"\"\n    logger_print(\"BODY TYPE?\", type(body))\n    logger_print(\"ON MESSAGE?\", body)\n    task_id = body[\"task_id\"]\n    status = body[\"status\"]\n    logger_print(\"TASK STATUS?\", status)\n    if status == \"FAILURE\":\n        error_log_dict[task_id] = body.get(\"traceback\", \"\")\n    taskInfo[task_id] = datetime.datetime.now()\n    ###\n    # BODY TYPE? <class 'dict'>\n    # ON MESSAGE? {'status': 'STARTED', 'result': {'pid': 74297, 'hostname': 'celery@MacBook-Air-M1.local'}, 'traceback': None, 'children': [], 'date_done': None, 'task_id': 'c7a5a013-36aa-4242-842a-46fb3bb8e9fa'}\n    ###\n    # BODY TYPE? <class 'dict'>\n    # ON MESSAGE? {'status': 'SUCCESS', 'result': '14', 'traceback': None, 'children': [], 'date_done': '2023-03-28T09:26:50.382791', 'task_id': 'c7a5a013-36aa-4242-842a-46fb3bb8e9fa'}\ndef background_on_message(task: AsyncResult):\n    \"\"\"\n    \u540e\u53f0\u83b7\u53d6\u4efb\u52a1\u8ba1\u7b97\u7ed3\u679c\u7684\u65b9\u6cd5\n    Args:\n        task (AsyncResult): \u4efb\u52a1\u5bf9\u8c61"
        },
        {
            "comment": "This code snippet is from a FastAPI server template, and it sets up the default response class as ORJSONResponse. It includes a logger for printing task status, value type, and value itself. If the task status is \"SUCCESS\", it stores the result in the taskResult dictionary. The comment refers to an issue on GitHub related to using ORJSONResponse.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":169-206",
            "content": "    \"\"\"\n    value = task.get(on_message=celery_on_message, propagate=False)\n    # shall you not check here.\n    # and not the message callback.\n    status = task.status\n    logger_print(\"TASK STATUS?\", status)\n    logger_print()\n    logger_print(\"VALUE TYPE?\", type(value))  # str, '14'\n    logger_print(\"TASK VALUE?\", value)\n    if status == \"SUCCESS\":\n        logger_print(\"TASK RESULT SET\")\n        taskResult[task.id] = value  # this will be exception.\n    else:\n        logger_print(\"NOT SETTING TASK RESULT\")\n# Reference: https://github.com/tiangolo/fastapi/issues/459\n# from typing import Any\n# import orjson\n# from starlette.responses import JSONResponse\n# class ORJSONResponse(JSONResponse):\n#     media_type = \"application/json\"\n#     def render(self, content: Any) -> bytes:\n#         return orjson.dumps(content)\nimport fastapi\napp = FastAPI(\n    debug=True,\n    description=description,\n    version=version,\n    tags_metadata=tags_metadata,\n    # default_response_class=ORJSONResponse,\n    default_response_class=fastapi.responses.ORJSONResponse,"
        },
        {
            "comment": "This code defines a custom route handler class, `ValidationErrorLoggingRoute`, which extends the default FastAPI route handler. It attempts to handle requests, logging request details and potential exceptions while preserving the original route handler functionality.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":207-234",
            "content": ")\n# let us use this instead.\n# ref; https://fastapi.tiangolo.com/advanced/custom-request-and-route/\nfrom fastapi import FastAPI, Request, Response\nfrom fastapi.routing import APIRoute\nfrom typing import Callable\nfrom log_utils import terminal_column_size\nimport json\nclass ValidationErrorLoggingRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n        async def custom_route_handler(request: Request) -> Response:\n            try:\n                return await original_route_handler(request)\n            # except RequestValidationError as exc:\n            except Exception as e:\n                is_json = False\n                try:\n                    body = await request.json()\n                    body = json.dumps(body, indent=4, ensure_ascii=False)\n                    is_json = True\n                except:\n                    body = await request.body()\n                logger_print(\n                    \"request{}\".format(\"_json\" if is_json else \"\")"
        },
        {
            "comment": "The code is defining a route for asynchronous task calculation and implementing exception handling. The `/calculate_async` route handles POST requests, and the `ValidationErrorLoggingRoute` class logs exceptions raised in the request handler. It also defines an exception handler for `RequestValidationError`, logging the request body and returning a 422 Unprocessable Entity response with error details. Additionally, it utilizes `logger_print` function to log strings formatted as underlines. The `uuid` module is imported but not utilized in this code snippet.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":235-266",
            "content": "                    .upper()\n                    .center(terminal_column_size, \"_\"),\n                    body,\n                )\n                logger_print(\"exception\".upper().center(terminal_column_size, \"_\"), e)\n                # detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                # raise HTTPException(status_code=422, detail=detail)\n                raise e\n        return custom_route_handler\napp.router.route_class = ValidationErrorLoggingRoute\n# @app.exception_handler(RequestValidationError)\n# async def request_validation_exception_handler(\n#     request: Request, exc: RequestValidationError\n# ) -> JSONResponse:\n#     # TODO: log request body\n#     # logger_print(\"request\", await request.body(), logger=logger)\n#     logger_print(\"exception\", exc.raw_errors, exc.body, logger=logger)\n#     return JSONResponse(\n#         status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n#         content={\"detail\": jsonable_encoder(exc.errors())},\n#     )\nimport uuid\n@remove_stale_tasks_decorator\n@app.post(\n    \"/calculate_async\","
        },
        {
            "comment": "This function accepts an energy flow graph, and depending on the environment settings, it either returns a calculation ID or states that the submission has failed. In non-static mock or failsafe environments, the function uses Celery to send a task with the graph data for further processing. If successful, a unique calculation ID is generated and stored in the task dictionary.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":267-293",
            "content": "    tags=[\"async\"],\n    description=\"\u586b\u5199\u6570\u636e\u5e76\u63d0\u4ea4\u62d3\u6251\u56fe\uff0c\u5982\u679c\u8fd8\u6709\u8ba1\u7b97\u8d44\u6e90\uff0c\u63d0\u4ea4\u72b6\u6001\u4e3a\u6210\u529f\uff0c\u8fd4\u56de\u8ba1\u7b97ID\uff0c\u5426\u5219\u4e0d\u8fd4\u56de\u8ba1\u7b97ID\uff0c\u63d0\u4ea4\u72b6\u6001\u4e3a\u5931\u8d25\",\n    summary=\"\u5f02\u6b65\u63d0\u4ea4\u80fd\u6d41\u62d3\u6251\u56fe\",\n    response_description=\"\u63d0\u4ea4\u72b6\u6001\u4ee5\u53ca\u6a21\u578b\u8ba1\u7b97ID,\u6839\u636eID\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c\",\n    response_model=CalculationAsyncSubmitResult,\n)\ndef calculate_async(\n    graph: EnergyFlowGraph if not (ies_env.FAILSAFE or ies_env.STATIC_MOCK) else dict,\n    background_task: BackgroundTasks,\n) -> CalculationAsyncSubmitResult:\n    # use celery\n    calculation_id = None\n    submit_result = \"failed\"\n    if ies_env.STATIC_MOCK:\n        submit_result = \"success\"\n        calculation_id = uuid.uuid4().__str__()\n    else:\n        try:\n            function_id = \"fastapi_celery.calculate_energyflow_graph\"\n            task = celery_app.send_task(\n                function_id, args=(graph if isinstance(graph, dict) else graph.dict(),)\n            )  # async result?\n            taskInfo[task.id] = datetime.datetime.now()\n            taskDict[task.id] = task\n            background_task.add_task(background_on_message, task)\n            calculation_id = task.id"
        },
        {
            "comment": "Code tries to handle calculation state requests for a microgrid application. It handles the submission of calculations and retrieves their status using Celery's internal task state. If the environment is in FAILSAFE mode or static mock, it returns success as default calculation state. The code uses FastAPI for handling HTTP requests and return results in JSON format.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":294-330",
            "content": "            submit_result = \"success\"\n        except:\n            traceback.print_exc()\n    if ies_env.FAILSAFE:\n        if calculation_id is None:\n            calculation_id = uuid.uuid4().__str__()\n        if submit_result is not \"success\":\n            submit_result = \"success\"\n    return CalculationAsyncSubmitResult(\n        calculation_id=calculation_id,\n        submit_result=\"success\",\n    )\n@remove_stale_tasks_decorator\n@app.get(\n    \"/get_calculation_state\",\n    tags=[\"async\"],\n    response_model=CalculationStateResult,\n    response_description=\"Celery\u5185\u7f6e\u4efb\u52a1\u72b6\u6001\uff0c\u5982\u679c\u662fnull\u5219\u8868\u793a\u4e0d\u5b58\u5728\u8be5\u4efb\u52a1\",\n    summary=\"\u83b7\u53d6\u8ba1\u7b97\u72b6\u6001\",\n    description=\"\u6839\u636e\u8ba1\u7b97ID\u83b7\u53d6\u8ba1\u7b97\u72b6\u6001\",\n)\ndef get_calculation_state(calculation_id: str) -> CalculationStateResult:\n    \"\"\"\n    \u6839\u636e\u8ba1\u7b97ID\u83b7\u53d6\u8ba1\u7b97\u72b6\u6001\n    Args:\n        calculation_id (str): \u8ba1\u7b97ID\n    Returns:\n        calculation_state (CalculationStateResult): \u8ba1\u7b97\u72b6\u6001\n    \"\"\"\n    if ies_env.STATIC_MOCK or ies_env.FAILSAFE:\n        calculation_state = \"SUCCESS\"\n        # return CalculationStateResult(calculation_state=\"SUCCESS\")\n    else:"
        },
        {
            "comment": "Function returns the current state of a calculation asynchronously and the result if completed. If the calculation is not yet completed, the result is empty. It fetches task details for the given ID, checks its state, and retrieves the result from `taskResult` dictionary if available. The function can be used to track and retrieve results for calculations performed in a microgrid system.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":331-361",
            "content": "        # calculation_state = None\n        # task = taskDict.get(calculation_id, None)\n        if task := taskDict.get(calculation_id, None):\n            calculation_state = task.state\n        else:\n            calculation_state = \"NOT_CREATED\"\n    return CalculationStateResult(calculation_state=calculation_state)\n# from fastapi_datamodel_template import ParetoCurve\nfrom log_utils import logger_traceback\n@remove_stale_tasks_decorator\n@app.get(\n    \"/get_calculation_result_async\",\n    tags=[\"async\"],\n    description=\"\u63d0\u4ea4\u8ba1\u7b97ID\uff0c\u8fd4\u56de\u8ba1\u7b97\u72b6\u6001\uff0c\u5982\u679c\u8ba1\u7b97\u5b8c\u6bd5\u4f1a\u4e00\u8d77\u8fd4\u56de\u6570\u636e\uff0c\u5426\u5219\u6570\u636e\u4e3a\u7a7a\",\n    summary=\"\u5f02\u6b65\u83b7\u53d6\u80fd\u6d41\u62d3\u6251\u8ba1\u7b97\u7ed3\u679c\",\n    response_description=\"\u8ba1\u7b97\u72b6\u6001\u548c\u8ba1\u7b97\u7ed3\u679c\",\n    response_model=CalculationAsyncResult,\n)\ndef get_calculation_result_async(calculation_id: str):\n    if ies_env.STATIC_MOCK:\n        calculation_result, calculation_state = getStaticCalculationResultAndState()\n    else:\n        try:\n            calculation_result = taskResult.get(calculation_id, None)\n            calculation_state = get_calculation_state(calculation_id).calculation_state\n            if calculation_result is None:"
        },
        {
            "comment": "This code handles failed calculations. If the calculation state is \"FAILURE\", it checks if ies_env's FAILSAFE flag is set. If set, it retrieves a static calculation result and state. If not, it gets the error log associated with the calculation ID and creates a new CalculationResult object with an empty result list, success=False, and the error log. Otherwise, if any exception occurs during the execution of the code, it again checks the FAILSAFE flag. If set, it retrieves a static calculation result and state and logs the traceback. If not, it re-raises the exception.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":362-385",
            "content": "                if calculation_state == \"FAILURE\":\n                    if ies_env.FAILSAFE:\n                        (\n                            calculation_result,\n                            calculation_state,\n                        ) = getStaticCalculationResultAndState()\n                    else:\n                        error_log = error_log_dict.get(calculation_id, None)\n                        if error_log:\n                            calculation_result = CalculationResult(\n                                resultList=[], success=False, error_log=error_log\n                            ).dict()\n            else:\n                calculation_result = CalculationResult.parse_obj(calculation_result)\n        except Exception as exc:\n            if ies_env.FAILSAFE:\n                (\n                    calculation_result,\n                    calculation_state,\n                ) = getStaticCalculationResultAndState()\n                logger_traceback()\n            else:\n                raise exc\n        # calculation_result = ("
        },
        {
            "comment": "This code segment calculates and generates a Pareto curve from the result list of a CalculationResult object, if the length of the result list is greater than 1. It sorts the data based on financial objective values and sets the x-label to \"\u7ecf\u6d4e\" (economy) and y-label to \"\u73af\u4fdd\" (environment). The getStaticCalculationResultAndState() function returns a mock calculation result and state as success for testing purposes.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":386-411",
            "content": "        #     CalculationResult.parse_obj(calculation_result)\n        #     if calculation_result\n        #     else None\n        # )\n    # this is for generating pareto curve. since we cannot persist it, leave it to frontend.\n    # if isinstance(calculation_result, CalculationResult):\n    #     if len(RL:=calculation_result.resultList)>1:\n    #         plotList = []\n    #         for result in RL:\n    #             OR = result.objectiveResult\n    #             plotList.append((OR.financialObjective,OR.environmentalObjective))\n    #         plotList.sort(lambda x: x[0])\n    #         calculation_result.paretoCurve = ParetoCurve(x=[e[0] for e in plotList],x_label='\u7ecf\u6d4e', y=[e[1] for e in plotList], y_label='\u73af\u4fdd')\n    return CalculationAsyncResult(\n        calculation_state=calculation_state,\n        calculation_result=calculation_result,\n    )\ndef getStaticCalculationResultAndState():\n    calculation_result = mock_calculation_result.copy()\n    calculation_state = \"SUCCESS\"\n    return calculation_result, calculation_state"
        },
        {
            "comment": "This code defines an API endpoint for revoking a calculation. If the static mock environment is enabled, it returns success and sets the state to \"REVOKED\". Otherwise, if the calculation ID exists in the task dictionary, it terminates the task and returns success with the new calculation state.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":414-439",
            "content": "@remove_stale_tasks_decorator\n@app.get(\n    \"/revoke_calculation\",\n    tags=[\"async\"],\n    description=\"\u63d0\u4ea4\u8ba1\u7b97ID\uff0c\u64a4\u9500\u8ba1\u7b97\",\n    summary=\"\u64a4\u9500\u8ba1\u7b97\u4efb\u52a1\",\n    response_description=\"\u8fd4\u56de\u64a4\u9500\u8ba1\u7b97\u72b6\u6001\",\n    response_model=RevokeResult,\n    # different code and different response models.\n    # so you would return in different models and the api will handle the code.\n    # by default there are some reserved code, for every api. no need to define your own? or the system will merge the custom response code with default ones automatically?\n    # responses={\"200\": {\"description\": \"\u64a4\u9500\u6210\u529f\", \"model\": RevokeResult}},\n)\ndef revoke_calculation(calculation_id: str):\n    revoke_result = \"failed\"\n    calculation_state = None\n    if ies_env.STATIC_MOCK:\n        revoke_result = \"success\"\n        calculation_state = \"REVOKED\"\n    else:\n        if calculation_id in taskDict.keys():\n            logger_print(\"TERMINATING TASK:\", calculation_id)\n            taskDict[calculation_id].revoke(terminate=True)\n            revoke_result = \"success\"\n            calculation_state = get_calculation_state(calculation_id).calculation_state"
        },
        {
            "comment": "The code includes a function that handles task revocation and returns a RevokeResult object. It also has an endpoint to retrieve a list of calculation IDs from the cache. If the environment is in FAILSAFE mode, it ensures the task revocation and state are properly updated. The code imports necessary modules and runs the FastAPI server using Uvicorn.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/fastapi_server_template.py\":440-475",
            "content": "        else:\n            logger_print(\"TASK DOES NOT EXIST:\", calculation_id)\n            calculation_state = \"NOT_CREATED\"\n    if ies_env.FAILSAFE:\n        if revoke_result is not \"success\":\n            revoke_result = \"success\"\n        if calculation_state is not \"REVOKED\":\n            calculation_state = \"REVOKED\"\n    return RevokeResult(\n        revoke_result=revoke_result, calculation_state=calculation_state\n    )\nfrom typing import List\n@app.get(\n    \"/get_calculation_ids\",\n    tags=[\"async\"],\n    response_model=List[str],\n    response_description=\"\u7f13\u5b58\u4e2d\u53ef\u67e5\u8be2\u7684\u4efb\u52a1ID\u5217\u8868\",\n    description=\"\u4efb\u52a1\u5982\u679c24\u5c0f\u65f6\u5185\u6ca1\u6709\u72b6\u6001\u66f4\u65b0\u4f1a\u88ab\u6e05\u51fa\u7f13\u5b58\uff0c\u68c0\u67e5\u7f13\u5b58\u4e2d\u7684\u6240\u6709\u53ef\u67e5\u8be2\u4efb\u52a1ID\",\n    summary=\"\u67e5\u8be2\u4efb\u52a1ID\",\n)\ndef get_calculation_ids() -> List[str]:\n    if ies_env.STATIC_MOCK:\n        calculation_ids = []\n    else:\n        calculation_ids = list(taskDict.keys())\n    return calculation_ids\nimport uvicorn\nuvicorn.run(app, host=host, port=port)"
        }
    ]
}