{
    "summary": "This code imports refrigeration classes, initializes a LiBr model, adjusts data, registers constraints, creates nodes for cold and hot water systems, solves problems with photothermal plate, and visualizes the topology.",
    "details": [
        {
            "comment": "Code imports necessary classes for refrigeration system simulation, including LiBrRefrigeration, CitySupply, Load, and ResourceGet. It then retrieves the cooling load data and adjusts it based on a mathematical formula. The code creates a cold water load, initializes a Model object, gets municipal hot water prices, and begins to initialize a LiBr refrigeration system.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/mini_refrigeration_system.py\":0-43",
            "content": "from integratedEnergySystemPrototypes import (\n    LiBrRefrigeration,  # are you sure there's no need to consume electricity here?\n    CitySupply,\n    Load,\n    # PhotoVoltaic,\n    # GridNet,\n    # no storage?\n    # WaterEnergyStorage,\n)\nfrom demo_utils import LoadGet, ResourceGet\nfrom config import num_hour, day_node\n# num_hour *=3\ndebug = False\nfrom docplex.mp.model import Model\nsimulation_name = \"micro_refrigeration\"\nload = LoadGet()\n# let's augment the load.\nimport math\nimport numpy as np\ncool_load = load.get_cool_load(num_hour)\ndelta = 0.3\ncool_load = (\n    np.array([(1 - delta) + math.cos(i * 0.1) * delta for i in range(len(cool_load))])\n    * cool_load\n)\ncoldWaterLoad = Load(\"cold_water\", cool_load)\nmodel = Model(name=simulation_name)\nresource = ResourceGet()\nmunicipalHotWater_price0 = resource.get_municipalHotWater_price(num_hour)\n# intensityOfIllumination0 = (\n#     resource.get_radiation(path=\"jinan_changqing-hour.dat\", num_hour=num_hour) * 100\n# )\n# let's add illumination data.\nhotWaterLiBr = LiBrRefrigeration("
        },
        {
            "comment": "This code registers constraints for a mini refrigeration system, including high temperature hot water power, plate photothermal device, and municipal hot water supply. It defines the number of hours, model, maximum devices, device prices, efficiencies, output/input types, and debug settings for each component. Constraints are registered for the power_highTemperatureHotWater_sum, platePhotothermal device, and municipalHotWater device in the model.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/mini_refrigeration_system.py\":44-86",
            "content": "    num_hour,\n    model,\n    device_count_max=10000 * 10000,\n    device_price=1000,\n    efficiency=0.9,\n    input_type=\"hot_water\",\n    debug=debug,\n)\nhotWaterLiBr.constraints_register()\n# power_highTemperatureHotWater_sum = model.continuous_var_list(\n#     [i for i in range(0, num_hour)], name=\"power_highTemperatureHotWater_sum\"\n# )\n# # \u5e73\u677f\u5149\u70ed\n# platePhotothermal = PhotoVoltaic(\n#     num_hour,\n#     model,\n#     photoVoltaic_device_max=10000,\n#     device_price=500,\n#     intensityOfIllumination0=intensityOfIllumination0,\n#     efficiency=0.8,\n#     device_name=\"platePhotothermal\",\n# )  # platePhotothermal\n# platePhotothermal.constraints_register(model)\n# \u5e02\u653f\u70ed\u6c34\nmunicipalHotWater = CitySupply(\n    num_hour,\n    model,\n    device_count_max=10000,\n    device_price=3000,\n    running_price=municipalHotWater_price0,\n    efficiency=0.9,\n    output_type=\"hot_water\",\n    debug=debug,\n)\nmunicipalHotWater.constraints_register()\n# model.add_constraints(\n#     power_highTemperatureHotWater_sum[h] ==\n#     # platePhotothermal.power_photoVoltaic[h]+"
        },
        {
            "comment": "This code is creating nodes for cold water and hot water systems. It adds inputs and outputs to each node, connects them in the system topology, and sets constraints for consumption and production during specific hours. The code uses EnergyFlowNodeFactory to simplify node creation and builds relations between nodes.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/mini_refrigeration_system.py\":87-133",
            "content": "#     municipalHotWater.heat_citySupplied[h]\n#     for h in range(num_hour)\n# )\n# model.add_constraints(\n#     hotWaterLiBr.heat_LiBr_from[h] <= power_highTemperatureHotWater_sum[h]\n#     for h in range(num_hour)\n# )\n# # consumption and production\n# model.add_constraints(\n#     cool_load[h] == hotWaterLiBr.cool_LiBr[h] for h in range(num_hour)\n# )\n###### SYSTEM OVERVIEW ######\n#\n# |e\\dv | LB | MH | CL |\n# |-----|----|----|----|\n# | cw  |  s |    |  r |\n# | hw  |  r |  s |    |\n#\n###### SYSTEM TOPOLOGY ######\n#\n# MH -> [NODE1] -> LB -> [NODE2] -> CL\n#\nfrom integratedEnergySystemPrototypes import EnergyFlowNodeFactory\ncold_water_type = \"cold_water\"\nhot_water_type = \"hot_water\"\nNodeFactory = EnergyFlowNodeFactory(model, num_hour, debug)\nNode1 = NodeFactory.create_node(energy_type=hot_water_type)\nNode2 = NodeFactory.create_node(energy_type=cold_water_type)\nNode1.add_input(municipalHotWater)\nNode1.add_output(hotWaterLiBr)\nNode2.add_input(hotWaterLiBr)\nNode2.add_output(coldWaterLoad)\n# Node1.build_relations()\n# Node2.build_relations()"
        },
        {
            "comment": "Code builds systems, asserts NodeFactory's built status, visualizes system topology, solves and logs data with/without plate photothermal.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/mini_refrigeration_system.py\":134-148",
            "content": "systems = [hotWaterLiBr, municipalHotWater, coldWaterLoad]\nNodeFactory.build_relations(systems)\n# systems = [platePhotothermal,hotWaterLiBr,municipalHotWater]\nassert NodeFactory.built\nfrom system_topology_utils import visualizeSystemTopology\nvisualizeSystemTopology(NodeFactory, system_name = 'refrigeration')\nfrom mini_data_log_utils import solve_and_log\nsolve_and_log(systems, model, simulation_name)\n# without platephotothermal: 19327715.402514137\n# with platephotothermal: 13374199.775218224\n# obviously cheaper."
        }
    ]
}