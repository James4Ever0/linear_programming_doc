{
    "summary": "The code defines a class method decorator and a class with a decorated class method. The decorator takes a function as an argument, creating a new function that wraps the original one. Inside this wrapper function, it prints information about the class instance (self), any additional arguments, and keywords before and after invoking the wrapped function. The class has an initialized attribute and a class method decorated with the defined decorator. When an instance of the class is created and the class method is called, it prints the passed parameters and accesses attributes of the class instance.",
    "details": [
        {
            "comment": "The code defines a class method decorator and a class with a decorated class method. The decorator takes a function as an argument, creating a new function that wraps the original one. Inside this wrapper function, it prints information about the class instance (self), any additional arguments, and keywords before and after invoking the wrapped function. The class has an initialized attribute and a class method decorated with the defined decorator. When an instance of the class is created and the class method is called, it prints the passed parameters and accesses attributes of the class instance.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/test_decorate_class_method.py\":0-29",
            "content": "# confusing.\ndef class_method_decorator(func):  # what will be passed to the function?\n    def decorated_func(self: object, *args, **kwargs):\n        # class_instance = args[0] # <- this is the 'self'\n        # really?\n        print(\"CLASS INSTANCE:\", self)\n        print(\"ALL REMAINING ARGS:\", args)\n        print(\"ALL KWARGS:\", kwargs)\n        print(\"___BEFORE INVOKE___\")\n        value = func(self, *args, **kwargs)\n        print(\"___AFTER INVOKE___\")\n        return value\n    return decorated_func\nclass A:\n    def __init__(self, param):\n        self.param = param\n    # cannot use self here. warning!\n    @class_method_decorator\n    def class_method(self, param_0):\n        print(\"PASSED PARAM_0:\", param_0)\n        print(\"CLASS ATTR PARAM:\", self.param)\na = A(\"[PARAM]\")\na.class_method(\"[PARAM_0]\")"
        }
    ]
}