{
    "summary": "The Makefile configures the microgrid server environment, installs dependencies, and includes targets for checks, tests, and release creation. It also provides functions for running commands in specific environments, lists JSON files for simulations, and instructions for building a server and generating documentation. The code handles project tasks, generates and manipulates files, runs alternative solvers with warm start option, writes logs for debugging, and defines test and execution steps for a microgrid solver.",
    "details": [
        {
            "comment": "This Makefile configures the shell flags and environment variables for the microgrid_base project. It checks the operating system type (Windows or Unix-like) and sets specific directories accordingly, ensuring correct execution of the solvers.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":0-25",
            "content": "# https://www.gnu.org/software/make/manual/html_node/Parallel-Output.html\n# gmake -Oline\n# running this under bash. will be a lot better.\n# courtesy from ChatGPT\n.SHELLFLAGS := -ec \n# cygwin heap error: https://blog.csdn.net/lemontree1945/article/details/86975644\n# PS C:\\Users\\z98hu\\scoop\\apps\\git\\2.40.0.windows.1\\usr\\bin> C:\\Users\\z98hu\\scoop\\apps\\git\\2.40.0.windows.1\\usr\\bin\\rebase.exe -b 0x200000000 .\\msys-2.0.dll\n# makefile launches subshell every individual line.\n.PHONY: test\n################ ENVIRONMENT VARIABLES ################\nPLATFORM := $(shell python -c \"import os; print(os.name)\")\nifeq (${PLATFORM}, )\nPLATFORM := $(shell python3 -c \"import os; print(os.name)\") # executed on macos\nendif\nifeq (${PLATFORM}, nt)\nOS_TYPE = windows\nCONDA_EXEC = conda.bat\n# get our solvers in path\nWINDOWS_SOLVERS_DIRS=$(shell python -c \"import os;curdir=os.path.abspath(os.curdir);workfolder=os.path.dirname(os.path.dirname(curdir));solverdir=os.path.join(workfolder,'windows_solvers');pathaddons=';'.join([os.path.join(solverdir,os.path.join(e,'bin')) for e in ['scip','cbc','ipopt']]);print(pathaddons)\")"
        },
        {
            "comment": "This Makefile sets environment variables, defines paths for different OS types, and specifies the Conda environment to use. It also provides functions to run commands in specific Conda environments with live-stream output. Additionally, it lists certain JSON files and potential plot names associated with microgrid simulation.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":26-69",
            "content": "export PATH := ${WINDOWS_SOLVERS_DIRS};$(PATH)\nelse\nCONDA_EXEC = conda\nOS_TYPE = macos\nendif\nPYTHON_ENV = -X utf8=1\nifeq (${OS_TYPE}, macos)\nCONDA_ENV = rosetta\nPYTHON = /usr/bin/python3\nGSUDO = \nNO_GSUDO = \nelse\nCONDA_ENV = cplex\nPYTHON = python ${PYTHON_ENV}\nGSUDO = gsudo\nNO_GSUDO = gsudo -k\n$(shell gsudo cache on)\nendif\nPLATFORM_NAME:=$(shell python -c \"import platform;print(platform.system())\")\nifeq (${PLATFORM_NAME}, Linux)\nCONDA_ENV=cplex\nendif\nCONDA = ${CONDA_EXEC} run -n ${CONDA_ENV} --live-stream --no-capture-output\nrun_in_conda_env = ${CONDA_EXEC} run -n $(1) --live-stream --no-capture-output python\n# run_in_conda_env = conda run -n $(1) --live-stream --no-capture-output python\n# CONDA = conda run -n rosetta --live-stream --no-capture-output\nexport OS_TYPE PLATFORM PYTHON PYTHON_ENV CONDA_ENV\n################ VARIABLES ################\nMICROGRID_TYPESYS_JSONS = microgrid_v2_all_types_structured.json microgrid_v2_connectivity_matrix.json microgrid_v2_device_port_type_mapping.json\nTYPESYS_PLOTS = type_system.png device_connectivity_matrix.png"
        },
        {
            "comment": "This Makefile defines paths and files for a microgrid server release, including the server code, scripts, resource directories, and filtered utilities. It also mentions optional test directory, archive format, model code, and uses wildcard pattern to precompute patterns for filtered utilities.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":71-98",
            "content": "TYPE_UTILS_RESDIR = type_utils_resources\nTYPE_UTILS_RESOURCE_JSON = ${TYPE_UTILS_RESDIR}/extra_ports.json ${TYPE_UTILS_RESDIR}/microgrid_ports.json\nTYPE_UTILS_EXCEL_INPUT = ${TYPE_UTILS_RESDIR}/\u8bbe\u5907\u63a5\u53e3_10_11.xlsx\nRELEASE_DIR = microgrid_server_release\nSERVER_RELEASE_DIR = ${RELEASE_DIR}/server\nRELEASE_INIT_DIR = ${RELEASE_DIR}/init\n# RELEASE_TEST_DIR = ${RELEASE_DIR}/test\nSERVER_CODE = fastapi_celery_server.py fastapi_datamodel_template.py fastapi_server_template.py fastapi_celery_functions.py\nSERVER_SCRIPT = fastapi_terminate_service.sh fastapi_tmuxp.sh fastapi_tmuxp.yml\nRELEASE_ARCHIVE = release.7z\nEXPORT_FORMAT_CODE = export_format_validate.py export_format_units.py\nMODEL_CODE = topo_check.py type_def.py topo_check_v2.py ies_optim.py ies_optim_legacy.py prolog_gen.pro.j2 ${EXPORT_FORMAT_CODE}\n# use $(wildcard <pattern>) to precompute the pattern.\n# FILTERED_UTILS = $(wildcard csv*)\nFILTERED_UTILS = $(wildcard csv* pyright*)\n# FILTERED_UTILS = $(wildcard csv* pyright* jinja*)\n# FILTERED_UTILS = $(wildcard csv* pyright* jinja* json*)"
        },
        {
            "comment": "This Makefile defines UTILS, DOCKERFILES, and EXTRA_CODE_DEPS for building a project. It also lists EXPORT_FORMAT_SCHEMA and EXTRA_DATA_DEPS for exporting data and UNIT_DEFINITIONS for unit definitions. PYTHON_REQUIREMENTS are specified for the Python environment.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":100-119",
            "content": "# UTILS = $(filter-out ${FILTERED_UTILS}, *_utils.py)\nUTILS = $(filter-out ${FILTERED_UTILS}, $(wildcard *_utils.py))\nDOCKERFILES = Dockerfile_patch Dockerfile_update .dockerignore\n# DOCKERFILES = Dockerfile_patch Dockerfile_update Dockerfile_update_self\n# DOCKERFILES = Dockerfile_*\nDOCKER_DEPS = docker_launch.py ${DOCKERFILES}\nEXTRA_CODE_DEPS = passwords.py solve_model.py constants.py pyomo_*.py config.py config_dataclasses.py shared_datamodels.py ${DOCKER_DEPS} ${UTILS}\n# EXTRA_CODE_DEPS = passwords.py solve_model.py constants.py pyomo_patch.py config.py ${DOCKER_DEPS} ${UTILS}\n# EXTRA_CODE_DEPS = unit_utils.py passwords.py solve_model.py expr_utils.py constants.py log_utils.py pyomo_patch.py debug_utils.py conflict_utils.py json_utils.py error_utils.py\nEXPORT_FORMAT_SCHEMA = export_format.json planning_export_format.json\nEXTRA_DATA_DEPS = frontend_sim_param_translation.json test_output_full_mock_reduced.json ${EXPORT_FORMAT_SCHEMA}\nUNIT_DEFINITIONS = ../merged_units.txt ../constants_en.txt\nPYTHON_REQUIREMENTS = requirements*.txt"
        },
        {
            "comment": "This Makefile sets up environment for running microgrid simulations. It initializes scripts, defines test code and input files, and creates log directories. The main target runs the simulation with OS-dependent commands. It also installs Python requirements in a Conda environment, starts a server, and creates a .requirements file for tracking installed packages.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":121-159",
            "content": "INIT_SCRIPTS = init*.sh conda_init.sh\nINIT_FILES = ${PYTHON_REQUIREMENTS} ${INIT_SCRIPTS}\nTEST_INPUT_FORMAT_FILES = template_input.json test_json_input_format.py\nTEST_CODE = test_topo_check.py ${TEST_INPUT_FORMAT_FILES}\nLOG_DIRS = logs\n# LOG_DIRS = logs ${SERVER_RELEASE_DIR}/logs\nPARAM_BASE_REQUIREMENTS = frontend_sim_param_translation.json microgrid_jinja_param_base.json ${MICROGRID_TYPESYS_JSONS} lib_parse_params.py\nifeq (${OS_TYPE}, macos)\nMAIN_EXEC=bash cplex_test.sh\n# MAIN_EXEC=${CONDA} bash cplex_test.sh\nelse\nMAIN_EXEC=env BETTER_EXCEPTIONS=1 ${PYTHON} test_topo_check.py -f\nendif\n################ META TARGETS ################\nmain: release\n\t${MAIN_EXEC}\n.requirements: ${PYTHON_REQUIREMENTS}\n\t${PYTHON} -m pip install -r requirements.txt\n\t$(call run_in_conda_env,docplex) -m pip install -r requirements_docplex.txt\n\ttouch .requirements\n${LOG_DIRS}:\n\tmkdir -p $@\n\ttouch $@/.log\nserve: release\n\tcd ${SERVER_RELEASE_DIR}\n\tbash fastapi_tmuxp.sh ${OS_TYPE}\n# ref: https://www.gnu.org/software/make/manual/html_node/Variables_002fRecursion.html"
        },
        {
            "comment": "This Makefile contains targets for running code checks, tests, and creating a release. The \"release\" target packs necessary files and generates a release archive. The \"code\" target compiles the model code, test code, and other dependencies. The Makefile uses various other files and directories to perform these tasks.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":161-196",
            "content": "code_check: code_checker.py\n\t${PYTHON} code_checker.py -- ${MAKE} ${MAKECMDGOALS}\ntest: release\n\t${MAKE} -e -C test\nt_export: release\n\t${MAKE} -e -C test t_export\nt_failsafe: release\n\t${MAKE} -e -C test t_failsafe\nt_model: release\n\t${MAKE} -e -C test t_model\ndsl:\n\t${MAKE} -e -C dsl_parser\n# packup all necessary files for the test.\nrelease: code test_code ${LOG_DIRS} server code_check .requirements release_prepare\n\techo \"Release file ready at ${RELEASE_ARCHIVE}\"\n\techo \"You may run 'upload_to_server' scripts\"\nrelease_prepare: ${INIT_FILES} ${UNIT_DEFINITIONS} ${MODEL_CODE} ${EXTRA_CODE_DEPS} ${EXTRA_DATA_DEPS} ${SERVER_CODE} ${SERVER_SCRIPT} ${TEST_CODE}\n\trm -rf ${RELEASE_DIR}\n\trm -rf ${RELEASE_ARCHIVE}\n\tmkdir -p ${SERVER_RELEASE_DIR}\n\tmkdir -p ${RELEASE_INIT_DIR}\n\tcp ${INIT_FILES} ${RELEASE_INIT_DIR}\n\tcp ${UNIT_DEFINITIONS} ${RELEASE_DIR}\n\tcp ${MODEL_CODE} ${EXTRA_CODE_DEPS} ${EXTRA_DATA_DEPS} ${SERVER_CODE} ${SERVER_SCRIPT} ${TEST_CODE} ${SERVER_RELEASE_DIR}\n\t7z a ${RELEASE_ARCHIVE} ${RELEASE_DIR}\ncode: ${EXTRA_CODE_DEPS} ${EXTRA_DATA_DEPS} ${MODEL_CODE} ${TEST_CODE}"
        },
        {
            "comment": "This Makefile includes instructions for building a server, executing tests, and generating documentation. It uses Python scripts to process templates and validate data formats. The file also mentions specific Python files and dependencies required for these tasks.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":198-224",
            "content": "server: server_code server_script\nserver_code: ${SERVER_CODE}\nserver_script: ${SERVER_SCRIPT}\ntest_code: ${TEST_CODE}\ndocs: constraints.log\nserver_docs: openapi.json\ntemplates: output_template.json template_input.json\n################ IMPLEMENTATION ################\n# topo_check.py ies_optim.py: topo_check.py.j2 ies_optim.py.j2 jinja_template_model_generator.py jinja_utils.py param_base.py unit_utils.py ${UNIT_DEFINITIONS} ${PARAM_BASE_REQUIREMENTS}\ntopo_check_v2.py ies_optim_legacy.py: topo_check_v2.py.j2 ies_optim_legacy.py.j2 jinja_template_model_generator.py jinja_utils.py param_base.py unit_utils.py ${UNIT_DEFINITIONS} ${PARAM_BASE_REQUIREMENTS}\n\t${PYTHON} jinja_template_model_generator.py\n# pyright_regex_check:\n# \t${PYTHON} pyright_utils.py\n${EXPORT_FORMAT_CODE} ${EXPORT_FORMAT_SCHEMA} sim_param_export.xlsx: export_format_validate.py.j2 export_format_units.py.j2 parse_export_format.py jinja_utils.py \u8bbe\u5907\u4fe1\u606f\u5e93\u5404\u53c2\u6570.xlsx param_base.py unit_utils.py ${UNIT_DEFINITIONS}\n\t${PYTHON} parse_export_format.py\nparam_base.py: device_whitelist.py"
        },
        {
            "comment": "This code is responsible for creating various JSON files and executing Python scripts to preprocess data. The files are generated by running specific commands with different parameters, such as parsing units, generating microgrid Jinja parameter base, creating type system JSONs, and translating frontend simulation parameters. Various intermediate files like CSVs, XLSXs, and other JSONs are used throughout the process.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":226-241",
            "content": "parse_units_and_names.py: device_whitelist.py\n# microgrid_jinja_param_base.json: device_params_intermediate.json microgrid_device_port_type_mapping.json parse_units_and_names.py unit_utils.py ${UNIT_DEFINITIONS}\n# microgrid_jinja_param_base.json: device_params_intermediate.json microgrid_v2_device_port_type_mapping.json parse_units_and_names.py unit_utils.py ${UNIT_DEFINITIONS}\nmicrogrid_jinja_param_base.json: device_params_intermediate.json ${TYPE_UTILS_RESOURCE_JSON} parse_units_and_names.py unit_utils.py ${UNIT_DEFINITIONS}\n\t${PYTHON} parse_units_and_names.py\n${MICROGRID_TYPESYS_JSONS} ${TYPESYS_PLOTS}: type_system_v2.py csv_utils.py\n\t${PYTHON} type_system_v2.py -p\nfrontend_sim_param_translation.json: frontend_sim_param_translation.js parse_frontend_sim_param_translation.py\n\t${PYTHON} parse_frontend_sim_param_translation.py\n# device_params_intermediate.json microgrid_device_params_intermediate.json: parse_params.py \u8bbe\u5907\u63a5\u53e3-\u5fae\u7535\u7f51\u53c2\u6570.csv \u8bbe\u5907\u4fe1\u606f\u5e93\u5404\u53c2\u6570.xlsx\ndevice_params_intermediate.json microgrid_device_"
        },
        {
            "comment": "This code contains various tasks to generate and manipulate files for a microgrid project. It includes tasks like parsing parameters, generating constraints, creating passwords, reducing data size, and running alternative solvers with warm start option.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":241-275",
            "content": "params_intermediate.json ${TYPE_UTILS_RESOURCE_JSON}: parse_params.py \u8bbe\u5907\u63a5\u53e3-\u5fae\u7535\u7f51\u53c2\u6570.csv \u8bbe\u5907\u4fe1\u606f\u5e93\u5404\u53c2\u6570_23_10_11_from_7_24.xlsx ${TYPE_UTILS_EXCEL_INPUT}\n\t${PYTHON} parse_params.py\nconstraints.log: parse_optim_constraints.py ies_optim.py\n\t${PYTHON} parse_optim_constraints.py > constraints.log\npasswords.py: passwords_template.py\n\tcp passwords_template.py passwords.py\ntest_output_full_mock.json: test_output_full.json\n\tcp test_output_full.json test_output_full_mock.json\ntype_utils.py: type_utils.py.j2 render_type_utils.py ${TYPE_UTILS_RESOURCE_JSON}\n\t${PYTHON} render_type_utils.py\ntest_output_full_mock_reduced.json: test_output_full_mock.json reduce_demo_data_size.py json_utils.py\n\t${PYTHON} reduce_demo_data_size.py\n# great.\ntest_make_args:\n\t# echo ${MAKEFLAGS}\n\techo ${MAKECMDGOALS}\ntest_utils_wildcard:\n\techo ${UTILS}\n\techo ${FILTERED_UTILS}\n# working!\n# cplex & cbc support warmstart\n# scip: randseed\n# ipopt: warm_start_init_point\ndefine run_alternative_solver\n\tif [ '${2}' = '1' ] ; then \\\n\t\twarm_start=WARM_START=1; \\\n\t\tlogfile_name=$${solver}_warm_start; \\"
        },
        {
            "comment": "This code defines a rule to run alternative solvers and tests their behavior. It uses variables for the solver type, warm-starting, and infeasibility detection. The code runs the chosen solver with different conditions to check its performance. The warm-start and infeasible conditions are set accordingly using if statements. Finally, it writes logs to a text file for debugging purposes.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":276-310",
            "content": "\telse \\\n\t\twarm_start=; \\\n\t\tlogfile_name=$${solver}; \\\n\tfi; \\\n\tif [ '${3}' = '1' ] ; then \\\n\t\tinfeasible=INFEASIBLE=1; \\\n\t\tlogfile_name=$${logfile}_infeaible; \\\n\telse \\\n\t\tinfeasible=; \\\n\t\tlogfile_name=$${logfile}; \\\n\tfi; \\\n\tenv SOLVER_NAME=$1 $${warm_start} $${infeasible} $${PYTHON} alternative_solver.py 2>&1 | tee $${logfile_name}.txt \nendef\noss_solvers=scip cbc ipopt\nwarmstart_solvers=cbc cplex\n# ipopt supports warmstart by default. just pass values to variable 'initialize' parameter\n# it will cause trouble if previous problematic solution is still there.\n# maybe it is also true for scip.\nCD_TEST_DEBUG_DIR=cd cplex_abnormal_exit_condition_debug &&\ndefine run_test_alternative_solver\n\t${CD_TEST_DEBUG_DIR} for solver in $(oss_solvers); do \\\n\t\t$(call run_alternative_solver,$${solver},0,0); \\\n\tdone\n\t${CD_TEST_DEBUG_DIR} for solver in $(oss_solvers); do \\\n\t\t$(call run_alternative_solver,$${solver},0,1); \\\n\tdone\n\t${CD_TEST_DEBUG_DIR} for solver in $(warmstart_solvers); do \\\n\t\t$(call run_alternative_solver,$${solver},1,0); \\"
        },
        {
            "comment": "This code defines various test and execution steps for a microgrid solver. It utilizes different solvers, scripts, and commands to check topology, execute tests, and run alternative solvers for the microgrid problem.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/Makefile\":311-336",
            "content": "\tdone\n\t${CD_TEST_DEBUG_DIR} for solver in $(warmstart_solvers); do \\\n\t\t$(call run_alternative_solver,$${solver},1,1); \\\n\tdone\nendef\ntest_alternative_solver:\n\t$(call run_test_alternative_solver)\ntest_persistent_solver:\n\t# ${NO_GSUDO}\n\t# may get solution by input .nl model file.\n\t${CD_TEST_DEBUG_DIR} ${CONDA} python scip_persistent.py\nsolver_repl:\n\tcmd /K\ntest_topo_check:\n\t${PYTHON} test_topo_check.py\nmicrogrid_topo_check:\n\t${PYTHON} microgrid_topo_check.py\ndiesel_topo_check:\n\t${PYTHON} diesel_topo_check.py"
        }
    ]
}