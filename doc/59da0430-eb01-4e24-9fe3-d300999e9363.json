{
    "summary": "The code loads and parses data, identifies device types and shapes, searches for specific strings within XML format, iterates through a background's text excluding forbidden words, checks status and msg, and prints page-wise extracted data from the \"cmp\" list.",
    "details": [
        {
            "comment": "The code is loading data from 'cloudpss_component_ports.json' and parsing it using JSON module, BeautifulSoup for XML shape manipulation. It iterates through each element in 'data[\"cmp\"]', identifies the device type (e.g., transformer, generator) with its shape in XML format and searches for specific text strings within the shapes, possibly for further processing or analysis.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_extract_component_ports.py\":0-25",
            "content": "source = \"cloudpss_component_ports.json\"\nimport json\nfrom bs4 import BeautifulSoup\n# keys = ['\u6bcd\u7ebf', '\u71c3\u6c14\u5185\u71c3\u673a', '\u8d1f\u8377',]\n# values = ['', '<text str=\\\"\u7535\u63a5\u53e3\\\" x=\\\"15.983333333333334\\\" y=\\\"28.52569986979166\\\" align=\\\"center\\\" valign=\\\"middle\\\" vertical=\\\"0\\\" rotation=\\\"0\\\" localized=\\\"0\\\" align-shape=\\\"0\\\" />', '<text str=\\\"\u70ed\u6c34\u63a5\u53e3\\\" x=\\\"24.6356416004801\\\" y=\\\"44.88333333333334\\\" align=\\\"center\\\" valign=\\\"middle\\\" vertical=\\\"0\\\" rotation=\\\"0\\\" localized=\\\"0\\\" align-shape=\\\"0\\\" />',]\nforbidden_words = [\n    \"%CompName\",\n    \"${isNaN(V)?V:Number(V).toFixed(4)}\u2220${isNaN(Angle)?Angle:Number(Angle).toFixed(2)}\u00b0\",\n    \"%VBase\",\n    \"1.0000\u22200.00\u00b0\",\n    \"115.0 [kV]\",\n]\ncontent = open(source, \"r\", encoding=\"utf-8\").read()\ndata = json.loads(content)\nfor element in data[\"cmp\"]:\n    value = element[\"typename\"]\n    print(\"DEVICE:\", value)\n    print()\n    shape = element[\"shape\"]\n    xml_shape = BeautifulSoup(shape, features=\"xml\")\n    # breakpoint()\n    # xml_shape.find_all(\"background\")[0].find_all(\"text\")[0]['str']\n    for background in xml_shape.find_all(\"background\"):"
        },
        {
            "comment": "The code iterates through a background's text, excluding forbidden words, and prints the remaining strings. It then asserts that status is 0 and msg is an empty string, suggesting further checks or error handling. The totalPage variable indicates there are four pages, requiring iteration. Page numbering starts from 1. The code references a main data list called \"cmp\" and uses it to extract keys and values into a dictionary named \"my_dict\", which is then printed.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/cloudpss_extract_component_ports.py\":26-43",
            "content": "        for text in background.find_all(\"text\"):\n            string = text[\"str\"]\n            if string not in forbidden_words:\n                print(string)\n    print(\"_\" * 20)\n# assert status == 0\n# assert msg == \"\"\n# totalPage is 4, we need to iterate.\n# page start from 1\n# cmp is the main data list.\n# for key, value in data.items():\n#     print(\"KEY?\", key)\n#     # print(\"VAL?\", value)\n# my_dict = dict(zip(keys, values))\n# print(my_dict)"
        }
    ]
}