{
    "summary": "This code configures solver options for microgrid optimization and defines CLI commands to interact with the optimizer, including printing progress, exiting, saving/restoring solutions, displaying solver statistics, branching/cutting variables, performing heuristic search, solving using MIP solver, and setting variable/constraint priority.",
    "details": [
        {
            "comment": "Code snippet contains various constants and solver options, including time-related variables, and CBC REPL keywords with corresponding double parameters for a microgrid simulation. It also includes references to log_utils, enum, and strenum modules.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/constants.py\":0-43",
            "content": "from log_utils import logger_print\n# UNKNOWN = 'unconnected'\nUNKNOWN = \"any\"\n\u6bcf\u5c0f\u65f6\u79d2\u6570 = 3600\n\u6bcf\u5929\u5c0f\u65f6\u6570 = 24\n\u6bcf\u5e74\u5929\u6570 = 365\n\u79d2\u7ea7\u4eff\u771f\u5c0f\u65f6\u6570 = 2\n\u4e24\u5c0f\u65f6\u79d2\u6570 = \u6bcf\u5c0f\u65f6\u79d2\u6570 * \u79d2\u7ea7\u4eff\u771f\u5c0f\u65f6\u6570\n\u6bcf\u5e74\u5c0f\u65f6\u6570 = \u6bcf\u5929\u5c0f\u65f6\u6570 * \u6bcf\u5e74\u5929\u6570\n\u6bcf\u5e74\u6708\u6570 = 12\nfrom enum import auto\nfrom strenum import StrEnum\nclass Solver(StrEnum):\n    cplex = auto()\n    gurobi = auto()\n    ipopt = auto()\n    cbc = auto()\n    scip = auto()\n    # params: https://www.scipopt.org/doc/html/PARAMETERS.php\n    # TODO: set all failsafe methods into find first solution and return\n    \"\"\"change minuc -> optimize\"\"\"\n    glpk = auto()\n\"\"\"\ncbc repl keywords explained: (from chatgpt)\nSure, here's an explanation of all the CBC REPL keywords:\nDouble parameters:\n- `dualB(ound)` - dual bound value for the problem\n- `dualT(olerance)` - dual feasibility tolerance\n- `primalT(olerance)` - primal feasibility tolerance\n- `primalW(eight)` - weight for primal infeasibility in the objective\n- `psi` - objective function weight\n- `zeroT(olerance)` - zero tolerance for problem constraints\nBranch and Cut double parameters:\n- `allow(ableGap)` - allowable gap between the best integer feasible solution and the best bound"
        },
        {
            "comment": "This code defines various integer parameters for a solver, including cutoff bounds, tolerances, time limits, and factorization sizes. It also includes options for output format, logging level, random number generator seed, and enabling/disabling certain modes. These parameters control the behavior of the solver and influence its efficiency and accuracy.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/constants.py\":44-62",
            "content": "- `cuto(ff)` - cutoff bound for the problem\n- `inc(rement)` - increment in the objective function value when the solver is unable to find a better feasible solution\n- `integerT(olerance)` - tolerance for considering a variable to be integer\n- `preT(olerance)` - tolerance for problem constraints before presolve\n- `pumpC(utoff)` - cutoff value for the feasibility pump heuristic\n- `ratio(Gap)` - relative gap tolerance for the problem\n- `sec(onds)` - maximum time allowed for solving the problem in seconds\nInteger parameters:\n- `force(Solution)` - force a solution to be found within a certain number of iterations\n- `idiot(Crash)` - enable/disable idiot crash mode\n- `maxF(actor)` - maximum factorization size allowed\n- `maxIt(erations)` - maximum number of iterations allowed\n- `output(Format)` - output format for the solution\n- `randomS(eed)` - seed for the random number generator\n- `slog(Level)` - logging level for the solver\n- `slogger_print(Crash)` - enable/disable sprint crash mode\nBranch and Cut integer parameters:"
        },
        {
            "comment": "This code defines various constants for a branch and cut solver, including maximum depth for cutting planes, tree search parameters, and logging levels. It also includes settings for passing cuts and information between nodes during the search process.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/constants.py\":63-74",
            "content": "- `cutD(epth)` - maximum depth to explore when generating cutting planes\n- `cutL(ength)` - maximum number of non-zero coefficients in a generated cutting plane\n- `depth(MiniBab)` - maximum depth for the tree search\n- `hot(StartMaxIts)` - maximum number of iterations to perform during a hot start\n- `log(Level)` - logging level for the branch and cut solver\n- `maxN(odes)` - maximum number of nodes to explore during the tree search\n- `maxSaved(Solutions)` - maximum number of solutions to save during the search\n- `maxSo(lutions)` - maximum number of solutions to find before stopping the search\n- `passC(uts)` - enable/disable passing cuts from parent to child nodes during the tree search\n- `passF(easibilityPump)` - enable/disable passing information from the feasibility pump heuristic from parent to child nodes during the tree search\n- `passT(reeCuts)` - enable/disable passing tree cuts from parent to child nodes during the tree search\n- `pumpT(une)` - tuning parameter for the feasibility pump heuristic"
        },
        {
            "comment": "This code defines constants and keyword parameters for a branch and cut solver. The constants include seed for random number generator, passes to make when generating cutting planes, and strategy for variable selection. Keyword parameters control display of commands, use of Cholesky factorization, enabling/disabling crash mode or crossover during tree search, direction of optimization, allowed errors, factorization method, keeping original variable names in output, displaying messages, perturbation amount, and presolve.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/constants.py\":75-93",
            "content": "- `randomC(bcSeed)` - seed for the random number generator used by the branch and cut solver\n- `slow(cutpasses)` - number of passes to make when generating cutting planes\n- `strat(egy)` - strategy for selecting variables to branch on\n- `strong(Branching)` - enable/disable strong branching\n- `trust(PseudoCosts)` - trust level for the pseudo-costs of variables\nKeyword parameters:\n- `allC(ommands)` - display all available commands\n- `chol(esky)` - enable/disable the use of Cholesky factorization\n- `crash` - enable/disable crash mode\n- `cross(over)` - enable/disable crossover during tree search\n- `direction` - direction of the optimization\n- `error(sAllowed)` - number of allowed errors during execution\n- `fact(orization)` - factorization method to use\n- `keepN(ames)` - enable/disable keeping original variable names in the output\n- `mess(ages)` - enable/disable display of messages during execution\n- `perturb(ation)` - perturbation amount to use\n- `presolve` - enable/disable presolve\n- `printi(ngOptions)` - display printing options"
        },
        {
            "comment": "This code defines various parameters for a Branch and Cut algorithm, including scaling, timing information, and different types of cuts to enable/disable. It also includes options for using CPLEX for linear programming and specific heuristics like DINS and diving.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/constants.py\":94-112",
            "content": "- `scal(ing)` - enable/disable scaling of the problem\n- `timeM(ode)` - display timing information\nBranch and Cut keyword parameters:\n- `clique(Cuts)` - enable/disable the generation of clique cuts\n- `combine(Solutions)` - enable/disable the combination of solutions during tree search\n- `combine2(Solutions)` - enable/disable the combination of solutions during tree search\n- `constraint(fromCutoff)` - constraint to add when a cutoff bound is reached\n- `cost(Strategy)` - cost strategy to use\n- `cplex(Use)` - use CPLEX for linear programming\n- `cuts(OnOff)` - enable/disable all cuts\n- `Dins` - enable/disable DINS heuristic\n- `DivingS(ome)` - enable/disable diving heuristic\n- `DivingC(oefficient)` - diving coefficient to use\n- `DivingF(ractional)` - enable/disable diving on fractional variables\n- `DivingG(uided)` - enable/disable guided diving heuristic\n- `DivingL(ineSearch)` - enable/disable line search for diving heuristic\n- `DivingP(seudoCost)` - enable/disable pseudo-cost diving heuristic\n- `DivingV(ectorLength)` - diving vector length to use"
        },
        {
            "comment": "This code snippet appears to be defining various options that can be enabled or disabled for a certain optimization algorithm. These options include different heuristics, cuts types, and search strategies. The user has the flexibility to choose which options they want to use based on their specific needs. It seems to be related to mathematical optimization, potentially involving linear programming problems.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/constants.py\":113-127",
            "content": "- `dw(Heuristic)` - enable/disable DW heuristic\n- `feas(ibilityPump)` - enable/disable feasibility pump heuristic\n- `flow(CoverCuts)` - enable/disable the generation of flow cover cuts\n- `GMI(Cuts)` - enable/disable the generation of Gomory mixed integer cuts\n- `gomory(Cuts)` - enable/disable the generation of Gomory cuts\n- `greedy(Heuristic)` - enable/disable greedy heuristic\n- `heur(isticsOnOff)` - enable/disable all heuristics\n- `knapsack(Cuts)` - enable/disable the generation of knapsack cuts\n- `lagomory(Cuts)` - enable/disable the generation of Lagrangean relaxation Gomory cuts\n- `latwomir(Cuts)` - enable/disable the generation of Lattimore-Foland cuts\n- `lift(AndProjectCuts)` - enable/disable the generation of lift-and-project cuts\n- `local(TreeSearch)` - enable/disable local search during tree search\n- `mixed(IntegerRoundingCuts)` - enable/disable mixed integer rounding cuts\n- `node(Strategy)` - node selection strategy to use\n- `PrepN(ames)` - enable/disable preserving original variable names in the output"
        },
        {
            "comment": "This code defines various heuristics and options that can be enabled or disabled in a microgrid optimization process. These include pivot-and-complement, pivot-and-fix, preprocessing, probing cuts, proximity search, randomized rounding, reduce-and-split cuts, residual capacity cuts, RENS heuristic, RINS heuristic, rounding heuristic, SOS options and prioritization methods, generation of two-MIR cuts, variable neighborhood search heuristic, and generation of zero-half cuts.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/constants.py\":128-144",
            "content": "- `pivotAndC(omplement)` - enable/disable pivot-and-complement heuristic\n- `pivotAndF(ix)` - enable/disable pivot-and-fix heuristic\n- `preprocess` - enable/disable preprocessing\n- `probing(Cuts)` - enable/disable the generation of probing cuts\n- `proximity(Search)` - enable/disable proximity search\n- `randomi(zedRounding)` - enable/disable randomized rounding heuristic\n- `reduce(AndSplitCuts)` - enable/disable the generation of reduce-and-split cuts\n- `reduce2(AndSplitCuts)` - enable/disable the generation of reduce-and-split cuts\n- `residual(CapacityCuts)` - enable/disable the generation of residual capacity cuts\n- `Rens` - enable/disable RENS heuristic\n- `Rins` - enable/disable RINS heuristic\n- `round(ingHeuristic)` - enable/disable rounding heuristic\n- `sosO(ptions)` - SOS option to use\n- `sosP(rioritize)` - SOS prioritization method to use\n- `two(MirCuts)` - enable/disable the generation of two-MIR cuts\n- `Vnd(VariableNeighborhoodSearch)` - enable/disable variable neighborhood search heuristic\n- `zero(HalfCuts)` - enable/disable the generation of zero-half cuts"
        },
        {
            "comment": "The code provides a list of available actions or string parameters that can be used to control the behavior and execution of the CBC solver. These commands include options for displaying solution variables, enabling/disabling certain solving methods, setting optimization direction, importing/exporting problems, and displaying help information.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/constants.py\":146-165",
            "content": "Actions or string parameters:\n- `allS(lack)` - display all slack variables\n- `barr(ier)` - enable/disable barrier method\n- `basisI(n)` - load an initial basis from a file\n- `basisO(ut)` - write the final basis to a file\n- `directory` - set the directory for input/output files\n- `dualS(implex)` - enable/disable dual simplex method\n- `either(Simplex)` - enable/disable either simplex method\n- `end` - end the current execution\n- `exit` - exit the CBC REPL\n- `export` - export the problem to a file\n- `gsolu(tion)` - enable/disable display of best feasible solution found so far\n- `guess` - enable/disable intelligent guess for initial solution\n- `help` - display help information\n- `import` - import a problem from a file\n- `initialS(olve)` - solve the problem using the initial values of the decision\n- `max(imize)` - set the optimization direction to maximize (default)\n- `min(imize)` - set the optimization direction to minimize\n- `para(metrics)` - display the parameters used by the solver\n- `primalS(implex)` - enable/disable primal simplex method"
        },
        {
            "comment": "This code snippet defines various command-line interface (CLI) commands to interact with the optimization solver. Commands include enabling/disabling progress printing, exiting the program, saving and restoring solutions, displaying current solution, showing solver statistics, stopping execution, branching and cutting variables, performing heuristic search, solving the problem using MIP solver, displaying best found solution, and setting variable or constraint priority.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/constants.py\":166-182",
            "content": "- `printM(ask)` - enable/disable printing of the solution progress\n- `quit` - exit the CBC REPL\n- `restoreS(olution)` - restore a saved solution\n- `saveS(olution)` - save the current solution\n- `solu(tion)` - display the current solution\n- `stat(istics)` - display the solver statistics\n- `stop` - stop the current execution\nBranch and Cut actions:\n- `branch(AndCut)` - branch on a variable and generate cutting planes\n- `doH(euristic)` - perform a heuristic search\n- `mips(tart)` - start solving the problem using the MIP solver\n- `nextB(estSolution)` - display the next best solution found so far\n- `prio(rityIn)` - set the priority of a variable or constraint\n- `solv(e)` - solve the problem\n\"\"\""
        }
    ]
}