{
    "summary": "This Python code is a fixtures template for microgrid simulation, using NumPy and Jinja templating. It sets environment variables, defines request protocol and session-scoped fixtures, and creates test fixtures based on devModelClassName.",
    "details": [
        {
            "comment": "This code serves as a template for fixtures, using Python instead of YAML for better coding experience. It renders the code to \".py.tmp\" and modifies it before use. It also imports necessary modules, sets environment variables, and defines request protocol and session-scoped fixtures for planning and simulation tasks.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test/common_fixtures.py.j2\":0-45",
            "content": "{# serve as template for our fixtures. #}\n{# for better coding experience, refuse to use yaml but embrace python (autocomplete) #}\n{# render this to \".py.tmp\" first, then modify it. #}\n{% macro createTestFixture(className, params = \"\") %}\n@fixture\ndef \u6d4b\u8bd5{{className}}({{params}}):\n    val = {{className}}(\n{{caller()}}\n    )\n    return val\n{% endmacro %}\nfrom pytest import fixture\nimport sys\nsys.path.append(\"../\")\n{# from ies_optim import * #}\nimport typing\nif typing.TYPE_CHECKING:\n    from ..ies_optim_legacy import * # workaround for pyright.\n    from ..constants import Solver    \n    from ..solve_model import *\nelse:\n    from ies_optim_legacy import *\n    from constants import Solver    \n    from solve_model import *\nimport os\nos.environ['VAR_INIT_AS_ZERO'] = '1'\n@fixture\ndef model_wrapper():\n    mw = ModelWrapper()\n    yield mw\n    del mw\nfrom typing import Protocol, Any\nclass Request(Protocol):\n    param: Any\n    cache: Any\n@fixture(scope=\"session\", params=[\"\u8bbe\u8ba1\u89c4\u5212\", \"\u4eff\u771f\u6a21\u62df\"], ids=[\"PLANNING\", \"SIMULATION\"])\ndef \u6d4b\u8bd5\u8ba1\u7b97\u53c2\u6570(request: Request):  # _pytest.fixtures.SubRequest"
        },
        {
            "comment": "This code is importing NumPy and using its random function to generate an array of random numbers. The array represents wind speed, sunlight, and temperature values in hourly intervals for a given day. These data are then passed as parameters to the '\u8ba1\u7b97\u53c2\u6570' function, along with other information such as typical day representation, annual interest rate, and different types of computation. It seems like this code is related to microgrid simulation or analysis, possibly for testing purposes, but it doesn't specify any particular operation being performed in this specific part of the code.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test/common_fixtures.py.j2\":46-81",
            "content": "    import numpy as np\n    {# print(type(request)) #}\n    arr = abs(np.random.random((24,))).tolist()\n    return \u8ba1\u7b97\u53c2\u6570(\n        \u8ba1\u7b97\u76ee\u6807=\"\u7ecf\u6d4e\",\n        # \u8ba1\u7b97\u76ee\u6807=\"\u7ecf\u6d4e_\u73af\u4fdd\",\n        # \u8ba1\u7b97\u76ee\u6807=\"\u73af\u4fdd\",\n        \u8ba1\u7b97\u6b65\u957f=\"\u5c0f\u65f6\",\n        {# \u8ba1\u7b97\u6b65\u957f=\"\u79d2\", #}\n        \u5178\u578b\u65e5=True,\n        \u5178\u578b\u65e5\u4ee3\u8868\u7684\u65e5\u671f=[1],\n        \u8ba1\u7b97\u7c7b\u578b=request.param,\n        \u98ce\u901f=arr,\n        \u5149\u7167=arr,\n        \u6c14\u6e29=arr,\n        \u5e74\u5229\u7387=0.1,\n    )\n{% for _infoClassName, infoData in data.items() %}\n    {% set infoClassName = _infoClassName.strip('\u4fe1\u606f') %}\n{{'# {} #'.format(infoClassName.center(70, \"=\"))}}\n    {% if infoClassName != \"\u8ba1\u7b97\u53c2\u6570\" %}\n        {% set devInfoClassName = infoClassName+\"\u4fe1\u606f\"%}\n        {% set devModelClassName = infoClassName+\"\u6a21\u578b\"%}\n        {% set devIDClassName = infoClassName+\"ID\"%}\n        {% call createTestFixture(devInfoClassName) %}\n            {%for infoName, infoValue in infoData.items()%}\n        {{infoName}} = {{repr(infoValue)}},\n            {%endfor%}\n        {% endcall %}\n        {% call createTestFixture(devIDClassName) %}\n            {% for k,v in id_data[_infoClassName].items() %}"
        },
        {
            "comment": "This code creates test fixtures for a microgrid base. It checks the devModelClassName and based on that, it calls the createTestFixture function with appropriate parameters to create different types of test fixtures. It initializes variables such as model_wrapper, PD, testing calculation parameters, device ID, and device information for the test fixture. The code uses Jinja templating syntax for variable assignment and function calls.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/microgrid_base/test/common_fixtures.py.j2\":82-95",
            "content": "        {{k}} = {{v}},\n            {% endfor %}\n        {% endcall %}\n        {% call createTestFixture(devModelClassName, \"\u6d4b\u8bd5{className}\u4fe1\u606f: {className}\u4fe1\u606f, model_wrapper: ModelWrapper, \u6d4b\u8bd5\u8ba1\u7b97\u53c2\u6570: \u8ba1\u7b97\u53c2\u6570, \u6d4b\u8bd5{className}ID: {className}ID\".format(className = infoClassName))%}\n        PD={}, mw=model_wrapper, \u8ba1\u7b97\u53c2\u6570\u5b9e\u4f8b=\u6d4b\u8bd5\u8ba1\u7b97\u53c2\u6570, \u8bbe\u5907ID=\u6d4b\u8bd5{{devIDClassName}}, \u8bbe\u5907\u4fe1\u606f=\u6d4b\u8bd5{{devInfoClassName}}\n        {% endcall %}\n    {% else%}\n        {% call createTestFixture(\"\u8bbe\u5907\u6a21\u578b\", \"model_wrapper: ModelWrapper, \u6d4b\u8bd5\u8ba1\u7b97\u53c2\u6570: \u8ba1\u7b97\u53c2\u6570\") %}\n        PD={}, mw=model_wrapper, \u8ba1\u7b97\u53c2\u6570\u5b9e\u4f8b=\u6d4b\u8bd5\u8ba1\u7b97\u53c2\u6570, ID=0\n        {% endcall %}\n    {% endif %}\n{% endfor %}"
        }
    ]
}