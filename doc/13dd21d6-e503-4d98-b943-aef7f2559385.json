{
    "summary": "The code is a data visualization utility module using matplotlib, requiring IntegratedEnergySystem class and prints model's decision variables, focusing on binary ones.",
    "details": [
        {
            "comment": "The code is a data visualization utility module, containing functions to plot graphs and print integrated energy system device counts. It utilizes the matplotlib library for plotting and requires an IntegratedEnergySystem class from the integratedEnergySystemPrototypes package. The plotSingle function takes an iterable of values, a title, and an optional save directory, creating a figure with the data, setting labels, and saving it if the directory is specified. The printIntegratedEnergySystemDeviceCounts function prints the device counts for a list of IntegratedEnergySystem objects, considering only those devices with a power value above the minimum threshold provided.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/data_visualize_utils.py\":0-37",
            "content": "\"\"\"\n\u6570\u636e\u663e\u793a\u6a21\u5757\n\"\"\"\nfrom typing import Iterable, List\nimport matplotlib.pyplot as plt\nfrom integratedEnergySystemPrototypes import IntegratedEnergySystem, Model\nimport os\ndef plotSingle(\n    data: Iterable, title_content: str, save_directory: str = \"fig\"\n):  # \u5b9a\u4e49\u753b\u56fe\u7684\u89c4\u8303 \u81ea\u52a8\u4fdd\u5b58\u56fe\u7247\n    \"\"\"\n    Plot a single graph with `data` as data and `title_content` as title\n    Args:\n        data (Iterable): a list of values to be plotted on the x axis\n        title_content (str): title to plot on the graph\n        save_directory (str): directory to save the images\n    \"\"\"\n    fig = plt.figure()\n    try:\n        if not os.path.exists(save_directory):\n            os.mkdir(save_directory)\n        plt.plot(data)\n        plt.xlabel(\"Time/h\")\n        plt.ylabel(\"Power/kW\")\n        plt.title(title_content)\n        plt.savefig(f\"{save_directory}/{title_content}.png\")\n    except:\n        print(\"ERROR WHILE SAVING PICTURE:\",title_content)\n    finally:\n        plt.close(fig=fig)\ndef printIntegratedEnergySystemDeviceCounts(\n    integratedEnergySystem_device: List[IntegratedEnergySystem], min_value: float = 1e-2"
        },
        {
            "comment": "This code prints the device counts of all IntegratedEnergySystem instances, including index, class, input and output types, and device count values. It filters out any device_count_max or device_count_min values to avoid redundancy.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/data_visualize_utils.py\":38-63",
            "content": "):\n    \"\"\"\n    Print all device counts in all kinds of `IntegratedEnergySystem` device sets.\n    Args:\n        integratedEnergySystem_device (List[IntegratedEnergySystem]): a list of `IntegratedEnergySystem` instances\n    \"\"\"\n    print(\"_________DEVICE_COUNT__________\")\n    for index, item in enumerate(integratedEnergySystem_device):\n        subitems = dir(item)\n        print(f\"device index: {index}\")\n        print(f\"device class: {type(item).__name__}\")\n        print()\n        print(\"device inputs:\", \" \".join(list(item.power_of_inputs.keys())))\n        print(\"device outputs:\", \" \".join(list(item.power_of_outputs.keys())))\n        print()\n        for subitem in subitems:\n            if \"device_count\" in subitem and not any(\n                [\n                    prohibited_keyword in subitem\n                    for prohibited_keyword in [\"device_count_max\", \"device_count_min\"]\n                ]\n            ):  # \u6253\u5370\u6bcf\u4e2a\u7c7b\u578b\u673a\u7ec4\u91cc\u9762\u7684\u8bbe\u5907\u6570\u91cf\n                val = item.__dict__[subitem]\n                try:\n                    value = float(val)"
        },
        {
            "comment": "This code prints all decision variables from a model. It first iterates over and prints the integer decision variables, then continues to print the continuous (real-valued) decision variables. The output is organized with clear headings for each type of variable.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/data_visualize_utils.py\":64-95",
            "content": "                    if value > min_value:\n                        print(\"value name:\", subitem)\n                        print(\"value:\", value)\n                    else:\n                        continue\n                    # breakpoint()\n                except:\n                    continue\n        print(\"_____\")\n    print(\"_________DEVICE_COUNT__________\")\ndef printDecisionVariablesFromSolution(model1: Model):\n    \"\"\"\n    Print all decision variables, including integer, float and binary variables.\n    Args:\n        model1 (Model): Model to print decision variables\n    \"\"\"\n    print()  # \u6253\u5370\u6574\u6570\u53ef\u51b3\u7b56\u53d8\u91cf\n    print(\"___INTEGER DECISION VARIABLES___\")\n    for variable in model1.iter_integer_vars():\n        print(\"INT\", variable, \"=\", variable.solution_value)\n    print(\"___INTEGER DECISION VARIABLES___\")\n    print()\n    print()  # \u6253\u5370\u5b9e\u6570\u53ef\u51b3\u7b56\u53d8\u91cf\n    print(\"___CONTINUOUS DECISION VARIABLES___\")\n    for variable in model1.iter_continuous_vars():\n        print(\"CONT\", variable, \"=\", variable.solution_value)\n    print(\"___CONTINUOUS DECISION VARIABLES___\")"
        },
        {
            "comment": "Prints binary decision variables of the model1 in a readable format.",
            "location": "\"/media/root/Prima/works/generated_docs/linear_programming_doc/src/data_visualize_utils.py\":96-103",
            "content": "    print()\n    print()  # \u6253\u5370\u4e8c\u8fdb\u5236\u53ef\u51b3\u7b56\u53d8\u91cf\n    print(\"___BINARY DECISION VARIABLES___\")\n    for variable in model1.iter_binary_vars():\n        print(\"BIN\", variable, \"=\", variable.solution_value)\n    print(\"___BINARY DECISION VARIABLES___\")\n    print()"
        }
    ]
}