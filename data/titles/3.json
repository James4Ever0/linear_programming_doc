{
    "/microgrid_base/jinja_utils.py:267-283": "Error-checking Jinja2 Template Loader",
    "/microgrid_base/jinja_utils.py:45-87": "Jinja Case Converters and Error Handler",
    "/microgrid_base/jinja_utils.py:88-124": "Template Rendering and Backup",
    "/microgrid_base/json_utils.py": "Deep Copy and Update JSON Objects",
    "/microgrid_base/json_utils.py:1-30": "Recursive JSON Traversal and Yielding Keys-Values",
    "/microgrid_base/json_utils.py:100-135": "JSON Utilities: Delete, Convert, Refine",
    "/microgrid_base/json_utils.py:136-156": "Deep Copy JSON Apply",
    "/microgrid_base/json_utils.py:31-66": "JSON Utilities for Manipulation",
    "/microgrid_base/json_utils.py:67-97": "JSON Object Update and Delete Functions",
    "/microgrid_base/lib_parse_params.py": "Excel Data Parser and Repairer",
    "/microgrid_base/lib_parse_params.py:1-35": "Excel Repairer for Cross-Platform Compatibility",
    "/microgrid_base/lib_parse_params.py:105-133": "Iterative Device Data Extraction",
    "/microgrid_base/lib_parse_params.py:134-153": "Microgrid Device Parameter Parsing and Management",
    "/microgrid_base/lib_parse_params.py:155-182": "Process BCD: Checks and Updates Target JSON",
    "/microgrid_base/lib_parse_params.py:183-218": "Excel and CSV Parsers",
    "/microgrid_base/lib_parse_params.py:219-242": "List Row Parsing Algorithm",
    "/microgrid_base/lib_parse_params.py:243-247": "Append Second to Data Class Indices",
    "/microgrid_base/lib_parse_params.py:36-68": "Excel Data Parsing Functions",
    "/microgrid_base/lib_parse_params.py:69-104": "Parse Excel Columns and Create JSON Object",
    "/microgrid_base/log_infeasible.py": "Microgrid Log Infeasibility Detection",
    "/microgrid_base/log_infeasible.py:1-49": "Logging Infeasible Constraints in Pyomo Model",
    "/microgrid_base/log_infeasible.py:50-65": "Microgrid Log Infeasibility Detection Code",
    "/microgrid_base/log_infeasible.sh": "Setting CPLEX Path for Optimization",
    "/microgrid_base/macro_test.j2": "Jinja2 Macro Test: Custom Macros and Calls",
    "/microgrid_base/macro_test.py": "Microgrid Template Rendering Script",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/Makefile.j2": "Incremental Makefile Jinja Template",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/construct_ninja_file.py": "Create Ninja File with Writer Class",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/dodo.py": "Unclear Random Task Definition",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/generic.py": "Flexible Data Types with \"Any\" Type",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/lfnf.py": "Incremental Test Failure",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/mytest.py": "Incremental Pytest with Ninja and Protocols",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/platform_detect_makefile/Makefile": "Platform Detection Script for Microgrid Base",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/test_buffer.py": "Infinite Output Loop",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/type_check.py": "Type-Safe Microgrid Base: Incremental Testing",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/type_check.py:1-52": "Type Checking Utilities",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/type_check.py:111-175": "Type-Checking Function for Input Conversion",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/type_check.py:53-108": "Protocol Classes for Arithmetic Operations",
    "/microgrid_base/makefile_ninja_pytest_incremental_test/typecheck.py": "Type-Checking Functions with Match Statements",
    "/microgrid_base/metaclass_field_verification.py": "Metaclass-Based Multiplication in MyKlass",
    "/microgrid_base/metaclass_field_verification.py:1-58": "Metaclass Field Verification with ABCs",
    "/microgrid_base/metaclass_field_verification.py:103-148": "Generic Multiplication with mybase and Subclasses",
    "/microgrid_base/metaclass_field_verification.py:149-189": "Metaclass-Based Field Verification",
    "/microgrid_base/metaclass_field_verification.py:190-234": "Metaclass-Defined Timestamped Attribute in Python",
    "/microgrid_base/metaclass_field_verification.py:236-239": "Template Substitution and Logging",
    "/microgrid_base/metaclass_field_verification.py:59-102": "Custom Type Guard for Positive Numbers",
    "/microgrid_base/microgrid_topo_check.py": "Microgrid Topology Check",
    "/microgrid_base/microgrid_topo_check.py:1-47": "Microgrid Topology Checker Setup",
    "/microgrid_base/microgrid_topo_check.py:100-143": "Solar and Wind Generation Data Object Creation",
    "/microgrid_base/microgrid_topo_check.py:144-198": "Microgrid Topology Check and Power Objects",
    "/microgrid_base/microgrid_topo_check.py:199-260": "Microgrid Topology Generator and Transformers",
    "/microgrid_base/microgrid_topo_check.py:263-309": "Optimizing Microgrid Energy Consumption",
    "/microgrid_base/microgrid_topo_check.py:310-346": "Microgrid Device Creation Code",
    "/microgrid_base/microgrid_topo_check.py:347-390": "Electrolyzer Device Creation and Addition",
    "/microgrid_base/microgrid_topo_check.py:391-440": "Microgrid Topology Creation with Optimized Transmission Lines",
    "/microgrid_base/microgrid_topo_check.py:441-492": "Microgrid Component Connections",
    "/microgrid_base/microgrid_topo_check.py:48-99": "Microgrid Banner Printing Function",
    "/microgrid_base/microgrid_topo_check.py:493-526": "Microgrid Energy Flow Calculation and Logging",
    "/microgrid_base/mock_data_test.py": "Mock Data Test: Generating Microgrid Instances",
    "/microgrid_base/mock_data_test.py:1-59": "Generate Person Instances with Pydantic Factories",
    "/microgrid_base/mock_data_test.py:105-149": "Building EnergyFlowGraph Instances with JSON Input",
    "/microgrid_base/mock_data_test.py:150-191": "Random Mock Data Generator for Microgrid Objective Functions",
    "/microgrid_base/mock_data_test.py:192-220": "Device Power Curve Generation",
    "/microgrid_base/mock_data_test.py:222-245": "Creating and Manipulating CalculationResults in Mock Data Test",
    "/microgrid_base/mock_data_test.py:60-104": "PersonFactory with DataclassFactory and Randomization",
    "/microgrid_base/mock_reload.sh": "Microgrid Mock Reload Script",
    "/microgrid_base/mock_utils.py": "Deterministic Microgrid Mocking Utilities",
    "/microgrid_base/mock_utils.py:1-50": "Mock Algorithm Response Generator",
    "/microgrid_base/mock_utils.py:124-153": "Generate Test Data for Devices",
    "/microgrid_base/mock_utils.py:154-190": "Power Curve Data Generator",
    "/microgrid_base/mock_utils.py:191-227": "Microgrid Mock Utils: Data Generation and Calculation",
    "/microgrid_base/mock_utils.py:228-255": "Deterministic Element Size Calculator",
    "/microgrid_base/mock_utils.py:257-266": "Deterministic EnergyFlowGraph Testing",
    "/microgrid_base/mock_utils.py:51-88": "Precise Input Validation and Reduction",
    "/microgrid_base/mock_utils.py:91-123": "Mock Utils: Generating Fake Data for Microgrids",
    "/microgrid_base/modify_bashrc_for_mamba.py": "Mamba .bashrc Initialize",
    "/microgrid_base/natural_gas_generator_template.py": "Natural Gas Generator Template Demo",
    "/microgrid_base/packup_type_system.sh": "Type System Archive Creation Script",
    "/microgrid_base/param_base.py": "Microgrid Configuration Processing",
    "/microgrid_base/param_base.py:1-39": "Microgrid Configuration Parsing",
    "/microgrid_base/param_base.py:40-73": "Create Device Interface Set and Connection Type Mapping Table",
    "/microgrid_base/param_base.py:74-91": "Param Base: Classify Devices",
    "/microgrid_base/parse_export_format.py": "Microgrid Base JSON Parser",
    "/microgrid_base/parse_export_format.py:1-41": "Parse Excel, Generate Code, and Output JSON",
    "/microgrid_base/parse_export_format.py:113-139": "Filter, Process, Replace, Trim Data with Regex",
    "/microgrid_base/parse_export_format.py:141-181": "Excel to JSON Converter",
    "/microgrid_base/parse_export_format.py:182-226": "Unit Conversion Script",
    "/microgrid_base/parse_export_format.py:227-259": "Microgrid Simulation Result Parser",
    "/microgrid_base/parse_export_format.py:260-302": "Simulation Device Parameter Mapping",
    "/microgrid_base/parse_export_format.py:303-336": "Export DataFrame to Excel",
    "/microgrid_base/parse_export_format.py:337-375": "Simulation Results Parser and Converter",
    "/microgrid_base/parse_export_format.py:376-379": "Code Unit Parsing and Formatting",
    "/microgrid_base/parse_export_format.py:42-79": "Extracting Sub-Schemas from Design Planning Export Data",
    "/microgrid_base/parse_export_format.py:80-112": "Validate Microgrid Export Format",
    "/microgrid_base/parse_frontend_sim_param_translation.py": "Frontend Sim Param Translation Parser",
    "/microgrid_base/parse_optim_constraints.py": "Optimizer Constraints Parser",
    "/microgrid_base/parse_optim_constraints.py:1-39": "Parse and Log Optimization Constraints",
    "/microgrid_base/parse_optim_constraints.py:40-66": "Microgrid Optimizer Constraint Parser",
    "/microgrid_base/parse_params.py": "Microgrid File Converter",
    "/microgrid_base/parse_params.py:1-30": "XLSX Parser Configuration",
    "/microgrid_base/parse_params.py:31-59": "XLSX Parser Dictionary Creation",
    "/microgrid_base/parse_params.py:61-64": "CSV to JSON Conversion",
    "/microgrid_base/parse_units_and_names.py": "Microgrid Unit Parsing and Formatting",
    "/microgrid_base/parse_units_and_names.py:1-46": "Unit and Parameter Parser",
    "/microgrid_base/parse_units_and_names.py:127-179": "Parsing Microgrid Units from JSON",
    "/microgrid_base/parse_units_and_names.py:180-212": "Microgrid Unit and Name Definitions",
    "/microgrid_base/parse_units_and_names.py:213-235": "Cost and Decay Parameters for Microgrid Components",
    "/microgrid_base/parse_units_and_names.py:236-268": "Ensuring Acceptable Units: Code Analysis",
    "/microgrid_base/parse_units_and_names.py:269-299": "Convert String Parsing and Exception Handling",
    "/microgrid_base/parse_units_and_names.py:300-334": "Unit Translation and Mapping Updater",
    "/microgrid_base/parse_units_and_names.py:335-377": "Translate and Populate Microgrid Units",
    "/microgrid_base/parse_units_and_names.py:378-405": "Unit Conversion and Formatting",
    "/microgrid_base/parse_units_and_names.py:408-434": "Iterate and Check Keys in Data Dictionary",
    "/microgrid_base/parse_units_and_names.py:435-455": "Dynamic Simulation Parameters Appending",
    "/microgrid_base/parse_units_and_names.py:456-476": "Interpreting Microgrid Parameters and Units",
    "/microgrid_base/parse_units_and_names.py:47-89": "Microgrid Device Parser",
    "/microgrid_base/parse_units_and_names.py:477-507": "Parsing Units and Names",
    "/microgrid_base/parse_units_and_names.py:508-525": "Continuing Loop for Unit Conversion",
    "/microgrid_base/parse_units_and_names.py:526-542": "Unit Conversion and Compatibility Check",
    "/microgrid_base/parse_units_and_names.py:543-563": "Unit Compatibility Checker",
    "/microgrid_base/parse_units_and_names.py:564-585": "Table Formatting for Value Names",
    "/microgrid_base/parse_units_and_names.py:586-598": "Unknown Value Exception Handling",
    "/microgrid_base/parse_units_and_names.py:92-126": "Excel Flagging for Microgrid Devices",
    "/microgrid_base/passwords_template.py": "Initializing Redis Passwords",
    "/microgrid_base/plot_utils.py": "Visualizing Microgrid Topologies",
    "/microgrid_base/plot_utils.py:1-30": "Microgrid Topology Parser and Plotter",
    "/microgrid_base/plot_utils.py:31-61": "Microgrid Device Graphing Tool",
    "/microgrid_base/plot_utils.py:62-65": "Load and Plot Topologies",
    "/microgrid_base/prolog_gen.pro.j2": "Microgrid Prolog Logic and Entity Management",
    "/microgrid_base/prolog_gen.pro.j2:1-36": "Prolog Entities Initialization with CLP(FD)",
    "/microgrid_base/prolog_gen.pro.j2:37-72": "Microgrid System Functions and Logic",
    "/microgrid_base/prolog_gen.pro.j2:74-93": "Adder Port Status Analysis",
    "/microgrid_base/pyomo_environ.py": "Disjunctive Model Conversion",
    "/microgrid_base/pyomo_patch.py": "Strict Inequality Support and Bug Fixes",
    "/microgrid_base/pyomo_patch.py:1-42": "Pyomo Strict Inequality Compatibility Patch",
    "/microgrid_base/pyomo_patch.py:118-130": "Customizable File Writing in Pyomo Patch",
    "/microgrid_base/pyomo_patch.py:45-68": "Monkey Patching Write Function for File Handling",
    "/microgrid_base/pyomo_patch.py:69-95": "Pyomo Model File Writer Functionality",
    "/microgrid_base/pyomo_patch.py:96-117": "Imports and Initializes Solutions",
    "/microgrid_base/pyright_utils.py": "Pyright Utilities for Version Checking and Error Handling",
    "/microgrid_base/pyright_utils.py:1-37": "Pyright Version Checker: Monkey-Patched Run Function",
    "/microgrid_base/pyright_utils.py:38-67": "Pyright Cache and Test Utility",
    "/microgrid_base/pyright_utils.py:68-77": "Error Checker: Pyright for Undefined Variables",
    "/microgrid_base/reduce_demo_data_size.py": "Reduce JSON Data Size",
    "/microgrid_base/reload.sh": "Update and Launch Docker Environment",
    "/microgrid_base/render_and_packup_report.py": "Microgrid Report Packer",
    "/microgrid_base/render_and_packup_report.py:1-38": "Render and Pack Up Report",
    "/microgrid_base/render_and_packup_report.py:39-70": "Generates, Renders, and Packages Reports",
    "/microgrid_base/render_type_utils.py": "Microgrid System Classes and Functions",
    "/microgrid_base/render_type_utils.py:1-47": "Microgrid Base Type Utilities",
    "/microgrid_base/render_type_utils.py:123-157": "Port Rule Utilities",
    "/microgrid_base/render_type_utils.py:158-190": "Microgrid Rule Manipulation Functions",
    "/microgrid_base/render_type_utils.py:191-214": "Dynamic Connectivity Rule Generator",
    "/microgrid_base/render_type_utils.py:215-237": "Microgrid Component Requirement Parser",
    "/microgrid_base/render_type_utils.py:238-258": "Header-Based Connection Enforcement",
    "/microgrid_base/render_type_utils.py:259-286": "Render Type Utilities Functions",
    "/microgrid_base/render_type_utils.py:288-324": "Microgrid Data Validation and Translation\nTitle within 3 to 7 words: Microgrid Data Processing",
    "/microgrid_base/render_type_utils.py:325-348": "Device Type Parsing and Extraction",
    "/microgrid_base/render_type_utils.py:349-372": "Port State Verifier Initialization",
    "/microgrid_base/render_type_utils.py:373-397": "Device Port Verifier Lookup Table",
    "/microgrid_base/render_type_utils.py:398-420": "Generate Microgrid Verifiers",
    "/microgrid_base/render_type_utils.py:422-444": "Conjugate Verifier Dictionary Generation",
    "/microgrid_base/render_type_utils.py:445-466": "Port Verifiers Dictionary Creation and Update",
    "/microgrid_base/render_type_utils.py:467-476": "Generating Type Utils Banner",
    "/microgrid_base/render_type_utils.py:48-86": "Microgrid Component Port Definitions",
    "/microgrid_base/render_type_utils.py:87-122": "Microgrid Port Connectivity Rules",
    "/microgrid_base/report_template.md.j2": "Microgrid Report Template",
    "/microgrid_base/setup_docker.sh": "Install and Configure Docker for Microgrid Base",
    "/microgrid_base/shared_datamodels.py": "Conflict Resolution Parameters",
    "/microgrid_base/solve_model.py": "Microgrid Model Solver",
    "/microgrid_base/solve_model.py:1-35": "Python Program Improvement Notes",
    "/microgrid_base/solve_model.py:107-141": "Network Graph Calculation Functions",
    "/microgrid_base/solve_model.py:142-180": "Solve Model with CPLEX",
    "/microgrid_base/solve_model.py:181-201": "Microgrid Solver Options and OOM Prevention",
    "/microgrid_base/solve_model.py:202-233": "Rescuing Infeasible Models",
    "/microgrid_base/solve_model.py:234-278": "Solving and Exception Handling in Microgrid Model",
    "/microgrid_base/solve_model.py:281-305": "Analyzing Model Infeasibility and Exporting Parameters",
    "/microgrid_base/solve_model.py:306-336": "Solve Model: CPLEX Conflict Check and Translation",
    "/microgrid_base/solve_model.py:337-361": "Solver Abnormality Checker",
    "/microgrid_base/solve_model.py:36-71": "Setting up Simulation Environment",
    "/microgrid_base/solve_model.py:362-402": "Calculation Structure Initialization",
    "/microgrid_base/solve_model.py:403-434": "Calculate Time Parameter and Compute Model Expressions",
    "/microgrid_base/solve_model.py:435-472": "Calculates Objectives and Appends Results",
    "/microgrid_base/solve_model.py:473-506": "Fetching and Updating Simulation Results",
    "/microgrid_base/solve_model.py:507-534": "Retrieve and Calculate Device Output Curve",
    "/microgrid_base/solve_model.py:535-555": "Simulation Results Merging and Exporting",
    "/microgrid_base/solve_model.py:556-577": "Microgrid Simulation Data Handler",
    "/microgrid_base/solve_model.py:578-599": "Updating Output Curve Dictionary and DataFrame Manipulation",
    "/microgrid_base/solve_model.py:600-625": "Microgrid Model Output Generation",
    "/microgrid_base/solve_model.py:626-647": "Generate Plot Data for Devices",
    "/microgrid_base/solve_model.py:648-681": "Preparing Constraint Ranges from Dual Objective Range",
    "/microgrid_base/solve_model.py:682-714": "Constraint Range Setup and Validation",
    "/microgrid_base/solve_model.py:715-746": "Optimize Microgrid Calculation Parameters",
    "/microgrid_base/solve_model.py:72-106": "Formatted DataFrame with Translated Headers",
    "/microgrid_base/solve_model.py:748-769": "Model Compensation and Solution Updating",
    "/microgrid_base/solve_model.py:770-806": "Solve Model from Calc Param List",
    "/microgrid_base/solve_model.py:807-831": "Dual Objective Microgrid Model Solver",
    "/microgrid_base/solve_model.py:832-855": "Solver Worker End: Economic & Environmental Constraints",
    "/microgrid_base/synth_mock_reload.sh": "Mock Configuration Reload",
    "/microgrid_base/test/Makefile": "Automated Microgrid Testing with Makefile",
    "/microgrid_base/test/Makefile:2-35": "Cross-Platform Microgrid Testing Setup",
    "/microgrid_base/test/Makefile:36-57": "Test Commands for Microgrid Python Scripts",
    "/microgrid_base/test/circular_import_a.py": "Circular Import A: Variable Printing",
    "/microgrid_base/test/circular_import_b.py": "Avoiding Circular Imports in Python",
    "/microgrid_base/test/common_fixtures.py.j2": "Microgrid Simulation Fixtures Template",
    "/microgrid_base/test/common_fixtures.py.j2:1-46": "Python Fixtures Template: Enhanced Coding Experience",
    "/microgrid_base/test/common_fixtures.py.j2:47-82": "Microgrid Random Data Generation",
    "/microgrid_base/test/common_fixtures.py.j2:83-96": "Microgrid Base Test Fixtures Creation",
    "/microgrid_base/test/conic_problem.py": "Conic Problem Optimization",
    "/microgrid_base/test/dev_info_tmp_gen.py": "Microgrid Device Info Template Generator",
    "/microgrid_base/test/dev_info_tmp_gen.py:1-39": "Dev Info Temporary Generator",
    "/microgrid_base/test/dev_info_tmp_gen.py:40-70": "Microgrid Device Info Template Generator",
    "/microgrid_base/test/dev_info_tmp_gen.py:71-91": "Template Testing and Data Sorting",
    "/microgrid_base/test/generate_test_model.py": "Microgrid Base Model Generation",
    "/microgrid_base/test/mapping_relationship_in_enum_classes.py": "Enum Class Mapping Relationship",
    "/microgrid_base/test/read_yaml.py": "Loading YAML Safely in Microgrid Base Test",
    "/microgrid_base/test/run_test.sh": "Automated CPLEX Test Execution with pytest",
    "/microgrid_base/test/runtime_override_stepwise.py": "Stepwise Source Code Testing with Pydantic",
    "/microgrid_base/test/runtime_override_stepwise.py:1-32": "Stepwise Source Code Manipulation for Testing",
    "/microgrid_base/test/runtime_override_stepwise.py:117-154": "Validating 'funcname' Parameter in Python 3.9+",
    "/microgrid_base/test/runtime_override_stepwise.py:155-181": "Stepwise Line Addition for Functions",
    "/microgrid_base/test/runtime_override_stepwise.py:182-204": "Stepwise Runtime Override",
    "/microgrid_base/test/runtime_override_stepwise.py:205-232": "Stepwise Function Overriding",
    "/microgrid_base/test/runtime_override_stepwise.py:233-255": "Stepwise Function Override with Yield Insertion",
    "/microgrid_base/test/runtime_override_stepwise.py:257-290": "Function Overwrite with Yields",
    "/microgrid_base/test/runtime_override_stepwise.py:291-327": "Add Local and Global Inspectors to Instance",
    "/microgrid_base/test/runtime_override_stepwise.py:328-366": "Decorator and Scope Analysis",
    "/microgrid_base/test/runtime_override_stepwise.py:33-76": "Iterative Keyword Search Function and Path Class",
    "/microgrid_base/test/runtime_override_stepwise.py:367-396": "Override Decorator Function",
    "/microgrid_base/test/runtime_override_stepwise.py:397-426": "Runtime Override and Stepwise Execution",
    "/microgrid_base/test/runtime_override_stepwise.py:427-441": "Override and Print Helper Function",
    "/microgrid_base/test/runtime_override_stepwise.py:78-116": "SourceCodeExchange Class Definition",
    "/microgrid_base/test/test_common_fixtures.py": "Python Fixture for Pytest Demonstration",
    "/microgrid_base/test/test_dict_fallback.py": "Defaultdict Testing: Microgrid Base Dict Fallback",
    "/microgrid_base/test/test_export.py.j2": "Test and Export Microgrid Devices",
    "/microgrid_base/test/test_failsafe.py": "Failsafe Methods Testing in Microgrid_Base",
    "/microgrid_base/test/test_failsafe.py:1-41": "Failsafe Mechanism Testing Code",
    "/microgrid_base/test/test_failsafe.py:42-72": "Infeasible Model Saving and Solver Parameters",
    "/microgrid_base/test/test_failsafe.py:73-97": "Failsafe Method Testing in Microgrid_Base",
    "/microgrid_base/test/test_getter_setter_dynamic_property.py": "Dynamic Property Setter Caveats",
    "/microgrid_base/test/test_model.py.j2": "Optimizing Renewable Power Models",
    "/microgrid_base/test/test_model.py.j2:1-32": "Import and Define Constants for Pyomo Environment",
    "/microgrid_base/test/test_model.py.j2:111-137": "Multi-Variable Optimization with CTDF Library",
    "/microgrid_base/test/test_model.py.j2:138-166": "Multi-Variable Model Testing",
    "/microgrid_base/test/test_model.py.j2:167-195": "Piecewise Function Testing with CTDF and Numpy",
    "/microgrid_base/test/test_model.py.j2:196-222": "Microgrid Model Testing with Diesel Generator",
    "/microgrid_base/test/test_model.py.j2:223-244": "Parameterized Test for Microgrid_Base Model",
    "/microgrid_base/test/test_model.py.j2:245-266": "Microgrid Device Testing: Gas-Fired CHP Unit Verification",
    "/microgrid_base/test/test_model.py.j2:267-286": "Microgrid Model Optimization and Validation",
    "/microgrid_base/test/test_model.py.j2:287-324": "Test Electricity Price Model",
    "/microgrid_base/test/test_model.py.j2:325-349": "Solar Power Model Parameterized Test",
    "/microgrid_base/test/test_model.py.j2:33-60": "Microgrid Testing Framework",
    "/microgrid_base/test/test_model.py.j2:350-368": "Wind Power Model Testing: Maximizing Interface Values",
    "/microgrid_base/test/test_model.py.j2:369-391": "Bidirectional Converter Efficiency Testing",
    "/microgrid_base/test/test_model.py.j2:392-412": "Testing Transformer and Line Outputs",
    "/microgrid_base/test/test_model.py.j2:413-433": "Microgrid Model Testing Code",
    "/microgrid_base/test/test_model.py.j2:434-448": "Lithium-ion Battery Constraint Testing Code",
    "/microgrid_base/test/test_model.py.j2:448-465": "Range-constrained battery capacity verification",
    "/microgrid_base/test/test_model.py.j2:465-484": "Microgrid Model Assertions and Constraints",
    "/microgrid_base/test/test_model.py.j2:485-512": "Testing Electric Interface Variables and Constraints",
    "/microgrid_base/test/test_model.py.j2:514-518": "Model Assertion Checks",
    "/microgrid_base/test/test_model.py.j2:61-86": "Automated Test Model Generation and Solving",
    "/microgrid_base/test/test_model.py.j2:87-110": "Testing Microgrid Solver with BinVarMultiplySingle Model",
    "/microgrid_base/test/test_model_info.py": "Hydra Config Printing Function",
    "/microgrid_base/test/test_pwire_select.py": "Max Power Wire Selection",
    "/microgrid_base/test/test_setting_calculated_value.py": "Calculated Value Update in BaseModel Test",
    "/microgrid_base/test/test_use_fixture.py": "Testing Fixture Importation with \"my_fixture\"",
    "/microgrid_base/test_class.py": "Microgrid Network Analysis and Conversion",
    "/microgrid_base/test_class.py:1-58": "NetworkX Microgrid Graph Analysis",
    "/microgrid_base/test_class.py:60-85": "Graph Conversion with NetworkX and Pydantic",
    "/microgrid_base/test_json_input_format.py": "JSON Input Format Testing",
    "/microgrid_base/test_json_input_format.py:1-39": "Parsing JSON for EnergyFlowGraph",
    "/microgrid_base/test_json_input_format.py:40-49": "JSON-Friendly Microgrid Topology Testing",
    "/microgrid_base/test_neverundefined/template.j2": "Macro Initialization and Call Error",
    "/microgrid_base/test_neverundefined/test.py": "Render Banner Template",
    "/microgrid_base/test_neverundefined/test_strict.py": "Jinja2 Strict Undefined Rendering",
    "/microgrid_base/test_replace_logger.py.j2": "Useless Loggers",
    "/microgrid_base/test_replace_logger_no_template.py": "Unused Variables and Duplicate Logs",
    "/microgrid_base/test_topo_check.py": "Microgrid Simulation and Constraint Checking",
    "/microgrid_base/test_topo_check.py:1-48": "Python: Print Data with Banner and Algorithm Setup",
    "/microgrid_base/test_topo_check.py:101-151": "Microgrid Topology Checker",
    "/microgrid_base/test_topo_check.py:152-195": "Microgrid Device and Component Parameters",
    "/microgrid_base/test_topo_check.py:196-241": "Microgrid System Topology Definition",
    "/microgrid_base/test_topo_check.py:243-285": "Topology Consistency Check",
    "/microgrid_base/test_topo_check.py:287-321": "Test Topo Check: Dictionary Load and Model Modification",
    "/microgrid_base/test_topo_check.py:322-352": "JSON Comparison and Result Logger",
    "/microgrid_base/test_topo_check.py:353-363": "Topology Check and Data Logging",
    "/microgrid_base/test_topo_check.py:49-100": "Microgrid Topology Creation and Device Parameters",
    "/microgrid_base/test_wrapper.py": "Celery Worker Resource Constraints Test",
    "/microgrid_base/test_wrapper.py:1-45": "Celery Task Error Handling",
    "/microgrid_base/test_wrapper.py:46-50": "Resource-Constrained Worker Process Initiation",
    "/microgrid_base/test_wrapper_celery.py": "Monitoring Celery Task Progress",
    "/microgrid_base/topo_check.py": "Microgrid Base Topology Checker",
    "/microgrid_base/topo_check_v1.py.j2": "Microgrid Network Validation",
    "/microgrid_base/topo_check_v1.py.j2:1-41": "Setting Up Microgrid Objects and Iterators",
    "/microgrid_base/topo_check_v1.py.j2:120-143": "Microgrid Network Consistency Check",
    "/microgrid_base/topo_check_v1.py.j2:144-158": "Node Subtype Validation and Connection Check",
    "/microgrid_base/topo_check_v1.py.j2:158-174": "Neighbor Check and Verification",
    "/microgrid_base/topo_check_v1.py.j2:175-192": "Microgrid Node Topology Checker",
    "/microgrid_base/topo_check_v1.py.j2:193-212": "Bus ID Processing and Connection Check",
    "/microgrid_base/topo_check_v1.py.j2:213-236": "Motherline Connection Validation"
}