{
    "/microgrid_base/topo_check_v1.py.j2:237-273": "Topology Graph Classes and Creation",
    "/microgrid_base/topo_check_v1.py.j2:274-293": "Adding Port Connection Node to Topology",
    "/microgrid_base/topo_check_v1.py.j2:294-317": "Microgrid Topology Checker V1",
    "/microgrid_base/topo_check_v1.py.j2:43-69": "Topology Graph Initialization and Node Handling",
    "/microgrid_base/topo_check_v1.py.j2:71-95": "Network Device and Adder Functions",
    "/microgrid_base/topo_check_v1.py.j2:96-119": "Network Topology Anchor-Mother Line Checker",
    "/microgrid_base/topo_check_v2.py.j2": "Microgrid Network Analysis Code",
    "/microgrid_base/topo_check_v2.py.j2:1-49": "Topology Check for Microgrids",
    "/microgrid_base/topo_check_v2.py.j2:106-130": "Microgrid Topology Checking Functions",
    "/microgrid_base/topo_check_v2.py.j2:131-154": "Checking and Creating Adders in Topology",
    "/microgrid_base/topo_check_v2.py.j2:156-188": "Microgrid Network Analysis Class",
    "/microgrid_base/topo_check_v2.py.j2:190-217": "Node Type and Subtype Checking",
    "/microgrid_base/topo_check_v2.py.j2:218-235": "Network Node Topology Checker",
    "/microgrid_base/topo_check_v2.py.j2:236-260": "Validating Network Node Connectivity",
    "/microgrid_base/topo_check_v2.py.j2:261-285": "Unknown Node Exception Handling",
    "/microgrid_base/topo_check_v2.py.j2:286-314": "Subgraph Consistency Check",
    "/microgrid_base/topo_check_v2.py.j2:315-354": "Topology Class and Node Extensions",
    "/microgrid_base/topo_check_v2.py.j2:355-382": "Defining Anchor and Connection Nodes in Microgrid Topology",
    "/microgrid_base/topo_check_v2.py.j2:384-411": "Device Instantiation with Topology Graph",
    "/microgrid_base/topo_check_v2.py.j2:51-76": "Microgrid Topology Parsing and Update Functions",
    "/microgrid_base/topo_check_v2.py.j2:78-105": "Topology Graph Class in Microgrid Base",
    "/microgrid_base/type_def.py": "Type Resolution in Microgrid Base",
    "/microgrid_base/type_def.py:1-62": "Energy, Water, Refrigerant Types with Error Checks",
    "/microgrid_base/type_def.py:63-100": "Basic Type Resolution Algorithm",
    "/microgrid_base/type_system.md": "Microgrid Device Type System",
    "/microgrid_base/type_system.md:1-53": "Microgrid Type System Guidelines",
    "/microgrid_base/type_system.md:55-63": "Topology Device Mapping and Connection Relationships",
    "/microgrid_base/type_system.py": "Microgrid Type System Management",
    "/microgrid_base/type_system.py:1-58": "Type System Management in Microgrid Python Code",
    "/microgrid_base/type_system.py:106-141": "Microgrid Type System: Supertype Management",
    "/microgrid_base/type_system.py:142-173": "Duplicate Type Checker",
    "/microgrid_base/type_system.py:175-208": "Triplet Transformation in Microgrid Type System",
    "/microgrid_base/type_system.py:209-245": "Microgrid Type System Update and Logging",
    "/microgrid_base/type_system.py:246-285": "CSV Column Adjustment Code",
    "/microgrid_base/type_system.py:287-334": "Mapping Devices to Port Types",
    "/microgrid_base/type_system.py:335-362": "Populate Device Port Dictionary",
    "/microgrid_base/type_system.py:363-386": "Port Type Mapping and Exception Handling",
    "/microgrid_base/type_system.py:387-413": "Port Type Mapping Verification",
    "/microgrid_base/type_system.py:414-454": "Unique Type Identifiers in Microgrid Network",
    "/microgrid_base/type_system.py:455-488": "Plotting Graphs with Matplotlib",
    "/microgrid_base/type_system.py:490-529": "Mapping Device Connectivity in Microgrids",
    "/microgrid_base/type_system.py:531-532": "Device Connectivity Matrix Graph Generator",
    "/microgrid_base/type_system.py:61-105": "Triplet Connection Mapping and Matrix Generation",
    "/microgrid_base/type_system_v2.py": "Microgrid System Management",
    "/microgrid_base/type_system_v2.py:1-47": "IES Topology System Visualizer & JSON Generator",
    "/microgrid_base/type_system_v2.py:125-190": "Microgrid Type System: Dictionary Connections",
    "/microgrid_base/type_system_v2.py:192-231": "Triplet Combinations with Supertype",
    "/microgrid_base/type_system_v2.py:232-262": "Handling Duplicates and Type Prefixes",
    "/microgrid_base/type_system_v2.py:263-295": "Microgrid Triplet Config Management",
    "/microgrid_base/type_system_v2.py:296-328": "Wire Type Connectivity and Dictionary Management",
    "/microgrid_base/type_system_v2.py:330-357": "Wire Handling in Type System Update",
    "/microgrid_base/type_system_v2.py:358-399": "JSON to CSV Adjustment Algorithm",
    "/microgrid_base/type_system_v2.py:400-444": "Combining Device Port Types in Microgrid Base",
    "/microgrid_base/type_system_v2.py:445-478": "Update Device Port Type Mapping",
    "/microgrid_base/type_system_v2.py:479-502": "Check and Update Device Dictionary",
    "/microgrid_base/type_system_v2.py:48-81": "Type System Validation and Naming",
    "/microgrid_base/type_system_v2.py:503-535": "Multi-Step Type System Processing",
    "/microgrid_base/type_system_v2.py:536-569": "Microgrid Type System Verification",
    "/microgrid_base/type_system_v2.py:570-608": "Graph Manipulation for Network Connectivity",
    "/microgrid_base/type_system_v2.py:608-645": "Plotting NetworkX Graphs with Custom Options",
    "/microgrid_base/type_system_v2.py:646-673": "Generate Device Connectivity Matrix and Plot Graph",
    "/microgrid_base/type_system_v2.py:83-124": "Prefix/Suffix Checker Classes",
    "/microgrid_base/type_utils.py.j2": "Microgrid System Prolog Environment Verification",
    "/microgrid_base/type_utils.py.j2:1-31": "Topology Rule Checker and Port Naming Function",
    "/microgrid_base/type_utils.py.j2:113-133": "Port Verifier Dictionary Creation",
    "/microgrid_base/type_utils.py.j2:134-162": "Port Lookup Table Generation",
    "/microgrid_base/type_utils.py.j2:163-185": "Dynamic Prolog Verification Functions",
    "/microgrid_base/type_utils.py.j2:187-219": "Prolog Query Utilities",
    "/microgrid_base/type_utils.py.j2:220-237": "Prolog Environment Setup in Type Utils",
    "/microgrid_base/type_utils.py.j2:238-272": "Generate Energy Combinations",
    "/microgrid_base/type_utils.py.j2:273-292": "Generating Microgrid Port-Adder Combinations",
    "/microgrid_base/type_utils.py.j2:293-318": "Energy Adder State Combinations",
    "/microgrid_base/type_utils.py.j2:32-64": "Microgrid Base: Lookup Tables and Data Storage",
    "/microgrid_base/type_utils.py.j2:320-342": "Python Query Result Function",
    "/microgrid_base/type_utils.py.j2:343-360": "Energy Status Dictionary Generation",
    "/microgrid_base/type_utils.py.j2:362-390": "Adder Status Querier Functions",
    "/microgrid_base/type_utils.py.j2:392-428": "Verify Topology Status in Prolog",
    "/microgrid_base/type_utils.py.j2:429-449": "Flattening Port Statuses",
    "/microgrid_base/type_utils.py.j2:450-465": "Cache-Checking Conjugate Verifiers",
    "/microgrid_base/type_utils.py.j2:465-481": "Conjugate Port Verification in Topo Status Frame",
    "/microgrid_base/type_utils.py.j2:482-502": "Port Verification Loop Algorithm",
    "/microgrid_base/type_utils.py.j2:503-527": "Port and Topology Validation Utility",
    "/microgrid_base/type_utils.py.j2:528-554": "Isomorphic Topology Checker",
    "/microgrid_base/type_utils.py.j2:555-575": "Microgrid Base Check Functionality",
    "/microgrid_base/type_utils.py.j2:575-592": "Prolog Script Execution and Weak Type Check",
    "/microgrid_base/type_utils.py.j2:66-91": "Initializing Device and Port Dictionaries",
    "/microgrid_base/type_utils.py.j2:92-113": "Port Management in Microgrid System",
    "/microgrid_base/typical_day_calc.py": "Typical Day Calculator",
    "/microgrid_base/typical_day_calc.py:1-41": "Seasonal Holiday Day Calculator",
    "/microgrid_base/typical_day_calc.py:42-43": "Checking Overlap and Completeness of Weekday and Holiday Sets",
    "/microgrid_base/unit_utils.py": "Unit Conversion Utility",
    "/microgrid_base/unit_utils.py:1-38": "Unit Conversion Tool",
    "/microgrid_base/unit_utils.py:126-156": "Unit Compatibility Checker",
    "/microgrid_base/unit_utils.py:157-199": "Unit Parsing and Conversion Functions",
    "/microgrid_base/unit_utils.py:200-201": "Unit Conversion to String",
    "/microgrid_base/unit_utils.py:39-77": "Standard Unit Conversion",
    "/microgrid_base/unit_utils.py:78-125": "Unit Conversion Functions",
    "/microgrid_base/violation_utils.py": "Bound Checker for Microgrid Systems",
    "/microgrid_base/violation_utils.py:1-41": "Bound Violation Detection Functions",
    "/microgrid_base/violation_utils.py:113-154": "Microgrid Variable and Constraint Classes",
    "/microgrid_base/violation_utils.py:155-186": "Check Variable Bounds and Type",
    "/microgrid_base/violation_utils.py:189-225": "Get Variable Info List from Dictionary",
    "/microgrid_base/violation_utils.py:226-262": "Variable Decomposition and Information Retrieval",
    "/microgrid_base/violation_utils.py:263-297": "Microgrid Constraint Decomposition Code",
    "/microgrid_base/violation_utils.py:298-329": "Piecewise Function Violation Checker",
    "/microgrid_base/violation_utils.py:330-362": "Violation Utils: ViolationInfo and MagicList Classes",
    "/microgrid_base/violation_utils.py:363-397": "ModelScanner: Constraint Scanning for ConcreteModels",
    "/microgrid_base/violation_utils.py:398-422": "Constraints Violation Calculation",
    "/microgrid_base/violation_utils.py:42-75": "Utility Functions for Bounds and Validity Checking",
    "/microgrid_base/violation_utils.py:423-446": "Clearing Model Variables and Piecewise Information",
    "/microgrid_base/violation_utils.py:447-481": "Microgrid Violation Utilities",
    "/microgrid_base/violation_utils.py:482-513": "Advanced Logical Expression Model Scanning",
    "/microgrid_base/violation_utils.py:515-544": "Piecewise Function Extraction and Analysis",
    "/microgrid_base/violation_utils.py:76-112": "Variable Bound and Type Violation Checker",
    "/mini_data_log_utils.py": "Solve Integrated Energy System Models",
    "/mini_data_log_utils.py:1-40": "Integrated Energy System Solver",
    "/mini_data_log_utils.py:42-61": "Universal List Plotter",
    "/mini_data_log_utils.py:62-91": "Quadratic Constraint Checker",
    "/mini_data_log_utils.py:93-93": "Solve and Log Simulations",
    "/mini_heat_system.py": "Mini Heat System Simulation",
    "/mini_heat_system.py:1-44": "Minimum Heat System Simulation Setup",
    "/mini_heat_system.py:133-165": "Municipal Hot Water System Registration",
    "/mini_heat_system.py:166-204": "Mini-Heat System Simulation Code",
    "/mini_heat_system.py:205-236": "Energy Flow Node Creator",
    "/mini_heat_system.py:237-271": "Efficient Node-Based Heat Distribution System",
    "/mini_heat_system.py:45-88": "Device Objects Initialization and Constraints",
    "/mini_heat_system.py:91-132": "Energy System Components Definition",
    "/mini_ies_test.py": "Microgrid Simulation Setup and Comparison",
    "/mini_ies_test.py:1-46": "Set up CPLEX Environment for Integrated Energy System Modeling",
    "/mini_ies_test.py:116-152": "Energy System Node Creation with Interlaced Connections",
    "/mini_ies_test.py:154-194": "Creating Variables and Visualizing System Topology",
    "/mini_ies_test.py:195-203": "Solar vs Grid Power Comparison Code Snippet",
    "/mini_ies_test.py:48-91": "Microgrid Simulation Initialization",
    "/mini_ies_test.py:92-115": "EnergyStorageSystem Configuration",
    "/mini_ies_topology.py": "Minimal IES Topology Visualization",
    "/mini_refrigeration_system.py": "Mini Refrigeration System Simulation",
    "/mini_refrigeration_system.py:1-44": "LiBr Refrigeration System Initialization",
    "/mini_refrigeration_system.py:135-149": "Building Mini-Refrigeration System with NodeFactory",
    "/mini_refrigeration_system.py:45-87": "Mini Refrigeration System Constraints Registration",
    "/mini_refrigeration_system.py:88-134": "Efficient Cold & Hot Water System Creation",
    "/network_visualize_packup.cmd": "Compress Python Files with 7z Command",
    "/neural_network_demo.py": "Neural Network Model with Hardtanh Activation",
    "/neural_network_linearize_nonlinear_function_test.py": "Linear Neural Network Training and Testing",
    "/neural_network_linearize_nonlinear_function_test.py:1-39": "Training Neural Network: Linear to Nonlinear Function",
    "/neural_network_linearize_nonlinear_function_test.py:40-66": "Training Neural Network with Linear Layer",
    "/neural_network_loading_convert_to_numpy_matrix.py": "Neural Network Conversion and Verification",
    "/neural_network_loading_convert_to_numpy_matrix.py:1-41": "Neural Network Load, Convert to Numpy, Apply Activation",
    "/neural_network_loading_convert_to_numpy_matrix.py:42-49": "Hard Tanh Layer Activation",
    "/output_pdf/convert_utf8.py": "UTF-16 to UTF-8 Converter",
    "/output_pdf/docx_concat/concat_index_with_article.py": "Docx File Concatenation and Hyperlink Issues",
    "/output_pdf/docx_reference_convert/test_convert.sh": "DOCX Reference Conversion with Pandoc",
    "/output_pdf/export_docx.ps1": "Automate DOCX Conversion with PowerShell Script",
    "/output_pdf/export_pdf.ps1": "Pandoc PATH Markdown to PDF Script",
    "/output_pdf/generate_html.ps1": "Generate HTML Docs with pdoc",
    "/output_pdf/generate_html.sh": "Convert Markdown to HTML with Extensions",
    "/output_pdf/html/process_output_html.py": "BeautifulSoup-based HTML Parsing and Modification",
    "/output_pdf/html/process_output_html.py:1-25": "BeautifulSoup HTML Parsing and Modification",
    "/output_pdf/html/process_output_html.py:26-32": "Manipulate HTML Structure",
    "/output_pdf/html_to_pdf.sh": "HTML to PDF with Playwright",
    "/output_pdf/original_html_to_docx.sh": "Convert HTML to DOCX using Pandoc",
    "/output_pdf/pdf_to_docx.sh": "Troubleshooting PDF to DOCX Conversion",
    "/packup.sh": "Create and Pack Up Archive",
    "/parse_device_parameters_excel.py": "Parse Excel Font Colors with Openpyxl",
    "/parse_device_parameters_excel.py:1-31": "Loading and Analyzing Openpyxl Workbook",
    "/parse_device_parameters_excel.py:32-58": "Font Color Extraction from Specified Values",
    "/parse_device_parameters_excel.py:59-81": "Check and Update Excel Cell Dictionary",
    "/parse_device_parameters_excel_v2.py": "Excel to JSON: Device Parameter Parser v2",
    "/parse_device_parameters_excel_v2.py:1-33": "Load and Parse Excel Sheet with openpyxl",
    "/parse_device_parameters_excel_v2.py:34-71": "Parse Excel Device Params to JSON",
    "/parse_device_parameters_excel_v2.py:72-90": "Parse Excel Device Params to JSON",
    "/pendulum.jl": "Pendulum Model: Solving ODE with External Torque",
    "/pendulum.jl:1-32": "Pendulum Simulation Using DifferentialEquations",
    "/pendulum.jl:34-39": "Angular Deflections and Velocities of Pendulum System",
    "/pendulum.py": "Pendulum Motion Simulation in Python",
    "/pendulum_finite_differentiate.py": "Pendulum Simulation via Finite Differences",
    "/pendulum_finite_differentiate.py:1-32": "Finite Difference Pendulum Simulation",
    "/pendulum_finite_differentiate.py:33-33": "Displaying Pendulum Figures with Matplotlib",
    "/piecewise_approximation_test.py": "Piecewise Approximation Test",
    "/piecewise_approximation_test.py:1-43": "Piecewise Approximation with Linear Interpolation",
    "/piecewise_approximation_test.py:44-74": "Piecewise Approximation Test",
    "/pint_convert_units.py": "Pint-Based Unit Converter",
    "/pint_convert_units.py:1-31": "Pint-based Unit Conversion and Compatibility",
    "/pint_convert_units.py:32-47": "Unit Conversion and Printing",
    "/pint_merge_units.py": "Merging Pint Units: Compatibility and Testing",
    "/pint_merge_units.py:1-52": "Custom Pint Unit Definitions",
    "/pint_merge_units.py:54-64": "Pint Unit Conversion Testing",
    "/plot_arr.py": "Array Plot with Time/Power Axes and Legend",
    "/plot_arr.py:1-40": "IGESPlot: Plotting Non-Zero Arrays",
    "/plot_arr.py:41-54": "Plotting Power Data with Labels and Legends",
    "/pydantic_validator_test.py": "Pydantic: Robust Data Validation in Python",
    "/pyomo_define_array_list.py": "Pyomo Array List: Define, Bounds, Constraints",
    "/pyomo_define_array_list.py:1-35": "Pyomo: Define Arrays, Variables, and Objectives",
    "/pyomo_define_array_list.py:36-44": "Pyomo Objective Function with CPLEX Solver",
    "/pyomo_shot_test.py": "Pyomo Import and Constraint Issue",
    "/pyomo_test_solve_nonlinear_cplex.py": "Pyomo Nonlinear Optimization Model Solving",
    "/pyomo_test_solve_nonlinear_cplex.py:1-36": "Nonlinear Model with Pyomo and CPLEX",
    "/pyomo_test_solve_nonlinear_cplex.py:38-54": "Pyomo Test: Solve Nonlinear with CPLEX",
    "/pyomo_triangulate_multivariate_linearization.py": "Multi-Variable Linearization via Delaunay Triangulation",
    "/questions.md": "Comprehensive Financial Evaluation for CloudPSS Project",
    "/questions.md:1-19": "Nonlinear Modeling for Pipeline Drops with Pyomo",
    "/questions.md:100-167": "Comprehensive Accounting Code List",
    "/questions.md:168-231": "Financial Project Table",
    "/questions.md:21-99": "CloudPSS Financial Evaluation Table",
    "/questions.md:232-243": "Business Income and Tax Table",
    "/questions_packup.cmd": "Questions Packup: Compress & Replace",
    "/regex_extract_bracket.py": "Regex Extract Brackets",
    "/reset_codepage.reg": "Command Prompt Customization Registry",
    "/result_processlib.py": "Value Class Handles Docplex Inputs",
    "/runhide.vbs": "Hidden Window Executor",
    "/runhide.vbs:1-31": "Run Hide Command",
    "/runhide.vbs:32-37": "Author Credit and Link Display",
    "/schedule_update.cmd": "Schedule IES Modeling Task",
    "/scheduled_commit.cmd": "Scripted Automated Logging",
    "/script.sh": "Script Fetches Heat Component Data",
    "/script.sh:1-7": "GET Request to Fetch Heat Component",
    "/script.sh:8-14": "Set HTTP Headers and Append to File",
    "/serve_pydoc.ps1": "Serve Python API Docs with pdoc3",
    "/setup_gptcommit.cmd": "Setup GPTCommit Configuration",
    "/setup_gptcommit.sh": "Automate GPTcommit Setup",
    "/subversion_sync.cmd": "Subversion Sync & Commit",
    "/symlinks/create_symlink.cmd": "Create \"dwg_blueprint\" Symlink",
    "/system_topology_utils.py": "JSON Directed Graph Generator for Energy Systems",
    "/system_topology_utils.py:1-31": "Create Energy System Graph with Devices and I/O Nodes",
    "/system_topology_utils.py:32-63": "System Topology Graph Creation",
    "/system_topology_utils.py:64-67": "Save Figure with System Name",
    "/taylor_series_expansion_approximation_nonlinear_function_piecewise.py": "Taylor Series Expansion for Sin(x)",
    "/taylor_series_expansion_approximation_nonlinear_function_piecewise.py:1-44": "Piecewise Approximation of Nonlinear Functions with Taylor Series Expansion",
    "/taylor_series_expansion_approximation_nonlinear_function_piecewise.py:45-88": "Piecewise Function Approximation for Nonlinear Functions",
    "/taylor_series_expansion_approximation_nonlinear_function_piecewise.py:89-116": "Taylor Series Expansion for Sin(x) Approximation",
    "/test_add_lower_and_upper_bounds.py": "Testing EnergySystem Bounds and Conflicts",
    "/test_class_create.py": "Class Define with Data and Value Attributes",
    "/test_client.py": "API Client with Python",
    "/test_cpexample.cmd": "Setup and Run Scripts with PATH Variables",
    "/test_cpexample.cmd:1-3": "Set Environment Variables for Software Compatibility",
    "/test_cpexample.cmd:3-13": "Set PATH, Execute PS Script & Log Output",
    "/test_cpexample.ps1": "Redirects Python Script Output",
    "/test_decorate_class_method.py": "Decorating Class Methods: test_decorate_class_method.py",
    "/test_linearization_max_zeros.py": "Maximizing Zeroes in Linear Models",
    "/test_linearization_max_zeros.py:1-26": "Max Zeros via Binary Variables",
    "/test_linearization_max_zeros.py:27-64": "Maximizing Zeros in Linear Model with Constraints",
    "/test_linearization_max_zeros.py:65-75": "Minimizing Summation Absolute Value",
    "/test_loading_light_intensity_data.py": "Fixing Faulty Radiation Data Loop",
    "/test_plot.jl": "Unused Plot with Formatted Output",
    "/test_server.py": "Asynchronous API Endpoints & Web App",
    "/test_server.py:1-41": "FastAPI Time Limit Mock Calculations",
    "/test_server.py:123-131": "Check Unique ID, Run App or Return Error",
    "/test_server.py:42-91": "Threaded Task Lock and Execution",
    "/test_server.py:92-122": "Asynchronous Task API Endpoints",
    "/test_server_client_configs.py": "Server URL Base Setup and Endpoints",
    "/test_timedelta.py": "Timedelta Date Difference",
    "/test_undefined.py": "Variable Assignment in Code Snippet",
    "/topology_conversion.py": "Topology Conversion and Serialization",
    "/validity_check.py": "Function Iteration and Class Initialization"
}