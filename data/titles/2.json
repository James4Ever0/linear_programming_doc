{
    "/microgrid_base/export_format_units.py": "Energy Source Classes for Microgrid Simulations",
    "/microgrid_base/export_format_units.py.j2": "Microgrid Device Parameters",
    "/microgrid_base/export_format_units.py:1-76": "Microgrid Energy Units Definition",
    "/microgrid_base/export_format_units.py:77-81": "Units for Microgrid Base Variables",
    "/microgrid_base/export_format_validate.py": "Microgrid Simulation Models",
    "/microgrid_base/export_format_validate.py.j2": "Microgrid Simulation and Planning Scheme Overview",
    "/microgrid_base/export_format_validate.py.j2:1-46": "Data Manipulation Functions",
    "/microgrid_base/export_format_validate.py.j2:119-146": "Jinja2 Macro for Validated Python Classes",
    "/microgrid_base/export_format_validate.py.j2:147-160": "Macro Functions for Transformations and Conversions",
    "/microgrid_base/export_format_validate.py.j2:161-200": "Microgrid Simulation Parameter Mapping",
    "/microgrid_base/export_format_validate.py.j2:201-233": "Microgrid Energy Dictionary and Macros",
    "/microgrid_base/export_format_validate.py.j2:234-260": "Macro Function for Updating Objects",
    "/microgrid_base/export_format_validate.py.j2:261-294": "Iterate, Validate and Update Device Parameters",
    "/microgrid_base/export_format_validate.py.j2:295-341": "Energy Source Time Series Generation",
    "/microgrid_base/export_format_validate.py.j2:342-372": "Device Output Curve Exporter",
    "/microgrid_base/export_format_validate.py.j2:373-377": "For Loop Ended and Code Moved",
    "/microgrid_base/export_format_validate.py.j2:47-83": "Safe Functions and Macros for Machine Learning",
    "/microgrid_base/export_format_validate.py.j2:84-118": "Parameter Macro Iteration and Updation",
    "/microgrid_base/export_format_validate.py:1-73": "Simulated Diesel Class and Utility Functions",
    "/microgrid_base/export_format_validate.py:121-184": "PV and Wind Power Simulation Results Classes",
    "/microgrid_base/export_format_validate.py:185-242": "Wind-Diesel Generator Simulation Class",
    "/microgrid_base/export_format_validate.py:243-268": "Diesel Generator Simulation Code",
    "/microgrid_base/export_format_validate.py:269-315": "Lithium-ion Battery Simulation Class",
    "/microgrid_base/export_format_validate.py:316-340": "Calculates Mean ReLU from Model's 电接口, Applies Time Factor",
    "/microgrid_base/export_format_validate.py:341-387": "Transformer Simulation Results Class",
    "/microgrid_base/export_format_validate.py:388-434": "Variable Transformer Simulation Class",
    "/microgrid_base/export_format_validate.py:435-481": "Bidirectional Converter Simulation Result Class",
    "/microgrid_base/export_format_validate.py:482-524": "Transmission Line Simulation Validation",
    "/microgrid_base/export_format_validate.py:525-575": "Hydrogen and Gas Turbine Simulation Classes",
    "/microgrid_base/export_format_validate.py:576-620": "Gas Turbine Simulation Result",
    "/microgrid_base/export_format_validate.py:621-677": "Electrolyzer Simulation Result Class",
    "/microgrid_base/export_format_validate.py:678-734": "Exporting Hydrogen and Renewable Power Curves",
    "/microgrid_base/export_format_validate.py:735-795": "Energy Source Power Curve Classes",
    "/microgrid_base/export_format_validate.py:74-120": "Microgrid Simulation Results Export",
    "/microgrid_base/export_format_validate.py:796-848": "Generating Microgrid Export Curves",
    "/microgrid_base/export_format_validate.py:849-904": "Bi-Directional Converter and Line Load Curve Exporter",
    "/microgrid_base/export_format_validate.py:906-961": "Export and Conversion of Power Curves",
    "/microgrid_base/export_format_validate.py:962-989": "HydrogenLoadCurve Class Definition",
    "/microgrid_base/expr_utils.py": "Efficient Symbolic Evaluation with Regular Expressions",
    "/microgrid_base/expr_utils.py:1-41": "Parentheses Pair Finder Function",
    "/microgrid_base/expr_utils.py:117-147": "Simplifying Mathematical Expressions with SymPy",
    "/microgrid_base/expr_utils.py:148-171": "Expression Evaluation and Logging Utility",
    "/microgrid_base/expr_utils.py:172-202": "Regular Expression to SymPy: Extract, Evaluate, Simplify",
    "/microgrid_base/expr_utils.py:203-227": "Simplify, Log, and Measure SymPy Expressions",
    "/microgrid_base/expr_utils.py:42-77": "RecursionContext for Python Expressions",
    "/microgrid_base/expr_utils.py:78-116": "Subexpression Simplification Function with Regular Expressions",
    "/microgrid_base/extra_models.py": "Extra Models Integration",
    "/microgrid_base/failsafe_reload.sh": "Failsafe Microgrid Reload Script",
    "/microgrid_base/failsafe_synth_mock_reload.sh": "Failsafe Synth Mock Reload Script",
    "/microgrid_base/failsafe_utils.py": "Microgrid Failsafe Utilities",
    "/microgrid_base/failsafe_utils.py:1-45": "Suppressing Exceptions with MethodRegistry",
    "/microgrid_base/failsafe_utils.py:121-157": "Microgrid Solver Utilities",
    "/microgrid_base/failsafe_utils.py:158-193": "SCIP Solver Output Parser",
    "/microgrid_base/failsafe_utils.py:194-230": "Path-Based Directory Switching and CPLEX Solution Loader",
    "/microgrid_base/failsafe_utils.py:233-263": "Parse and Load CPLEX Solutions",
    "/microgrid_base/failsafe_utils.py:264-290": "Linear Programming Solution Generator",
    "/microgrid_base/failsafe_utils.py:291-321": "CPLEX LP Solver Script Generation",
    "/microgrid_base/failsafe_utils.py:322-355": "Feasible Model Checks with Optimization",
    "/microgrid_base/failsafe_utils.py:356-395": "Failsafe SCIP Solver Registration",
    "/microgrid_base/failsafe_utils.py:396-414": "Failsafe Optimization Solver",
    "/microgrid_base/failsafe_utils.py:415-441": "Failsafe IPOPT Solver Function",
    "/microgrid_base/failsafe_utils.py:442-479": "Failsafe Solver: Four Methods in Order",
    "/microgrid_base/failsafe_utils.py:46-86": "Failsafe Utils: FileLogger with MethodRegistry",
    "/microgrid_base/failsafe_utils.py:480-500": "Failsafe Utility for Exception Handling",
    "/microgrid_base/failsafe_utils.py:87-120": "Solver Script Execution with Logging",
    "/microgrid_base/fastapi_celery_functions.py": "Energy Flow Graph Calculator for Microgrid",
    "/microgrid_base/fastapi_celery_functions.py:1-33": "Calculate Energy Flow Graph for Microgrid",
    "/microgrid_base/fastapi_celery_functions.py:35-66": "Calculates Results with Exceptions Handling",
    "/microgrid_base/fastapi_celery_functions.py:67-68": "Custom Celery Task Ignoring",
    "/microgrid_base/fastapi_celery_server.py": "Microgrid Celery Setup and Logging Issues",
    "/microgrid_base/fastapi_celery_server.py:1-42": "Celery Application Setup for Microgrid",
    "/microgrid_base/fastapi_celery_server.py:111-120": "Celery Memory and Time Limit Settings",
    "/microgrid_base/fastapi_celery_server.py:44-78": "Custom Logger for Celery with Rotating File Handler",
    "/microgrid_base/fastapi_celery_server.py:79-109": "Celery Task Function for Energy Flow Calculations",
    "/microgrid_base/fastapi_datamodel_template.py": "Microgrid Calculation Model and Results",
    "/microgrid_base/fastapi_datamodel_template.py:1-40": "Curve Class Definition",
    "/microgrid_base/fastapi_datamodel_template.py:112-145": "ParetoCurve Class Definition",
    "/microgrid_base/fastapi_datamodel_template.py:146-177": "CalculationResult Class and EnergyFlowGraph",
    "/microgrid_base/fastapi_datamodel_template.py:178-208": "Graph Class Conversion",
    "/microgrid_base/fastapi_datamodel_template.py:210-255": "Async Calculation Submission Result",
    "/microgrid_base/fastapi_datamodel_template.py:256-280": "Calculation State Results Classes",
    "/microgrid_base/fastapi_datamodel_template.py:42-76": "Microgrid Data Model: Classes and Objectives",
    "/microgrid_base/fastapi_datamodel_template.py:79-111": "Single Computation Result Class",
    "/microgrid_base/fastapi_server_template.py": "Microgrid FastAPI Server Template",
    "/microgrid_base/fastapi_server_template.py:1-45": "FastAPI Microgrid Server Setup",
    "/microgrid_base/fastapi_server_template.py:133-169": "Celery Task Management Functions",
    "/microgrid_base/fastapi_server_template.py:170-207": "ORJSON Response Logger",
    "/microgrid_base/fastapi_server_template.py:208-235": "Custom Error Logging Route Handler",
    "/microgrid_base/fastapi_server_template.py:236-267": "Asynchronous Route with Exception Handling",
    "/microgrid_base/fastapi_server_template.py:268-294": "Energy Flow Graph Calculation ID Generation",
    "/microgrid_base/fastapi_server_template.py:295-331": "Calculation State Management in Microgrid Application",
    "/microgrid_base/fastapi_server_template.py:332-362": "Asynchronous Microgrid Calculation State and Result",
    "/microgrid_base/fastapi_server_template.py:363-386": "Handling Failed Calculations with FAILSAFE Flag",
    "/microgrid_base/fastapi_server_template.py:387-412": "Pareto Curve Generation in Microgrid Base",
    "/microgrid_base/fastapi_server_template.py:415-440": "Revoke Calculation API Endpoint",
    "/microgrid_base/fastapi_server_template.py:441-476": "Task Revocation Endpoint",
    "/microgrid_base/fastapi_server_template.py:46-85": "IES Optimization FastAPI Server Template",
    "/microgrid_base/fastapi_server_template.py:86-130": "Stale Task Removal Functions",
    "/microgrid_base/fastapi_terminate_service.sh": "Forcefully Terminate Services with Tmux Kill-Server",
    "/microgrid_base/fastapi_tmuxp.sh": "Cross-Platform Tmuxp Configuration Loader",
    "/microgrid_base/fastapi_tmuxp.yml": "FastAPI Dev Environment",
    "/microgrid_base/financial/financial_calc.py": "Sympy-based Annuity Factor Calculator",
    "/microgrid_base/financial/financial_equation_solve.py": "Financial Equation Solver with Sympy",
    "/microgrid_base/financial/financial_equation_solve.py:1-48": "Sympy-based Financial Equation Solver",
    "/microgrid_base/financial/financial_equation_solve.py:124-145": "Equation Solver for Microgrid Financial Analysis",
    "/microgrid_base/financial/financial_equation_solve.py:49-123": "Dynamic Financial Arrays",
    "/microgrid_base/generate_basic_params.sh": "Automated Microgrid Parameter Generation Script",
    "/microgrid_base/generate_makefile.py": "Generate Makefile from Modules",
    "/microgrid_base/generate_makefile.py:1-42": "Extracting Python Modules for Makefile Generation",
    "/microgrid_base/generate_makefile.py:43-64": "Makefile Executor",
    "/microgrid_base/generate_makefile.py:65-81": "Update Makefile with Required Python Files",
    "/microgrid_base/generate_microgrid_device_names.py": "Generate Microgrid Device Names",
    "/microgrid_base/get_poly_degree_decompose_expression.py": "Simplifying Polynomial Expressions in Microgrid Models",
    "/microgrid_base/heatpump_code_reference/Machine_para_fit2.py": "Heat Pump Power Prediction Model",
    "/microgrid_base/heatpump_code_reference/Machine_para_fit2.py:1-31": "Initializing Set_Para_Fit Object and Preparing Data",
    "/microgrid_base/heatpump_code_reference/Machine_para_fit2.py:117-153": "Linear Regression for Heat Pump Power Prediction",
    "/microgrid_base/heatpump_code_reference/Machine_para_fit2.py:153-175": "Normalized COP Predictor for Heat Pumps",
    "/microgrid_base/heatpump_code_reference/Machine_para_fit2.py:177-179": "Incomplete Code Snippet",
    "/microgrid_base/heatpump_code_reference/Machine_para_fit2.py:32-61": "Heat Pump Coefficient Fitting",
    "/microgrid_base/heatpump_code_reference/Machine_para_fit2.py:63-91": "Power Correction Coefficients without Rate",
    "/microgrid_base/heatpump_code_reference/Machine_para_fit2.py:93-116": "Heat Pump Polynomial Coefficient Fitting",
    "/microgrid_base/heatpump_code_reference/SoilSource_new.py": "Soil Heat Pump Model and Optimization",
    "/microgrid_base/heatpump_code_reference/SoilSource_new.py:1-50": "SoilSource Class Initialization",
    "/microgrid_base/heatpump_code_reference/SoilSource_new.py:116-141": "Heat Pump Soil Source Class",
    "/microgrid_base/heatpump_code_reference/SoilSource_new.py:142-162": "Soil Source Heat Pump Constraints",
    "/microgrid_base/heatpump_code_reference/SoilSource_new.py:163-187": "Soil Heat Pump Optimization",
    "/microgrid_base/heatpump_code_reference/SoilSource_new.py:189-215": "Logarithmic Heating Sum Calculation",
    "/microgrid_base/heatpump_code_reference/SoilSource_new.py:216-235": "Calculate Heat Pump Average Temperatures",
    "/microgrid_base/heatpump_code_reference/SoilSource_new.py:52-79": "Initializing Heat Pump Model Variables",
    "/microgrid_base/heatpump_code_reference/SoilSource_new.py:80-115": "Initializing Variables for Soil Heat Pump Model",
    "/microgrid_base/heatpump_code_reference/chained_submodel.py": "Chained Submodel Heat Pump Optimization",
    "/microgrid_base/heatpump_code_reference/chained_submodel.py:1-41": "Chained Submodel with Mutable Parameters",
    "/microgrid_base/heatpump_code_reference/chained_submodel.py:42-55": "Chained Submodel Optimization",
    "/microgrid_base/heatpump_code_reference/example.py": "CPLEX-based MIP Solution for Heat Pump",
    "/microgrid_base/heatpump_code_reference/example.py:1-39": "MIP Problem Setup with Cplex",
    "/microgrid_base/heatpump_code_reference/example.py:41-85": "Linear Programming Problem with CPLEX Optimizer",
    "/microgrid_base/heatpump_code_reference/example.py:86-90": "Catching and Printing CplexExceptions",
    "/microgrid_base/heatpump_code_reference/plot_arr.py": "Plot Temperature Data for Heat Pump",
    "/microgrid_base/heatpump_code_reference/plot_arr.py:1-40": "2D/1D Array Plotting in IGESPlot",
    "/microgrid_base/heatpump_code_reference/plot_arr.py:41-54": "Plot Temperature Data and Save Figure",
    "/microgrid_base/heatpump_code_reference/print_profile.py": "Print Profile Stats",
    "/microgrid_base/heatpump_code_reference/profile_code.py": "Profiling Heat Pump Model Building",
    "/microgrid_base/heatpump_code_reference/profile_code.py:1-55": "Profiling Model Building Code",
    "/microgrid_base/heatpump_code_reference/profile_code.py:56-68": "Profiling Code to 'profile.log'",
    "/microgrid_base/heatpump_code_reference/pyomo_piecewise_set.py": "Pyomo Piecewise Objective Function for Heat Pump",
    "/microgrid_base/heatpump_code_reference/pyomo_piecewise_set.py:1-46": "Piecewise Objective Function in Pyomo",
    "/microgrid_base/heatpump_code_reference/pyomo_piecewise_set.py:47-58": "Efficient Pyomo Piecewise Set Constraints",
    "/microgrid_base/heatpump_code_reference/pyomo_piecewise_set_concrete.py": "Piecewise Set Definition in Pyomo Concrete Model",
    "/microgrid_base/heatpump_code_reference/result_processlib.py": "Value Class: Handles Solution Values of Various Types",
    "/microgrid_base/heatpump_code_reference/run_profile.cmd": "Real-Time Conda Environment Script Execution",
    "/microgrid_base/heatpump_code_reference/self_contained_class_which_trace_the_caller.py": "Tracing Caller Class Methods",
    "/microgrid_base/heatpump_code_reference/self_contained_class_which_trace_the_caller.py:1-29": "Self-Tracing Class for Heat Pumps",
    "/microgrid_base/heatpump_code_reference/self_contained_class_which_trace_the_caller.py:30-77": "Tracing Self-Contained Python Class Caller",
    "/microgrid_base/heatpump_code_reference/self_contained_class_which_trace_the_caller.py:78-78": "Call Method Triggered",
    "/microgrid_base/ies_optim.py": "IES Optimization: Logging and Utilities",
    "/microgrid_base/ies_optim_legacy.py.j2": "Microgrid Optimization Program",
    "/microgrid_base/ies_optim_legacy.py.j2:1-28": "Microgrid Optimization Legacy Code",
    "/microgrid_base/ies_optim_legacy.py.j2:1021-1042": "Object Initialization from Environment Variable",
    "/microgrid_base/ies_optim_legacy.py.j2:1043-1075": "Computation Parameters Class",
    "/microgrid_base/ies_optim_legacy.py.j2:1076-1106": "IES Optimization Legacy Code",
    "/microgrid_base/ies_optim_legacy.py.j2:1107-1151": "Microgrid Iteration Settings Class",
    "/microgrid_base/ies_optim_legacy.py.j2:1153-1200": "Financial and Simulation Parameters Classes",
    "/microgrid_base/ies_optim_legacy.py.j2:118-163": "Energy Pricing Model and Conversion Functions",
    "/microgrid_base/ies_optim_legacy.py.j2:1202-1236": "Device Model Initialization and Methods",
    "/microgrid_base/ies_optim_legacy.py.j2:1237-1263": "Interpolating 2D Data with Undefined Financial Method",
    "/microgrid_base/ies_optim_legacy.py.j2:1265-1290": "Microgrid Variable Management Code",
    "/microgrid_base/ies_optim_legacy.py.j2:1291-1314": "Multi-Variable Range Constraint Functions",
    "/microgrid_base/ies_optim_legacy.py.j2:1315-1336": "Variable Generation Methods",
    "/microgrid_base/ies_optim_legacy.py.j2:1337-1368": "Microgrid Optimization Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:1369-1393": "Creating Disjunctions and Piecewise Pairs in Model Functions",
    "/microgrid_base/ies_optim_legacy.py.j2:1394-1427": "Preprocessing Piecewise Data Function",
    "/microgrid_base/ies_optim_legacy.py.j2:1428-1461": "Creating Piecewise Functions with Performance Overhead",
    "/microgrid_base/ies_optim_legacy.py.j2:1462-1492": "Decomposing and Multiplying Linear Expressions",
    "/microgrid_base/ies_optim_legacy.py.j2:1493-1515": "Binary and Continuous Input Validation",
    "/microgrid_base/ies_optim_legacy.py.j2:1516-1538": "Microgrid Constraint Function",
    "/microgrid_base/ies_optim_legacy.py.j2:1540-1558": "Continuous Multiplication and Squares Calculation",
    "/microgrid_base/ies_optim_legacy.py.j2:1559-1586": "Optimizing Microgrid Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:1587-1609": "Renewable Energy Device Properties",
    "/microgrid_base/ies_optim_legacy.py.j2:1610-1632": "Transmission Line Initialization",
    "/microgrid_base/ies_optim_legacy.py.j2:1633-1653": "Simulated Device Count Calculation",
    "/microgrid_base/ies_optim_legacy.py.j2:164-201": "Energy Price Converter",
    "/microgrid_base/ies_optim_legacy.py.j2:1654-1683": "Legacy Microgrid Optimization Code",
    "/microgrid_base/ies_optim_legacy.py.j2:1684-1707": "Transformer and Transmission Line Power Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:1707-1725": "Transmission Line Optimization Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:1726-1746": "Setting Variable 'Pr' and Finding Pwire Value",
    "/microgrid_base/ies_optim_legacy.py.j2:1747-1773": "Assign, Calculate, and Estimate Microgrid Values",
    "/microgrid_base/ies_optim_legacy.py.j2:1774-1793": "Optimal Component Count and Performance Restrictions",
    "/microgrid_base/ies_optim_legacy.py.j2:1794-1817": "Define Variables with Expressions",
    "/microgrid_base/ies_optim_legacy.py.j2:1819-1841": "Annual Operating Hours Calculator",
    "/microgrid_base/ies_optim_legacy.py.j2:1842-1862": "Microgrid Constraints and Cost Calculation",
    "/microgrid_base/ies_optim_legacy.py.j2:1863-1886": "Sub-model Initialization for Microgrid Generators",
    "/microgrid_base/ies_optim_legacy.py.j2:1888-1906": "Microgrid Power Calculation",
    "/microgrid_base/ies_optim_legacy.py.j2:1908-1934": "Microgrid Device Initialization",
    "/microgrid_base/ies_optim_legacy.py.j2:1936-1951": "SOC Calculation with Design Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:1953-1981": "Battery System Capacity Calculator",
    "/microgrid_base/ies_optim_legacy.py.j2:1981-2002": "Microgrid Constraint Generation",
    "/microgrid_base/ies_optim_legacy.py.j2:2003-2032": "Microgrid Device Constraints Checker",
    "/microgrid_base/ies_optim_legacy.py.j2:202-230": "Monthly and Hourly Pricing Classes",
    "/microgrid_base/ies_optim_legacy.py.j2:2032-2048": "Power Curve Calculation for Wind Turbines",
    "/microgrid_base/ies_optim_legacy.py.j2:2049-2074": "Normalizing Power Values for Machine Types",
    "/microgrid_base/ies_optim_legacy.py.j2:2076-2088": "Microgrid Optimization: Disjunctive and Range Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:2090-2107": "Delta-Limited Device Power Control",
    "/microgrid_base/ies_optim_legacy.py.j2:2108-2120": "Power Constraints in Microgrid Optimization",
    "/microgrid_base/ies_optim_legacy.py.j2:2121-2139": "Legacy System Constraint Optimization",
    "/microgrid_base/ies_optim_legacy.py.j2:2140-2163": "Transformer and Renewable Energy Device Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:2164-2181": "Optimizing Renewable Energy Efficiency",
    "/microgrid_base/ies_optim_legacy.py.j2:2181-2194": "Renewable Energy Constraints and Power Limits",
    "/microgrid_base/ies_optim_legacy.py.j2:2196-2212": "Microgrid Optimization Code",
    "/microgrid_base/ies_optim_legacy.py.j2:2213-2238": "Microgrid Sub-Model Constraints Generation",
    "/microgrid_base/ies_optim_legacy.py.j2:2239-2257": "Subgroup Power Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:2258-2279": "Microgrid Constraints Setting",
    "/microgrid_base/ies_optim_legacy.py.j2:2280-2300": "Custom Range Constraints for Microgrid",
    "/microgrid_base/ies_optim_legacy.py.j2:2301-2314": "Microgrid Base Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:231-261": "Time-of-Day Pricing Model Code",
    "/microgrid_base/ies_optim_legacy.py.j2:2315-2334": "Daytime Mode Constraints in Microgrid Optimization",
    "/microgrid_base/ies_optim_legacy.py.j2:2335-2357": "Microgrid Power Constraints Calculation",
    "/microgrid_base/ies_optim_legacy.py.j2:2358-2370": "Power Delta Limit Conditions",
    "/microgrid_base/ies_optim_legacy.py.j2:2371-2402": "Lithium Battery Capacity Calculator",
    "/microgrid_base/ies_optim_legacy.py.j2:2404-2427": "Optimizing Legacy Microgrid Devices' Lifespan",
    "/microgrid_base/ies_optim_legacy.py.j2:2428-2453": "Dynamic Variables for Device Types",
    "/microgrid_base/ies_optim_legacy.py.j2:2454-2475": "Variable Calculation in Microgrid Base Class",
    "/microgrid_base/ies_optim_legacy.py.j2:2476-2507": "Annualized Variable Maintenance Cost Calculator",
    "/microgrid_base/ies_optim_legacy.py.j2:2508-2535": "Load Model Class Creation and Error Handling",
    "/microgrid_base/ies_optim_legacy.py.j2:2536-2570": "Default Energy Units Initialization",
    "/microgrid_base/ies_optim_legacy.py.j2:2571-2601": "Unit Conversion and Compatibility Checks",
    "/microgrid_base/ies_optim_legacy.py.j2:2602-2618": "Load Type Filters and Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:2619-2632": "Interruptible Load Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:262-289": "Step-wise Electricity Pricing Class",
    "/microgrid_base/ies_optim_legacy.py.j2:2633-2668": "Microgrid Device Cost Calculator",
    "/microgrid_base/ies_optim_legacy.py.j2:2669-2698": "Iterating Device Limits with Logger and Error Cleanup",
    "/microgrid_base/ies_optim_legacy.py.j2:2699-2725": "Microgrid Device Limit Sum Calculator",
    "/microgrid_base/ies_optim_legacy.py.j2:2726-2750": "Simulated Results Class Definition",
    "/microgrid_base/ies_optim_legacy.py.j2:2751-2783": "Device Model Protocol Class",
    "/microgrid_base/ies_optim_legacy.py.j2:2784-2807": "Multilingual Parameter Classes in Microgrid Optimization",
    "/microgrid_base/ies_optim_legacy.py.j2:2808-2832": "Function for Exporting Planning Results",
    "/microgrid_base/ies_optim_legacy.py.j2:2833-2852": "Microgrid Optimization Parameter Updater",
    "/microgrid_base/ies_optim_legacy.py.j2:2853-2872": "Updating Uninitialized Parameters",
    "/microgrid_base/ies_optim_legacy.py.j2:2872-2885": "Defining Export Function",
    "/microgrid_base/ies_optim_legacy.py.j2:2886-2899": "Maintenance and Emissions Calculator",
    "/microgrid_base/ies_optim_legacy.py.j2:2899-2924": "Unit Conversion Class Loop with Fix Needed",
    "/microgrid_base/ies_optim_legacy.py.j2:29-55": "Microgrid Optimization Code Snippet",
    "/microgrid_base/ies_optim_legacy.py.j2:290-315": "Microgrid Macro Code Generator",
    "/microgrid_base/ies_optim_legacy.py.j2:2925-2954": "Microgrid Node Classes",
    "/microgrid_base/ies_optim_legacy.py.j2:2955-2977": "Microgrid Device Classes with Validator",
    "/microgrid_base/ies_optim_legacy.py.j2:2978-3009": "Energy Flow Graph Class Definition",
    "/microgrid_base/ies_optim_legacy.py.j2:3010-3041": "Compute Power Demand Function",
    "/microgrid_base/ies_optim_legacy.py.j2:3042-3070": "Device Instance Creation and Initialization",
    "/microgrid_base/ies_optim_legacy.py.j2:3071-3091": "Initializing Adder Error Variables",
    "/microgrid_base/ies_optim_legacy.py.j2:3092-3111": "Optimizing Legacy Microgrid Load Factors",
    "/microgrid_base/ies_optim_legacy.py.j2:3112-3139": "Adder Error Combination and Aggregation",
    "/microgrid_base/ies_optim_legacy.py.j2:3140-3163": "Max Load Power and Energy Calculation",
    "/microgrid_base/ies_optim_legacy.py.j2:316-353": "Unit Conversion Macro for Device Parameters",
    "/microgrid_base/ies_optim_legacy.py.j2:3164-3191": "Microgrid Financial and Environmental Objectives Calculator",
    "/microgrid_base/ies_optim_legacy.py.j2:3193-3220": "Optimizing Microgrid with Financial and Environmental Factors",
    "/microgrid_base/ies_optim_legacy.py.j2:355-398": "Device ID Base Class",
    "/microgrid_base/ies_optim_legacy.py.j2:399-426": "DeviceInfo Class and Conversion Method",
    "/microgrid_base/ies_optim_legacy.py.j2:427-448": "Logging Warning for None Attribute",
    "/microgrid_base/ies_optim_legacy.py.j2:449-471": "Conversion Rate Calculator",
    "/microgrid_base/ies_optim_legacy.py.j2:473-533": "Enumeration Classes and Unit Conversions",
    "/microgrid_base/ies_optim_legacy.py.j2:534-555": "Microgrid Simulation Data Structures",
    "/microgrid_base/ies_optim_legacy.py.j2:556-582": "Load Class Definition and Validation",
    "/microgrid_base/ies_optim_legacy.py.j2:56-89": "Type Checking and Data Conversion Macros",
    "/microgrid_base/ies_optim_legacy.py.j2:583-608": "Pricing Models for Electric and Hydrogen Loads",
    "/microgrid_base/ies_optim_legacy.py.j2:609-631": "Device Class Definitions with Pydantic",
    "/microgrid_base/ies_optim_legacy.py.j2:632-663": "Renewable Energy Constraints and Pricing",
    "/microgrid_base/ies_optim_legacy.py.j2:664-677": "Wind and Diesel Generator Fields",
    "/microgrid_base/ies_optim_legacy.py.j2:678-694": "Unit Field Configuration in Microgrid Base",
    "/microgrid_base/ies_optim_legacy.py.j2:695-719": "Percent Field Validator",
    "/microgrid_base/ies_optim_legacy.py.j2:720-749": "Validating RatedPower for Wind Turbines",
    "/microgrid_base/ies_optim_legacy.py.j2:750-772": "Check Rated Power Function",
    "/microgrid_base/ies_optim_legacy.py.j2:773-811": "Extracting Parentheses with Regex",
    "/microgrid_base/ies_optim_legacy.py.j2:812-842": "Decorator-Based Logging and Expression Processing",
    "/microgrid_base/ies_optim_legacy.py.j2:843-867": "Polynomial Degree Checker",
    "/microgrid_base/ies_optim_legacy.py.j2:867-881": "Setter and Getter Macro",
    "/microgrid_base/ies_optim_legacy.py.j2:882-914": "Defining Shared and Input Parameters in Optimization Model",
    "/microgrid_base/ies_optim_legacy.py.j2:90-117": "Microgrid Model Macros and Constraints",
    "/microgrid_base/ies_optim_legacy.py.j2:915-942": "ModelWrapper Class Definition",
    "/microgrid_base/ies_optim_legacy.py.j2:943-973": "Methods of Microgrid Class",
    "/microgrid_base/ies_optim_legacy.py.j2:974-996": "Polynomial Degree Check and Debugging",
    "/microgrid_base/ies_optim_legacy.py.j2:997-1020": "Constraint Handling Class",
    "/microgrid_base/init.sh": "Microgrid Environment Setup",
    "/microgrid_base/init_apt_environ.sh": "Apt Package Installer and Update Script",
    "/microgrid_base/init_docker_launch.sh": "Init Docker Environment",
    "/microgrid_base/init_solver.sh": "Setting Up Solver Libraries",
    "/microgrid_base/init_update_conda.sh": "Init & Update Conda Packages Script",
    "/microgrid_base/init_update_conda_cplex.sh": "Init & Update Conda for CPLEX Microgrid Base",
    "/microgrid_base/init_update_conda_docplex.sh": "Install DOCPLEX in Conda",
    "/microgrid_base/install_cplex.sh": "Cplex Executable Command Execution",
    "/microgrid_base/install_docker.sh": "Install Docker on Ubuntu",
    "/microgrid_base/jinja_template_model_generator.py": "Jinja Template Microgrid Code Generator",
    "/microgrid_base/jinja_template_model_generator.py:1-33": "Microgrid Jinja Template Model Generator",
    "/microgrid_base/jinja_template_model_generator.py:34-67": "Device Type JSON Parsing and Template Rendering",
    "/microgrid_base/jinja_template_model_generator.py:68-92": "Microgrid Jinja Template Generator",
    "/microgrid_base/jinja_template_model_generator.py:94-122": "Jinja Template Model Generator",
    "/microgrid_base/jinja_utils.py": "Jinja Utils: Template Tools and Error Handling",
    "/microgrid_base/jinja_utils.py:1-44": "Jinja Utils: Type Hint and String Conversion",
    "/microgrid_base/jinja_utils.py:125-151": "Formats and Writes to File with Type Checking",
    "/microgrid_base/jinja_utils.py:152-179": "Pyright-Based Type Error Checker",
    "/microgrid_base/jinja_utils.py:180-217": "Jinja2 Template Utilities and Error Checking",
    "/microgrid_base/jinja_utils.py:218-266": "Inject Jinja2 Extra Functions"
}