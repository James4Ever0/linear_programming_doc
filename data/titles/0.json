{
    "/README.md": "Linear Approximation Tool for Energy Systems",
    "/README.md:1-43": "Linearizing Nonlinear Functions: IES Modeling Framework",
    "/README.md:44-63": "Execute Test Cases for Energy System, Warm Water Heating, and Cold Water Cooling",
    "/README.md:64-64": "Copy and Overwrite File Snippet",
    "/auto_question_device_params.py": "Auto-Question Device Parameters Logger",
    "/auto_question_device_params.py:1-51": "Auto-Question Device Params Setup",
    "/auto_question_device_params.py:53-74": "Auto Question: Device Params",
    "/celery_client_test.py": "Celery Client Status Checker",
    "/celery_client_test.py:1-47": "Revoking Celery Tasks Periodically",
    "/celery_client_test.py:48-53": "Revoke or Success: Data Retrieval",
    "/celery_fastapi_test.py": "Celery FastAPI Task Manager",
    "/celery_fastapi_test.py:1-44": "FastAPI & Celery Task Management",
    "/celery_fastapi_test.py:101-139": "FastAPI-Celery Task Manager",
    "/celery_fastapi_test.py:45-72": "Celery Task Result Retriever",
    "/celery_fastapi_test.py:75-100": "Creating Pending Celery Task with ID",
    "/celery_test.py": "Setting Up Celery App with Concurrency Management",
    "/celery_test.py:1-52": "Celery Concurrency Management with Redis Lock",
    "/celery_test.py:53-87": "Ineffective Lock Mechanism in Celery Task",
    "/celery_test.py:90-116": "Optimize Celery Task Configuration",
    "/check_non_convex_quadratic_constraint_in_model.py": "Checking Non-Convex Quadratic Constraint in Model",
    "/cloudpss_config2.py": "JSON Prefix Table Generator",
    "/cloudpss_config2.py:1-30": "Unique Prefix Extractor",
    "/cloudpss_config2.py:31-54": "Markdown Table Generator for Device Parameters",
    "/cloudpss_config2.py:55-55": "JSON Data Saved to 'f3'",
    "/cloudpss_config_curl_get.py": "Multilingual Electrical Device Optimization with Python JSON",
    "/cloudpss_config_curl_get.py:1-68": "Cloud-Based PSS Configuration: Python Script",
    "/cloudpss_config_curl_get.py:113-142": "Pin Definition and Parameter Filling Code",
    "/cloudpss_config_curl_get.py:143-166": "Input Parameters to DataFrame Conversion",
    "/cloudpss_config_curl_get.py:167-188": "Translating Parameter Names Table Formatter",
    "/cloudpss_config_curl_get.py:71-112": "JSON to Markdown Table Converter",
    "/cloudpss_download_component_ports.py": "Lambda Functions for Component Port Downloads",
    "/cloudpss_extract_component_ports.py": "CloudPS Extract Component Ports",
    "/cloudpss_extract_component_ports.py:1-26": "Extracting Component Ports with Python",
    "/cloudpss_extract_component_ports.py:27-44": "Extract Component Ports Code Analysis",
    "/cloudpss_jinja_code_generator.py": "Jinja Template Generator from Code",
    "/cloudpss_jinja_code_generator.py:1-49": "Cloud PSS Simulation Code Generator",
    "/cloudpss_jinja_code_generator.py:125-145": "Checking String Pattern and Formatting Unit",
    "/cloudpss_jinja_code_generator.py:146-164": "Unit Conversion and Extraction",
    "/cloudpss_jinja_code_generator.py:165-200": "Jinja2 Template Generator for Python",
    "/cloudpss_jinja_code_generator.py:202-224": "Jinja Code Generator: Rendering and Outputting Templates",
    "/cloudpss_jinja_code_generator.py:225-229": "Main Guard in Python Script",
    "/cloudpss_jinja_code_generator.py:50-91": "Units Conversion and Registry",
    "/cloudpss_jinja_code_generator.py:92-124": "Unit Conversion and Jinja Template Generation",
    "/cloudpss_model_revised.py": "Pyomo-Based PV Device Modeling",
    "/cloudpss_model_revised.py:1-54": "Device Performance Simulation Model",
    "/cloudpss_model_revised.py:131-157": "Efficient Solar Power Model Initialization",
    "/cloudpss_model_revised.py:55-88": "CloudPSS Model Revision: Initialization and Power Lists",
    "/cloudpss_model_revised.py:89-130": "PV Device Class Definition",
    "/cloudpss_model_template.py.j2": "Power System Simulation Model Template",
    "/cloudpss_model_template.py.j2:1-43": "Pydantic Models for Environment and Simulation",
    "/cloudpss_model_template.py.j2:117-154": "Customizable ConcreteModel Class Template",
    "/cloudpss_model_template.py.j2:156-159": "Looping Economic Constraints in Function",
    "/cloudpss_model_template.py.j2:45-85": "Device Class for Simulation Configuration",
    "/cloudpss_model_template.py.j2:86-116": "Model Power Variables Initialization",
    "/cloudpss_port_get.sh": "CloudPSS Get Request Script",
    "/cloudpss_port_get.sh:1-7": "CloudPSS GET Request with Authentication and Session Cookies",
    "/cloudpss_port_get.sh:8-14": "CORS Headers for Browser Detection",
    "/cloudpss_sdk_demo.py": "CloudPSS SDK Demo: API Design and Implementation",
    "/cloudpss_unit_conversions_test.py": "Pint-Based Unit Conversion Test",
    "/cloudpss_unit_conversions_test.py:1-38": "Pint Unit Conversions and Custom Units",
    "/cloudpss_unit_conversions_test.py:39-76": "Pint-based Unit Conversion and System Definition",
    "/cloudpss_unit_conversions_test.py:77-87": "Unit Conversion and Compatibility Test",
    "/cloudpss_unit_create_convert_compatible.py": "Unit Conversion and Compatibility",
    "/cmd_startup.cmd": "Autorun Script in CMD",
    "/cmd_startup.reg": "StartupCMD Registry Script",
    "/commit.py": "MD5 Checksums, Exceptions and Git Commits",
    "/commit.py:1-33": "Background MD5 Checksum Calculation",
    "/commit.py:106-140": "Cross-Platform Toast Notifications",
    "/commit.py:143-179": "Custom Exception Handling for Git Commits",
    "/commit.py:180-215": "Script Commit Validation Process",
    "/commit.py:217-245": "Automated Commit Checker",
    "/commit.py:247-272": "Verify and Set Up Commit Hook",
    "/commit.py:273-311": "GPTcommit Setup and Commit Check",
    "/commit.py:312-344": "Commit Validation and Execution Functions",
    "/commit.py:345-355": "Last Commit Time Saving",
    "/commit.py:35-68": "Process Initialization in Python Script",
    "/commit.py:69-105": "Exception Handling for Commit Process",
    "/config.py": "Simulation Parameters Configuration",
    "/create_shim_for_ipopt.ps1": "Create Shim for IPOPT",
    "/create_shim_for_nodejs.ps1": "Create Node.js Shim with NPX Script",
    "/create_shim_for_nodejs.ps1:1-17": "Create Node.js Shims Script",
    "/create_shim_for_nodejs.ps1:18-18": "Creating Node.js Shim 'npx' Sh script",
    "/create_shim_for_shot.ps1": "Create SHOT Shim with Script",
    "/curl_component_get.py": "Jinja2 Template Generator",
    "/curl_component_get.py:1-40": "Jinja2 Generator with JSON",
    "/curl_component_get.py:41-50": "Automated Template Renderer",
    "/curl_optim_component_get.sh.j2": "Optimized Curl Component Get Script",
    "/curl_optim_component_get.sh.j2:1-7": "Optimized CURL Component Retrieval",
    "/curl_optim_component_get.sh.j2:8-14": "Curl HTTP Headers Script",
    "/curl_simu_component_get.sh.j2": "Curl Simulates Component GET Request",
    "/curl_simu_component_get.sh.j2:1-7": "Curling HTTP Request with Cookies",
    "/curl_simu_component_get.sh.j2:8-14": "Curl Command with Headers and Redirect",
    "/data_visualize_utils.py": "Data Visualization Utility with Matplotlib",
    "/data_visualize_utils.py:1-38": "Data Visualization Utility for Energy Systems",
    "/data_visualize_utils.py:39-64": "Visualize IntegratedEnergySystem Device Counts",
    "/data_visualize_utils.py:65-96": "Printing All Decision Variables",
    "/data_visualize_utils.py:97-104": "Binary Variables Printing Utility",
    "/demo_utils.py": "Energy System Setup with NumPy Load Retrieval",
    "/demo_utils.py:1-54": "LoadGet Class for Hourly Load Data",
    "/demo_utils.py:127-171": "Utility Load and Price Functions",
    "/demo_utils.py:172-212": "Retrieve Resource Prices and Illumination",
    "/demo_utils.py:213-265": "Electric System Device Registration",
    "/demo_utils.py:266-302": "Setting Up Devices: Diesel Engine, PV System & Battery Storage",
    "/demo_utils.py:303-342": "Device Registration and Initialization",
    "/demo_utils.py:343-388": "Steam Generator Models",
    "/demo_utils.py:389-428": "Energy Storage Device Initialization and Registration",
    "/demo_utils.py:429-467": "Initializing Hot Water Devices",
    "/demo_utils.py:469-509": "Water Tank Energy Management Registration",
    "/demo_utils.py:510-552": "HVAC Device Initialization and Constraint Registration",
    "/demo_utils.py:55-92": "Hourly Steam Load and Energy Data Retrieval",
    "/demo_utils.py:553-592": "Energy Device Creation and Attributes",
    "/demo_utils.py:593-630": "Initializing Energy Storage Devices",
    "/demo_utils.py:631-653": "Phase Change Storage Device Initialization",
    "/demo_utils.py:93-126": "Energy Price Retriever",
    "/docplex_test.py": "Docplex: MIP Model Creation",
    "/draw_sankey_diagram.py": "Create Sankey Diagram with PyECharts",
    "/draw_sankey_diagram.py:1-42": "Creating Sankey Diagrams: Code & Libraries",
    "/draw_sankey_diagram.py:43-61": "Sankey Diagram Connections",
    "/draw_sankey_diagram.py:62-85": "Configure Sankey Diagram Nodes and Flows",
    "/draw_sankey_diagram.py:86-99": "Configure and Render Sankey Diagram with PyECharts",
    "/dump_pydantic_to_json.py": "Pydantic to JSON Dump",
    "/example.py": "Optimizing Problem with CPLEX",
    "/example.py:1-39": "Define Optimization Problem Parameters",
    "/example.py:41-85": "Optimization with CPLEX Python Example",
    "/example.py:86-90": "Catching Cplex Errors",
    "/example_docstring.py": "Dog Class and Random Function",
    "/example_docstring.py:1-52": "Dog Class and some_random_method Function",
    "/example_docstring.py:53-62": "Python Skeleton Docstring",
    "/export_pdf_word_pdoc.ps1": "Generate PDF Docs from Python Scripts with Pdoc",
    "/fastapi_celery_client_test.py": "Celery Client with Task Cancellation Check",
    "/fastapi_celery_client_test.py:1-41": "POST and GET Requests for Calculation State",
    "/fastapi_celery_client_test.py:43-55": "Checking Cancellation Status in Celery Tasks",
    "/fastapi_celery_server.py": "FastAPI Celery Energy Server",
    "/fastapi_celery_server.py:1-40": "Celery-based Energy Flow Calculation",
    "/fastapi_celery_server.py:41-71": "Celery Worker Configuration and Startup",
    "/fastapi_client_generated_test.py": "FastAPI Client Test: Chimichang-App Integration",
    "/fastapi_client_generated_test.py:2-37": "FastAPI Client Generation and Testing",
    "/fastapi_client_generated_test.py:39-41": "Running Python Script with Subprocess",
    "/fastapi_client_generator.py": "FastAPI Client Generator",
    "/fastapi_client_test.py": "FastAPI Client Test: POST Request",
    "/fastapi_datamodel_template.py": "Efficient Microgrid Simulation Models",
    "/fastapi_datamodel_template.py:1-41": "Pydantic Models for Microgrid System",
    "/fastapi_datamodel_template.py:111-141": "AC Network Graph Model",
    "/fastapi_datamodel_template.py:143-188": "NetworkX Graph Conversion and State Model",
    "/fastapi_datamodel_template.py:189-213": "Asynchronous Calculation and Revocation Results",
    "/fastapi_datamodel_template.py:42-72": "Simulation Data Model Definition",
    "/fastapi_datamodel_template.py:73-110": "Energy Flow Graph Modeling and Simulation",
    "/fastapi_generate_nodejs_client_typescript.cmd": "FastAPI TypeScript Client Generator",
    "/fastapi_server_template.py": "FastAPI Celery IES Simulation",
    "/fastapi_server_template.py:1-43": "FastAPI Celery IES Simulation Server",
    "/fastapi_server_template.py:127-168": "Asynchronous EnergyFlowGraph Calculation Server",
    "/fastapi_server_template.py:169-204": "Asynchronous Calculation Submission in FastAPI",
    "/fastapi_server_template.py:205-237": "FastAPI Server: Routes & Calculation Control",
    "/fastapi_server_template.py:238-266": "Task Revocation Handler",
    "/fastapi_server_template.py:267-277": "Task Clearance in 24-hour Cache",
    "/fastapi_server_template.py:45-88": "Stale Task Cleanup Functions",
    "/fastapi_server_template.py:90-126": "Celery Task Status Callback Function",
    "/fastapi_server_with_doc.py": "FastAPI User Item Server\n\nTitle within 3 to 7 words:\nUser-Item FastAPI Server",
    "/fastapi_server_with_doc.py:1-29": "FastAPI Server Doc Generation",
    "/fastapi_server_with_doc.py:107-135": "Create Item FastAPI Route",
    "/fastapi_server_with_doc.py:136-172": "Create Item - Name Validation",
    "/fastapi_server_with_doc.py:173-177": "Setting up FastAPI Server",
    "/fastapi_server_with_doc.py:30-73": "FastAPI Server Setup with Items Endpoint",
    "/fastapi_server_with_doc.py:74-106": "FastAPI Server with Item Endpoint",
    "/generate_call_graph.cmd": "Generate Call Graphs from Python Files",
    "/generate_document.cmd": "Automated IES Planning Doc Generation",
    "/get_class_name.py": "Class A: Property Initialization and Updates",
    "/get_requirements.cmd": "Uniquely Listing Imports from Multiple Python Files",
    "/host_document.cmd": "Local Python Doc Server on 8021",
    "/install_gsudo.ps1": "Secure gsudo Setup Installation",
    "/install_gsudo.ps1:1-30": "Secure gsudo Setup via REST",
    "/install_gsudo.ps1:31-49": "gsudo Installation Completion Guide",
    "/jinja_test.j2": "Jinja2 Loop and Macro Demo",
    "/linearization_config.py": "Linearization Configuration",
    "/matlab_code/matlab_to_python_howto.md": "MATLAB to Python Conversion with matlab2python",
    "/microgrid_base/Dockerfile_backup": "Streamlined Microgrid Docker Setup",
    "/microgrid_base/Dockerfile_backup:1-25": "Ubuntu 22.04 Docker Image Setup",
    "/microgrid_base/Dockerfile_backup:26-44": "Setting Up Container Environment for Microgrid",
    "/microgrid_base/Dockerfile_init": "Accelerating Microgrid Docker Init",
    "/microgrid_base/Dockerfile_init:1-27": "Dockerizing Microgrid Environment Setup",
    "/microgrid_base/Dockerfile_init:28-35": "Optimizing Microgrid Docker Init Script",
    "/microgrid_base/Dockerfile_main": "Dockerizing CPLEX Environment Setup",
    "/microgrid_base/Dockerfile_main:1-30": "Dockerizing CPLEX in Conda Environment",
    "/microgrid_base/Dockerfile_main:31-35": "Automated Docker Container Launcher",
    "/microgrid_base/Dockerfile_patch": "Microgrid Docker Patch",
    "/microgrid_base/Dockerfile_update": "Microgrid Dockerfile Update",
    "/microgrid_base/Dockerfile_update_self": "Dockerfile: Update and Initialize Microgrid Base Image",
    "/microgrid_base/HOW_TO_DEBUG.md": "Debugging Microgrid MILP Models",
    "/microgrid_base/HOW_TO_DEBUG.md:1-21": "Debugging MILP Models: Configuration and Error Tracking",
    "/microgrid_base/HOW_TO_DEBUG.md:21-41": "Efficient Microgrid Debugging",
    "/microgrid_base/HOW_TO_DEBUG.md:41-41": "Debugging Microgrid Devices",
    "/microgrid_base/Makefile": "Configure & Deploy Microgrid Server Environment",
    "/microgrid_base/Makefile.j2": "Macro-Driven Python Build Process",
    "/microgrid_base/Makefile:1-26": "Configure Microgrid_Base Makefile",
    "/microgrid_base/Makefile:101-120": "Comprehensive Makefile for Building and Exporting",
    "/microgrid_base/Makefile:122-160": "Microgrid Simulation Environment Setup",
    "/microgrid_base/Makefile:162-197": "Makefile: Code Checks, Tests & Release Creation",
    "/microgrid_base/Makefile:199-225": "Comprehensive Makefile for Server Building",
    "/microgrid_base/Makefile:227-242": "Microgrid JSON Preprocessing",
    "/microgrid_base/Makefile:242-276": "Microgrid File Manipulation Tasks",
    "/microgrid_base/Makefile:27-70": "Customizable Conda Makefile for Microgrid Simulations",
    "/microgrid_base/Makefile:277-311": "Alternative Solver Testing and Debugging",
    "/microgrid_base/Makefile:312-337": "Microgrid Solver Test Suite",
    "/microgrid_base/Makefile:72-99": "Microgrid Server Release Makefile",
    "/microgrid_base/README.md": "Python Microgrid IESLang Toolkit",
    "/microgrid_base/README.md:1-35": "Microgrid Algorithm Service",
    "/microgrid_base/README.md:103-115": "Python File Purposes in Project",
    "/microgrid_base/README.md:116-130": "Microgrid Base: File Structure",
    "/microgrid_base/README.md:131-144": "Project File Structure Overview",
    "/microgrid_base/README.md:37-56": "Microgrid Python Setup",
    "/microgrid_base/README.md:57-74": "Task Breakdown for Microgrid_Base",
    "/microgrid_base/README.md:75-90": "Microgrid Server Release",
    "/microgrid_base/README.md:91-103": "Microgrid Optimization Codebase",
    "/microgrid_base/__init__.py": "Microgrid Base Module Import",
    "/microgrid_base/adaptive_sampling/test.py": "Hyperopt-Driven Microgrid Point Optimization",
    "/microgrid_base/adaptive_sampling/test_adaptive_piecewise_approximation.py": "Piecewise Linear Fit and Prediction",
    "/microgrid_base/adaptive_sampling/test_adaptive_piecewise_approximation.py:1-39": "Piecewise Linear Fitting with Adaptive Sampling",
    "/microgrid_base/adaptive_sampling/test_adaptive_piecewise_approximation.py:40-42": "Adaptive Piecewise Approximation Plotting",
    "/microgrid_base/adaptive_sampling/test_bisect.py": "Adaptive Piecewise Regression with Error Threshold",
    "/microgrid_base/adaptive_sampling/test_bisect.py:1-27": "Adaptive Piecewise Linear Regression",
    "/microgrid_base/adaptive_sampling/test_bisect.py:29-59": "Adaptive Time Series Error Bisector",
    "/microgrid_base/adaptive_sampling/test_bisect.py:61-67": "Adaptive Piecewise Approximation Subsectioning",
    "/microgrid_base/adaptive_sampling/test_decision_tree_linear_regression.py": "Decision Tree Regression for Piecewise Linear Fitting",
    "/microgrid_base/adaptive_sampling/test_decision_tree_linear_regression.py:1-33": "Decision Tree Regression for Segmenting Data",
    "/microgrid_base/adaptive_sampling/test_decision_tree_linear_regression.py:34-66": "Adaptive Sampling: Decision Tree-Based Piecewise Linear Regression",
    "/microgrid_base/adaptive_sampling/test_decision_tree_linear_regression.py:67-88": "Piecewise Linear Regression Plotter",
    "/microgrid_base/adaptive_sampling/test_get_breakpoints.py": "Dynamic Max Depth Decision Tree Regression",
    "/microgrid_base/adaptive_sampling/test_get_breakpoints.py:1-43": "Code: Linear Data Generation and Derivative Calculation",
    "/microgrid_base/adaptive_sampling/test_get_breakpoints.py:116-127": "Scatter Plot with Piecewise Approximation",
    "/microgrid_base/adaptive_sampling/test_get_breakpoints.py:44-86": "Adaptive Sampling Breakpoint Detection",
    "/microgrid_base/adaptive_sampling/test_get_breakpoints.py:87-114": "Breakpoint List Generation",
    "/microgrid_base/adaptive_sampling/test_mlinsights.py": "Visualizing Piecewise Linear Regression",
    "/microgrid_base/adaptive_sampling/test_mlinsights.py:1-32": "Visualizing PiecewiseRegressor with DecisionTreeRegressor in mlinsights",
    "/microgrid_base/adaptive_sampling/test_mlinsights.py:33-36": "Piecewise Linear Regression Plot with Legends",
    "/microgrid_base/adaptive_sampling/test_np_piecewise_curve_fit.py": "Piecewise Curve Fitting in Python",
    "/microgrid_base/adaptive_sampling/test_piecewise_regression.py": "Piecewise Regression for Sinusoidal Fits",
    "/microgrid_base/adaptive_sampling/test_shift.py": "Adaptive Test Shift Optimization",
    "/microgrid_base/adaptive_sampling/test_shift.py:1-31": "Shift and Optimize Data Regions",
    "/microgrid_base/adaptive_sampling/test_shift.py:103-130": "Adaptive Sampling Error Reduction",
    "/microgrid_base/adaptive_sampling/test_shift.py:32-63": "Adaptive Sampling: Iterative Breakpoint Shifting",
    "/microgrid_base/adaptive_sampling/test_shift.py:64-102": "Adaptive Sampling: Shifting Sections for Error Reduction",
    "/microgrid_base/adaptive_sampling/test_torchpwl.py": "Piecewise PWL Function Application",
    "/microgrid_base/arbitrary_topology_generation.py": "Random Microgrid Topology Generation with Barabasi-Albert Model",
    "/microgrid_base/arbitrary_topology_generation.py:1-28": "Microgrid Arbitrary Topology Generation",
    "/microgrid_base/arbitrary_topology_generation.py:30-72": "Microgrid Topology Generation with NetworkX",
    "/microgrid_base/arbitrary_topology_generation.py:74-93": "Barabasi-Albert Model Graph Generation",
    "/microgrid_base/celery_test.py": "JSON Task Sender & Modifier",
    "/microgrid_base/celery_test.py:1-48": "JSON Modification and POST Request Sender",
    "/microgrid_base/celery_test.py:49-73": "URL Request Handler with Logging and JSON",
    "/microgrid_base/chatgpt_convert_latex_to_python/README.md": "Effortless LaTeX to Python Conversion",
    "/microgrid_base/chatgpt_convert_latex_to_python/convert_code_to_webpage.cmd": "Python Code Highlighting and Conversion",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md": "SymPy-Powered Latex to Python Converter",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:1-26": "Pygments-Based HTML Syntax Highlighting",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:101-104": "Defining Base and Index Symbols",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:104-119": "SymPy-based Summation Function",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:120-141": "Pygments CSS for Code Syntax Highlighting",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:142-159": "CSS Styles for Text Editor Syntax Elements",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:160-177": "CSS Styles for Code Syntax Elements",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:178-195": "Syntax Highlighting for Programming Languages",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:196-214": "CSS-Python Code Examples",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:215-223": "Sympy Import with Variable Naming Suggestions",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:223-226": "SymPy Sum with Positive Integer Index",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:227-232": "SymPy Sum Function Demystified",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:232-236": "Sympy Derivative Calculation",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:237-239": "Sympy: Latex to Python Derivative and Integral Calculation",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:240-245": "SymPy Latex Printing Example",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:246-249": "Converting Latex to Python: Real Numbers and Intervals",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:249-253": "SymPy Library Example: Printing Latex Variable and Attributes",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:253-256": "Fixing Syntax Error in SymPy Latex Printing",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:257-260": "SymPy Library Multiplication Check",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:260-262": "Sympy Interval Intersection with Natural Numbers",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:262-265": "Sympy Condition Set Interval Printer",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:265-268": "Symbolic Function Creation with SymPy",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:27-44": "Syntax Highlighting Styles",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:45-62": "Syntax Highlighting Styles for Programming Elements",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:63-80": "CSS Styles for Code Syntax Elements",
    "/microgrid_base/chatgpt_convert_latex_to_python/example_snippet.md:81-100": "SymPy Editor Styling",
    "/microgrid_base/chatgpt_convert_latex_to_python/extract_line_range_from_html.py": "Extract Line Range from HTML",
    "/microgrid_base/chatgpt_convert_latex_to_python/highlight_html.py": "BeautifulSoup HTML Manipulation",
    "/microgrid_base/chatgpt_convert_latex_to_python/highlight_html.py:1-43": "Highlight HTML Range with JS/CSS",
    "/microgrid_base/chatgpt_convert_latex_to_python/highlight_html.py:44-72": "Web Scraping: Wrap, Append, Save",
    "/microgrid_base/chatgpt_convert_latex_to_python/highlight_line.css": "Highlight Line CSS",
    "/microgrid_base/chatgpt_convert_latex_to_python/jump_to_line.md": "Mathematical Code: Variable Limits",
    "/microgrid_base/chatgpt_convert_latex_to_python/jump_to_line.md:1-104": "Mathematical Code Snippet",
    "/microgrid_base/chatgpt_convert_latex_to_python/jump_to_line.md:105-113": "Variables in Microgrid Base: Real and Integer Ranges",
    "/microgrid_base/chatgpt_convert_latex_to_python/render_markdown_to_html.cmd": "Markdown to HTML Conversion",
    "/microgrid_base/chatgpt_convert_latex_to_python/render_markdown_with_latex.py": "Markdown to HTML with Latex Equations",
    "/microgrid_base/chatgpt_convert_latex_to_python/test_code.py": "SymPy-Powered Expression Manipulation",
    "/microgrid_base/chatgpt_convert_latex_to_python/test_code.py:1-39": "SymPy Summation in GitHub Issue",
    "/microgrid_base/chatgpt_convert_latex_to_python/test_code.py:40-54": "SymPy Mathematical Expression Manipulation",
    "/microgrid_base/code_checker.py": "Comprehensive Microgrid Code Validator",
    "/microgrid_base/code_checker.py:1-39": "Code Sniffer and Modifier",
    "/microgrid_base/code_checker.py:131-153": "AST Syntax Checker",
    "/microgrid_base/code_checker.py:154-175": "Import Checker: Identify Missing \"pyomo.environ\"",
    "/microgrid_base/code_checker.py:176-202": "Import Verification and Modification",
    "/microgrid_base/code_checker.py:203-204": "Command Execution with os.system()",
    "/microgrid_base/code_checker.py:40-69": "Code Snippet: File Manipulation Functions",
    "/microgrid_base/code_checker.py:71-91": "Replacing Print Statements with Logger",
    "/microgrid_base/code_checker.py:92-130": "Python Code Linter and Fixing Tool",
    "/microgrid_base/conda_init.sh": "Condenv Reset with Python 3.11.2"
}